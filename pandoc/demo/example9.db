<?xml version="1.0" encoding="utf-8" ?>
<!DOCTYPE article PUBLIC "-//OASIS//DTD DocBook XML V4.4//EN"
                  "http://www.oasis-open.org/docbook/xml/4.4/docbookx.dtd">
<article>
  <articleinfo>
    <title>Pandoc User’s Guide</title>
    <author>
      <firstname>John</firstname>
      <surname>MacFarlane</surname>
    </author>
    <date>January 19, 2013</date>
  </articleinfo>
<sect1 id="synopsis">
  <title>Synopsis</title>
  <para>
    pandoc [<emphasis>options</emphasis>][*input-file*]…
  </para>
</sect1>
<sect1 id="description">
  <title>Description</title>
  <para>
    Pandoc is a <ulink url="http://www.haskell.org/">Haskell</ulink>
    library for converting from one markup format to another, and a
    command-line tool that uses this library. It can read
    <ulink url="http://daringfireball.net/projects/markdown/">markdown</ulink>
    and (subsets of)
    <ulink url="http://redcloth.org/textile">Textile</ulink>,
    <ulink url="http://docutils.sourceforge.net/docs/ref/rst/introduction.html">reStructuredText</ulink>,
    <ulink url="http://www.w3.org/TR/html40/">HTML</ulink>,
    <ulink url="http://www.latex-project.org/">LaTeX</ulink>,
    <ulink url="http://www.mediawiki.org/wiki/Help:Formatting">MediaWiki
    markup</ulink>, and <ulink url="http://www.docbook.org/">DocBook
    XML</ulink>; and it can write plain text,
    <ulink url="http://daringfireball.net/projects/markdown/">markdown</ulink>,
    <ulink url="http://docutils.sourceforge.net/docs/ref/rst/introduction.html">reStructuredText</ulink>,
    <ulink url="http://www.w3.org/TR/xhtml1/">XHTML</ulink>,
    <ulink url="http://www.w3.org/TR/html5/">HTML 5</ulink>,
    <ulink url="http://www.latex-project.org/">LaTeX</ulink> (including
    <ulink url="http://www.tex.ac.uk/CTAN/macros/latex/contrib/beamer">beamer</ulink>
    slide shows),
    <ulink url="http://www.pragma-ade.nl/">ConTeXt</ulink>,
    <ulink url="http://en.wikipedia.org/wiki/Rich_Text_Format">RTF</ulink>,
    <ulink url="http://www.docbook.org/">DocBook XML</ulink>,
    <ulink url="http://opendocument.xml.org/">OpenDocument XML</ulink>,
    <ulink url="http://en.wikipedia.org/wiki/OpenDocument">ODT</ulink>,
    <ulink url="http://www.microsoft.com/interop/openup/openxml/default.aspx">Word
    docx</ulink>, <ulink url="http://www.gnu.org/software/texinfo/">GNU
    Texinfo</ulink>,
    <ulink url="http://www.mediawiki.org/wiki/Help:Formatting">MediaWiki
    markup</ulink>, <ulink url="http://www.idpf.org/">EPUB</ulink> (v2
    or v3),
    <ulink url="http://www.fictionbook.org/index.php/Eng:XML_Schema_Fictionbook_2.1">FictionBook2</ulink>,
    <ulink url="http://redcloth.org/textile">Textile</ulink>,
    <ulink url="http://developer.apple.com/DOCUMENTATION/Darwin/Reference/ManPages/man7/groff_man.7.html">groff
    man</ulink> pages, <ulink url="http://orgmode.org">Emacs
    Org-Mode</ulink>,
    <ulink url="http://www.methods.co.nz/asciidoc/">AsciiDoc</ulink>,
    and <ulink url="http://www.w3.org/Talks/Tools/Slidy/">Slidy</ulink>,
    <ulink url="http://goessner.net/articles/slideous/">Slideous</ulink>,
    <ulink url="http://paulrouget.com/dzslides/">DZSlides</ulink>, or
    <ulink url="http://meyerweb.com/eric/tools/s5/">S5</ulink> HTML
    slide shows. It can also produce
    <ulink url="http://www.adobe.com/pdf/">PDF</ulink> output on systems
    where LaTeX is installed.
  </para>
  <para>
    Pandoc’s enhanced version of markdown includes syntax for footnotes,
    tables, flexible ordered lists, definition lists, fenced code
    blocks, superscript, subscript, strikeout, title blocks, automatic
    tables of contents, embedded LaTeX math, citations, and markdown
    inside HTML block elements. (These enhancements, described below
    under <link linkend="pandocs-markdown">Pandoc’s markdown</link>, can
    be disabled using the <literal>markdown_strict</literal> input or
    output format.)
  </para>
  <para>
    In contrast to most existing tools for converting markdown to HTML,
    which use regex substitutions, Pandoc has a modular design: it
    consists of a set of readers, which parse text in a given format and
    produce a native representation of the document, and a set of
    writers, which convert this native representation into a target
    format. Thus, adding an input or output format requires only adding
    a reader or writer.
  </para>
  <sect2 id="using-pandoc">
    <title>Using <literal>pandoc</literal></title>
    <para>
      If no <emphasis>input-file</emphasis> is specified, input is read
      from <emphasis>stdin</emphasis>. Otherwise, the
      <emphasis>input-files</emphasis> are concatenated (with a blank
      line between each) and used as input. Output goes to
      <emphasis>stdout</emphasis> by default (though output to
      <emphasis>stdout</emphasis> is disabled for the
      <literal>odt</literal>, <literal>docx</literal>,
      <literal>epub</literal>, and <literal>epub3</literal> output
      formats). For output to a file, use the <literal>-o</literal>
      option:
    </para>
    <programlisting>
pandoc -o output.html input.txt
</programlisting>
    <para>
      Instead of a file, an absolute URI may be given. In this case
      pandoc will fetch the content using HTTP:
    </para>
    <programlisting>
pandoc -f html -t markdown http://www.fsf.org
</programlisting>
    <para>
      If multiple input files are given, <literal>pandoc</literal> will
      concatenate them all (with blank lines between them) before
      parsing.
    </para>
    <para>
      The format of the input and output can be specified explicitly
      using command-line options. The input format can be specified
      using the <literal>-r/--read</literal> or
      <literal>-f/--from</literal> options, the output format using the
      <literal>-w/--write</literal> or <literal>-t/--to</literal>
      options. Thus, to convert <literal>hello.txt</literal> from
      markdown to LaTeX, you could type:
    </para>
    <programlisting>
pandoc -f markdown -t latex hello.txt
</programlisting>
    <para>
      To convert <literal>hello.html</literal> from html to markdown:
    </para>
    <programlisting>
pandoc -f html -t markdown hello.html
</programlisting>
    <para>
      Supported output formats are listed below under the
      <literal>-t/--to</literal> option. Supported input formats are
      listed below under the <literal>-f/--from</literal> option. Note
      that the <literal>rst</literal>, <literal>textile</literal>,
      <literal>latex</literal>, and <literal>html</literal> readers are
      not complete; there are some constructs that they do not parse.
    </para>
    <para>
      If the input or output format is not specified explicitly,
      <literal>pandoc</literal> will attempt to guess it from the
      extensions of the input and output filenames. Thus, for example,
    </para>
    <programlisting>
pandoc -o hello.tex hello.txt
</programlisting>
    <para>
      will convert <literal>hello.txt</literal> from markdown to LaTeX.
      If no output file is specified (so that output goes to
      <emphasis>stdout</emphasis>), or if the output file’s extension is
      unknown, the output format will default to HTML. If no input file
      is specified (so that input comes from
      <emphasis>stdin</emphasis>), or if the input files’ extensions are
      unknown, the input format will be assumed to be markdown unless
      explicitly specified.
    </para>
    <para>
      Pandoc uses the UTF-8 character encoding for both input and
      output. If your local character encoding is not UTF-8, you should
      pipe input and output through <literal>iconv</literal>:
    </para>
    <programlisting>
iconv -t utf-8 input.txt | pandoc | iconv -f utf-8
</programlisting>
  </sect2>
  <sect2 id="creating-a-pdf">
    <title>Creating a PDF</title>
    <para>
      Earlier versions of pandoc came with a program,
      <literal>markdown2pdf</literal>, that used pandoc and pdflatex to
      produce a PDF. This is no longer needed, since
      <literal>pandoc</literal> can now produce <literal>pdf</literal>
      output itself. To produce a PDF, simply specify an output file
      with a <literal>.pdf</literal> extension. Pandoc will create a
      latex file and use pdflatex (or another engine, see
      <literal>--latex-engine</literal>) to convert it to PDF:
    </para>
    <programlisting>
pandoc test.txt -o test.pdf
</programlisting>
    <para>
      Production of a PDF requires that a LaTeX engine be installed (see
      <literal>--latex-engine</literal>, below), and assumes that the
      following LaTeX packages are available:
      <literal>amssymb</literal>, <literal>amsmath</literal>,
      <literal>ifxetex</literal>, <literal>ifluatex</literal>,
      <literal>listings</literal> (if the <literal>--listings</literal>
      option is used), <literal>fancyvrb</literal>,
      <literal>longtable</literal>, <literal>url</literal>,
      <literal>graphicx</literal>, <literal>hyperref</literal>,
      <literal>ulem</literal>, <literal>babel</literal> (if the
      <literal>lang</literal> variable is set),
      <literal>fontspec</literal> (if <literal>xelatex</literal> or
      <literal>lualatex</literal> is used as the LaTeX engine),
      <literal>xltxtra</literal> and <literal>xunicode</literal> (if
      <literal>xelatex</literal> is used).
    </para>
  </sect2>
  <sect2 id="hsmarkdown">
    <title><literal>hsmarkdown</literal></title>
    <para>
      A user who wants a drop-in replacement for
      <literal>Markdown.pl</literal> may create a symbolic link to the
      <literal>pandoc</literal> executable called
      <literal>hsmarkdown</literal>. When invoked under the name
      <literal>hsmarkdown</literal>, <literal>pandoc</literal> will
      behave as if invoked with
      <literal>-f markdown_strict --email-obfuscation=references</literal>,
      and all command-line options will be treated as regular arguments.
      However, this approach does not work under Cygwin, due to problems
      with its simulation of symbolic links.
    </para>
  </sect2>
</sect1>
<sect1 id="options">
  <title>Options</title>
  <sect2 id="general-options">
    <title>General options</title>
    <variablelist>
      <varlistentry>
        <term>
          <literal>-f</literal> <emphasis>FORMAT</emphasis>,
          <literal>-r</literal> <emphasis>FORMAT</emphasis>,
          <literal>--from=</literal><emphasis>FORMAT</emphasis>,
          <literal>--read=</literal><emphasis>FORMAT</emphasis>
        </term>
        <listitem>
          <para>
            Specify input format. <emphasis>FORMAT</emphasis> can be
            <literal>native</literal> (native Haskell),
            <literal>json</literal> (JSON version of native AST),
            <literal>markdown</literal> (pandoc’s extended markdown),
            <literal>markdown_strict</literal> (original unextended
            markdown), <literal>markdown_phpextra</literal> (PHP
            Markdown Extra extended markdown),
            <literal>markdown_github</literal> (github extended
            markdown), <literal>textile</literal> (Textile),
            <literal>rst</literal> (reStructuredText),
            <literal>html</literal> (HTML), <literal>docbook</literal>
            (DocBook XML), <literal>mediawiki</literal> (MediaWiki
            markup), or <literal>latex</literal> (LaTeX). If
            <literal>+lhs</literal> is appended to
            <literal>markdown</literal>, <literal>rst</literal>,
            <literal>latex</literal>, the input will be treated as
            literate Haskell source: see
            <link linkend="literate-haskell-support">Literate Haskell
            support</link>, below. Markdown syntax extensions can be
            individually enabled or disabled by appending
            <literal>+EXTENSION</literal> or
            <literal>-EXTENSION</literal> to the format name. So, for
            example,
            <literal>markdown_strict+footnotes+definition_lists</literal>
            is strict markdown with footnotes and definition lists
            enabled, and
            <literal>markdown-pipe_tables+hard_line_breaks</literal> is
            pandoc’s markdown without pipe tables and with hard line
            breaks. See <link linkend="pandocs-markdown">Pandoc’s
            markdown</link>, below, for a list of extensions and their
            names.
          </para>
        </listitem>
      </varlistentry>
      <varlistentry>
        <term>
          <literal>-t</literal> <emphasis>FORMAT</emphasis>,
          <literal>-w</literal> <emphasis>FORMAT</emphasis>,
          <literal>--to=</literal><emphasis>FORMAT</emphasis>,
          <literal>--write=</literal><emphasis>FORMAT</emphasis>
        </term>
        <listitem>
          <para>
            Specify output format. <emphasis>FORMAT</emphasis> can be
            <literal>native</literal> (native Haskell),
            <literal>json</literal> (JSON version of native AST),
            <literal>plain</literal> (plain text),
            <literal>markdown</literal> (pandoc’s extended markdown),
            <literal>markdown_strict</literal> (original unextended
            markdown), <literal>markdown_phpextra</literal> (PHP
            Markdown extra extended markdown),
            <literal>markdown_github</literal> (github extended
            markdown), <literal>rst</literal> (reStructuredText),
            <literal>html</literal> (XHTML 1), <literal>html5</literal>
            (HTML 5), <literal>latex</literal> (LaTeX),
            <literal>beamer</literal> (LaTeX beamer slide show),
            <literal>context</literal> (ConTeXt), <literal>man</literal>
            (groff man), <literal>mediawiki</literal> (MediaWiki
            markup), <literal>textile</literal> (Textile),
            <literal>org</literal> (Emacs Org-Mode),
            <literal>texinfo</literal> (GNU Texinfo),
            <literal>docbook</literal> (DocBook XML),
            <literal>opendocument</literal> (OpenDocument XML),
            <literal>odt</literal> (OpenOffice text document),
            <literal>docx</literal> (Word docx), <literal>epub</literal>
            (EPUB book), <literal>epub3</literal> (EPUB v3),
            <literal>fb2</literal> (FictionBook2 e-book),
            <literal>asciidoc</literal> (AsciiDoc),
            <literal>slidy</literal> (Slidy HTML and javascript slide
            show), <literal>slideous</literal> (Slideous HTML and
            javascript slide show), <literal>dzslides</literal> (HTML5 +
            javascript slide show), <literal>s5</literal> (S5 HTML and
            javascript slide show), or <literal>rtf</literal> (rich text
            format). Note that <literal>odt</literal>,
            <literal>epub</literal>, and <literal>epub3</literal> output
            will not be directed to <emphasis>stdout</emphasis>; an
            output filename must be specified using the
            <literal>-o/--output</literal> option. If
            <literal>+lhs</literal> is appended to
            <literal>markdown</literal>, <literal>rst</literal>,
            <literal>latex</literal>, <literal>beamer</literal>,
            <literal>html</literal>, or <literal>html5</literal>, the
            output will be rendered as literate Haskell source: see
            <link linkend="literate-haskell-support">Literate Haskell
            support</link>, below. Markdown syntax extensions can be
            individually enabled or disabled by appending
            <literal>+EXTENSION</literal> or
            <literal>-EXTENSION</literal> to the format name, as
            described above under <literal>-f</literal>.
          </para>
        </listitem>
      </varlistentry>
      <varlistentry>
        <term>
          <literal>-o</literal> <emphasis>FILE</emphasis>,
          <literal>--output=</literal><emphasis>FILE</emphasis>
        </term>
        <listitem>
          <para>
            Write output to <emphasis>FILE</emphasis> instead of
            <emphasis>stdout</emphasis>. If <emphasis>FILE</emphasis> is
            <literal>-</literal>, output will go to
            <emphasis>stdout</emphasis>. (Exception: if the output
            format is <literal>odt</literal>, <literal>docx</literal>,
            <literal>epub</literal>, or <literal>epub3</literal>, output
            to stdout is disabled.)
          </para>
        </listitem>
      </varlistentry>
      <varlistentry>
        <term>
          <literal>--data-dir=</literal><emphasis>DIRECTORY</emphasis>
        </term>
        <listitem>
          <para>
            Specify the user data directory to search for pandoc data
            files. If this option is not specified, the default user
            data directory will be used. This is
          </para>
          <programlisting>
$HOME/.pandoc
</programlisting>
          <para>
            in unix,
          </para>
          <programlisting>
C:\Documents And Settings\USERNAME\Application Data\pandoc
</programlisting>
          <para>
            in Windows XP, and
          </para>
          <programlisting>
C:\Users\USERNAME\AppData\Roaming\pandoc
</programlisting>
          <para>
            in Windows 7. (You can find the default user data directory
            on your system by looking at the output of
            <literal>pandoc --version</literal>.) A
            <literal>reference.odt</literal>,
            <literal>reference.docx</literal>,
            <literal>default.csl</literal>, <literal>epub.css</literal>,
            <literal>templates</literal>, <literal>slidy</literal>,
            <literal>slideous</literal>, or <literal>s5</literal>
            directory placed in this directory will override pandoc’s
            normal defaults.
          </para>
        </listitem>
      </varlistentry>
      <varlistentry>
        <term>
          <literal>-v</literal>, <literal>--version</literal>
        </term>
        <listitem>
          <para>
            Print version.
          </para>
        </listitem>
      </varlistentry>
      <varlistentry>
        <term>
          <literal>-h</literal>, <literal>--help</literal>
        </term>
        <listitem>
          <para>
            Show usage message.
          </para>
        </listitem>
      </varlistentry>
    </variablelist>
  </sect2>
  <sect2 id="reader-options">
    <title>Reader options</title>
    <variablelist>
      <varlistentry>
        <term>
          <literal>-R</literal>, <literal>--parse-raw</literal>
        </term>
        <listitem>
          <para>
            Parse untranslatable HTML codes and LaTeX environments as
            raw HTML or LaTeX, instead of ignoring them. Affects only
            HTML and LaTeX input. Raw HTML can be printed in markdown,
            reStructuredText, HTML, Slidy, Slideous, DZSlides, and S5
            output; raw LaTeX can be printed in markdown,
            reStructuredText, LaTeX, and ConTeXt output. The default is
            for the readers to omit untranslatable HTML codes and LaTeX
            environments. (The LaTeX reader does pass through
            untranslatable LaTeX <emphasis>commands</emphasis>, even if
            <literal>-R</literal> is not specified.)
          </para>
        </listitem>
      </varlistentry>
      <varlistentry>
        <term>
          <literal>-S</literal>, <literal>--smart</literal>
        </term>
        <listitem>
          <para>
            Produce typographically correct output, converting straight
            quotes to curly quotes, <literal>---</literal> to em-dashes,
            <literal>--</literal> to en-dashes, and
            <literal>...</literal> to ellipses. Nonbreaking spaces are
            inserted after certain abbreviations, such as
            <quote>Mr.</quote> (Note: This option is significant only
            when the input format is <literal>markdown</literal>,
            <literal>markdown_strict</literal>, or
            <literal>textile</literal>. It is selected automatically
            when the input format is <literal>textile</literal> or the
            output format is <literal>latex</literal> or
            <literal>context</literal>, unless
            <literal>--no-tex-ligatures</literal> is used.)
          </para>
        </listitem>
      </varlistentry>
      <varlistentry>
        <term>
          <literal>--old-dashes</literal>
        </term>
        <listitem>
          <para>
            Selects the pandoc &lt;= 1.8.2.1 behavior for parsing smart
            dashes: <literal>-</literal> before a numeral is an en-dash,
            and <literal>--</literal> is an em-dash. This option is
            selected automatically for <literal>textile</literal> input.
          </para>
        </listitem>
      </varlistentry>
      <varlistentry>
        <term>
          <literal>--base-header-level=</literal><emphasis>NUMBER</emphasis>
        </term>
        <listitem>
          <para>
            Specify the base level for headers (defaults to 1).
          </para>
        </listitem>
      </varlistentry>
      <varlistentry>
        <term>
          <literal>--indented-code-classes=</literal><emphasis>CLASSES</emphasis>
        </term>
        <listitem>
          <para>
            Specify classes to use for indented code blocks–for example,
            <literal>perl,numberLines</literal> or
            <literal>haskell</literal>. Multiple classes may be
            separated by spaces or commas.
          </para>
        </listitem>
      </varlistentry>
      <varlistentry>
        <term>
          <literal>--default-image-extension=</literal><emphasis>EXTENSION</emphasis>
        </term>
        <listitem>
          <para>
            Specify a default extension to use when image paths/URLs
            have no extension. This allows you to use the same source
            for formats that require different kinds of images.
            Currently this option only affects the markdown and LaTeX
            readers.
          </para>
        </listitem>
      </varlistentry>
      <varlistentry>
        <term>
          <literal>--normalize</literal>
        </term>
        <listitem>
          <para>
            Normalize the document after reading: merge adjacent
            <literal>Str</literal> or <literal>Emph</literal> elements,
            for example, and remove repeated <literal>Space</literal>s.
          </para>
        </listitem>
      </varlistentry>
      <varlistentry>
        <term>
          <literal>-p</literal>, <literal>--preserve-tabs</literal>
        </term>
        <listitem>
          <para>
            Preserve tabs instead of converting them to spaces (the
            default). Note that this will only affect tabs in literal
            code spans and code blocks; tabs in regular text will be
            treated as spaces.
          </para>
        </listitem>
      </varlistentry>
      <varlistentry>
        <term>
          <literal>--tab-stop=</literal><emphasis>NUMBER</emphasis>
        </term>
        <listitem>
          <para>
            Specify the number of spaces per tab (default is 4).
          </para>
        </listitem>
      </varlistentry>
    </variablelist>
  </sect2>
  <sect2 id="general-writer-options">
    <title>General writer options</title>
    <variablelist>
      <varlistentry>
        <term>
          <literal>-s</literal>, <literal>--standalone</literal>
        </term>
        <listitem>
          <para>
            Produce output with an appropriate header and footer (e.g. a
            standalone HTML, LaTeX, or RTF file, not a fragment). This
            option is set automatically for <literal>pdf</literal>,
            <literal>epub</literal>, <literal>epub3</literal>,
            <literal>fb2</literal>, <literal>docx</literal>, and
            <literal>odt</literal> output.
          </para>
        </listitem>
      </varlistentry>
      <varlistentry>
        <term>
          <literal>--template=</literal><emphasis>FILE</emphasis>
        </term>
        <listitem>
          <para>
            Use <emphasis>FILE</emphasis> as a custom template for the
            generated document. Implies <literal>--standalone</literal>.
            See <link linkend="templates">Templates</link> below for a
            description of template syntax. If no extension is
            specified, an extension corresponding to the writer will be
            added, so that <literal>--template=special</literal> looks
            for <literal>special.html</literal> for HTML output. If the
            template is not found, pandoc will search for it in the user
            data directory (see <literal>--data-dir</literal>). If this
            option is not used, a default template appropriate for the
            output format will be used (see
            <literal>-D/--print-default-template</literal>).
          </para>
        </listitem>
      </varlistentry>
      <varlistentry>
        <term>
          <literal>-V</literal> <emphasis>KEY[=VAL]</emphasis>,
          <literal>--variable=</literal><emphasis>KEY[:VAL]</emphasis>
        </term>
        <listitem>
          <para>
            Set the template variable <emphasis>KEY</emphasis> to the
            value <emphasis>VAL</emphasis> when rendering the document
            in standalone mode. This is generally only useful when the
            <literal>--template</literal> option is used to specify a
            custom template, since pandoc automatically sets the
            variables used in the default templates. If no
            <emphasis>VAL</emphasis> is specified, the key will be given
            the value <literal>true</literal>.
          </para>
        </listitem>
      </varlistentry>
      <varlistentry>
        <term>
          <literal>-D</literal> <emphasis>FORMAT</emphasis>,
          <literal>--print-default-template=</literal><emphasis>FORMAT</emphasis>
        </term>
        <listitem>
          <para>
            Print the default template for an output
            <emphasis>FORMAT</emphasis>. (See <literal>-t</literal> for
            a list of possible <emphasis>FORMAT</emphasis>s.)
          </para>
        </listitem>
      </varlistentry>
      <varlistentry>
        <term>
          <literal>--no-wrap</literal>
        </term>
        <listitem>
          <para>
            Disable text wrapping in output. By default, text is wrapped
            appropriately for the output format.
          </para>
        </listitem>
      </varlistentry>
      <varlistentry>
        <term>
          <literal>--columns</literal>=<emphasis>NUMBER</emphasis>
        </term>
        <listitem>
          <para>
            Specify length of lines in characters (for text wrapping).
          </para>
        </listitem>
      </varlistentry>
      <varlistentry>
        <term>
          <literal>--toc</literal>,
          <literal>--table-of-contents</literal>
        </term>
        <listitem>
          <para>
            Include an automatically generated table of contents (or, in
            the case of <literal>latex</literal>,
            <literal>context</literal>, and <literal>rst</literal>, an
            instruction to create one) in the output document. This
            option has no effect on <literal>man</literal>,
            <literal>docbook</literal>, <literal>slidy</literal>,
            <literal>slideous</literal>, or <literal>s5</literal>
            output.
          </para>
        </listitem>
      </varlistentry>
      <varlistentry>
        <term>
          <literal>--toc-depth=</literal><emphasis>NUMBER</emphasis>
        </term>
        <listitem>
          <para>
            Specify the number of section levels to include in the table
            of contents. The default is 3 (which means that level 1, 2,
            and 3 headers will be listed in the contents). Implies
            <literal>--toc</literal>.
          </para>
        </listitem>
      </varlistentry>
      <varlistentry>
        <term>
          <literal>--no-highlight</literal>
        </term>
        <listitem>
          <para>
            Disables syntax highlighting for code blocks and inlines,
            even when a language attribute is given.
          </para>
        </listitem>
      </varlistentry>
      <varlistentry>
        <term>
          <literal>--highlight-style</literal>=<emphasis>STYLE</emphasis>
        </term>
        <listitem>
          <para>
            Specifies the coloring style to be used in highlighted
            source code. Options are <literal>pygments</literal> (the
            default), <literal>kate</literal>,
            <literal>monochrome</literal>, <literal>espresso</literal>,
            <literal>zenburn</literal>, <literal>haddock</literal>, and
            <literal>tango</literal>.
          </para>
        </listitem>
      </varlistentry>
      <varlistentry>
        <term>
          <literal>-H</literal> <emphasis>FILE</emphasis>,
          <literal>--include-in-header=</literal><emphasis>FILE</emphasis>
        </term>
        <listitem>
          <para>
            Include contents of <emphasis>FILE</emphasis>, verbatim, at
            the end of the header. This can be used, for example, to
            include special CSS or javascript in HTML documents. This
            option can be used repeatedly to include multiple files in
            the header. They will be included in the order specified.
            Implies <literal>--standalone</literal>.
          </para>
        </listitem>
      </varlistentry>
      <varlistentry>
        <term>
          <literal>-B</literal> <emphasis>FILE</emphasis>,
          <literal>--include-before-body=</literal><emphasis>FILE</emphasis>
        </term>
        <listitem>
          <para>
            Include contents of <emphasis>FILE</emphasis>, verbatim, at
            the beginning of the document body (e.g. after the
            <literal>&lt;body&gt;</literal> tag in HTML, or the
            <literal>\begin{document}</literal> command in LaTeX). This
            can be used to include navigation bars or banners in HTML
            documents. This option can be used repeatedly to include
            multiple files. They will be included in the order
            specified. Implies <literal>--standalone</literal>.
          </para>
        </listitem>
      </varlistentry>
      <varlistentry>
        <term>
          <literal>-A</literal> <emphasis>FILE</emphasis>,
          <literal>--include-after-body=</literal><emphasis>FILE</emphasis>
        </term>
        <listitem>
          <para>
            Include contents of <emphasis>FILE</emphasis>, verbatim, at
            the end of the document body (before the
            <literal>&lt;/body&gt;</literal> tag in HTML, or the
            <literal>\end{document}</literal> command in LaTeX). This
            option can be be used repeatedly to include multiple files.
            They will be included in the order specified. Implies
            <literal>--standalone</literal>.
          </para>
        </listitem>
      </varlistentry>
    </variablelist>
  </sect2>
  <sect2 id="options-affecting-specific-writers">
    <title>Options affecting specific writers</title>
    <variablelist>
      <varlistentry>
        <term>
          <literal>--self-contained</literal>
        </term>
        <listitem>
          <para>
            Produce a standalone HTML file with no external
            dependencies, using <literal>data:</literal> URIs to
            incorporate the contents of linked scripts, stylesheets,
            images, and videos. The resulting file should be
            <quote>self-contained,</quote> in the sense that it needs no
            external files and no net access to be displayed properly by
            a browser. This option works only with HTML output formats,
            including <literal>html</literal>, <literal>html5</literal>,
            <literal>html+lhs</literal>, <literal>html5+lhs</literal>,
            <literal>s5</literal>, <literal>slidy</literal>,
            <literal>slideous</literal>, and
            <literal>dzslides</literal>. Scripts, images, and
            stylesheets at absolute URLs will be downloaded; those at
            relative URLs will be sought first relative to the working
            directory, then relative to the user data directory (see
            <literal>--data-dir</literal>), and finally relative to
            pandoc’s default data directory.
          </para>
        </listitem>
      </varlistentry>
      <varlistentry>
        <term>
          <literal>--offline</literal>
        </term>
        <listitem>
          <para>
            Deprecated synonym for <literal>--self-contained</literal>.
          </para>
        </listitem>
      </varlistentry>
      <varlistentry>
        <term>
          <literal>-5</literal>, <literal>--html5</literal>
        </term>
        <listitem>
          <para>
            Produce HTML5 instead of HTML4. This option has no effect
            for writers other than <literal>html</literal>.
            (<emphasis>Deprecated:</emphasis> Use the
            <literal>html5</literal> output format instead.)
          </para>
        </listitem>
      </varlistentry>
      <varlistentry>
        <term>
          <literal>--html-q-tags</literal>
        </term>
        <listitem>
          <para>
            Use <literal>&lt;q&gt;</literal> tags for quotes in HTML.
          </para>
        </listitem>
      </varlistentry>
      <varlistentry>
        <term>
          <literal>--ascii</literal>
        </term>
        <listitem>
          <para>
            Use only ascii characters in output. Currently supported
            only for HTML output (which uses numerical entities instead
            of UTF-8 when this option is selected).
          </para>
        </listitem>
      </varlistentry>
      <varlistentry>
        <term>
          <literal>--reference-links</literal>
        </term>
        <listitem>
          <para>
            Use reference-style links, rather than inline links, in
            writing markdown or reStructuredText. By default inline
            links are used.
          </para>
        </listitem>
      </varlistentry>
      <varlistentry>
        <term>
          <literal>--atx-headers</literal>
        </term>
        <listitem>
          <para>
            Use ATX style headers in markdown output. The default is to
            use setext-style headers for levels 1-2, and then ATX
            headers.
          </para>
        </listitem>
      </varlistentry>
      <varlistentry>
        <term>
          <literal>--chapters</literal>
        </term>
        <listitem>
          <para>
            Treat top-level headers as chapters in LaTeX, ConTeXt, and
            DocBook output. When the LaTeX template uses the report,
            book, or memoir class, this option is implied. If
            <literal>--beamer</literal> is used, top-level headers will
            become <literal>\part{..}</literal>.
          </para>
        </listitem>
      </varlistentry>
      <varlistentry>
        <term>
          <literal>-N</literal>, <literal>--number-sections</literal>
        </term>
        <listitem>
          <para>
            Number section headings in LaTeX, ConTeXt, HTML, or EPUB
            output. By default, sections are not numbered. Sections with
            class <literal>unnumbered</literal> will never be numbered,
            even if <literal>--number-sections</literal> is specified.
          </para>
        </listitem>
      </varlistentry>
      <varlistentry>
        <term>
          <literal>--number-offset</literal>=<emphasis>NUMBER[,NUMBER,…]</emphasis>,
        </term>
        <listitem>
          <para>
            Offset for section headings in HTML output (ignored in other
            output formats). The first number is added to the section
            number for top-level headers, the second for second-level
            headers, and so on. So, for example, if you want the first
            top-level header in your document to be numbered
            <quote>6</quote>, specify
            <literal>--number-offset=5</literal>. If your document
            starts with a level-2 header which you want to be numbered
            <quote>1.5</quote>, specify
            <literal>--number-offset=1,4</literal>. Offsets are 0 by
            default. Implies <literal>--number-sections</literal>.
          </para>
        </listitem>
      </varlistentry>
      <varlistentry>
        <term>
          <literal>--no-tex-ligatures</literal>
        </term>
        <listitem>
          <para>
            Do not convert quotation marks, apostrophes, and dashes to
            the TeX ligatures when writing LaTeX or ConTeXt. Instead,
            just use literal unicode characters. This is needed for
            using advanced OpenType features with XeLaTeX and LuaLaTeX.
            Note: normally <literal>--smart</literal> is selected
            automatically for LaTeX and ConTeXt output, but it must be
            specified explicitly if
            <literal>--no-tex-ligatures</literal> is selected. If you
            use literal curly quotes, dashes, and ellipses in your
            source, then you may want to use
            <literal>--no-tex-ligatures</literal> without
            <literal>--smart</literal>.
          </para>
        </listitem>
      </varlistentry>
      <varlistentry>
        <term>
          <literal>--listings</literal>
        </term>
        <listitem>
          <para>
            Use listings package for LaTeX code blocks
          </para>
        </listitem>
      </varlistentry>
      <varlistentry>
        <term>
          <literal>-i</literal>, <literal>--incremental</literal>
        </term>
        <listitem>
          <para>
            Make list items in slide shows display incrementally (one by
            one). The default is for lists to be displayed all at once.
          </para>
        </listitem>
      </varlistentry>
      <varlistentry>
        <term>
          <literal>--slide-level</literal>=<emphasis>NUMBER</emphasis>
        </term>
        <listitem>
          <para>
            Specifies that headers with the specified level create
            slides (for <literal>beamer</literal>,
            <literal>s5</literal>, <literal>slidy</literal>,
            <literal>slideous</literal>, <literal>dzslides</literal>).
            Headers above this level in the hierarchy are used to divide
            the slide show into sections; headers below this level
            create subheads within a slide. The default is to set the
            slide level based on the contents of the document; see
            <link linkend="structuring-the-slide-show">Structuring the
            slide show</link>, below.
          </para>
        </listitem>
      </varlistentry>
      <varlistentry>
        <term>
          <literal>--section-divs</literal>
        </term>
        <listitem>
          <para>
            Wrap sections in <literal>&lt;div&gt;</literal> tags (or
            <literal>&lt;section&gt;</literal> tags in HTML5), and
            attach identifiers to the enclosing
            <literal>&lt;div&gt;</literal> (or
            <literal>&lt;section&gt;</literal>) rather than the header
            itself. See
            <link linkend="header-identifiers-in-html-latex-and-context">Section
            identifiers</link>, below.
          </para>
        </listitem>
      </varlistentry>
      <varlistentry>
        <term>
          <literal>--email-obfuscation=</literal><emphasis>none|javascript|references</emphasis>
        </term>
        <listitem>
          <para>
            Specify a method for obfuscating <literal>mailto:</literal>
            links in HTML documents. <emphasis>none</emphasis> leaves
            <literal>mailto:</literal> links as they are.
            <emphasis>javascript</emphasis> obfuscates them using
            javascript. <emphasis>references</emphasis> obfuscates them
            by printing their letters as decimal or hexadecimal
            character references.
          </para>
        </listitem>
      </varlistentry>
      <varlistentry>
        <term>
          <literal>--id-prefix</literal>=<emphasis>STRING</emphasis>
        </term>
        <listitem>
          <para>
            Specify a prefix to be added to all automatically generated
            identifiers in HTML and DocBook output, and to footnote
            numbers in markdown output. This is useful for preventing
            duplicate identifiers when generating fragments to be
            included in other pages.
          </para>
        </listitem>
      </varlistentry>
      <varlistentry>
        <term>
          <literal>-T</literal> <emphasis>STRING</emphasis>,
          <literal>--title-prefix=</literal><emphasis>STRING</emphasis>
        </term>
        <listitem>
          <para>
            Specify <emphasis>STRING</emphasis> as a prefix at the
            beginning of the title that appears in the HTML header (but
            not in the title as it appears at the beginning of the HTML
            body). Implies <literal>--standalone</literal>.
          </para>
        </listitem>
      </varlistentry>
      <varlistentry>
        <term>
          <literal>-c</literal> <emphasis>URL</emphasis>,
          <literal>--css=</literal><emphasis>URL</emphasis>
        </term>
        <listitem>
          <para>
            Link to a CSS style sheet. This option can be be used
            repeatedly to include multiple files. They will be included
            in the order specified.
          </para>
        </listitem>
      </varlistentry>
      <varlistentry>
        <term>
          <literal>--reference-odt=</literal><emphasis>FILE</emphasis>
        </term>
        <listitem>
          <para>
            Use the specified file as a style reference in producing an
            ODT. For best results, the reference ODT should be a
            modified version of an ODT produced using pandoc. The
            contents of the reference ODT are ignored, but its
            stylesheets are used in the new ODT. If no reference ODT is
            specified on the command line, pandoc will look for a file
            <literal>reference.odt</literal> in the user data directory
            (see <literal>--data-dir</literal>). If this is not found
            either, sensible defaults will be used.
          </para>
        </listitem>
      </varlistentry>
      <varlistentry>
        <term>
          <literal>--reference-docx=</literal><emphasis>FILE</emphasis>
        </term>
        <listitem>
          <para>
            Use the specified file as a style reference in producing a
            docx file. For best results, the reference docx should be a
            modified version of a docx file produced using pandoc. The
            contents of the reference docx are ignored, but its
            stylesheets are used in the new docx. If no reference docx
            is specified on the command line, pandoc will look for a
            file <literal>reference.docx</literal> in the user data
            directory (see <literal>--data-dir</literal>). If this is
            not found either, sensible defaults will be used. The
            following styles are used by pandoc: [paragraph] Normal,
            Title, Authors, Date, Heading 1, Heading 2, Heading 3,
            Heading 4, Heading 5, Block Quote, Definition Term,
            Definition, Body Text, Table Caption, Image Caption;
            [character] Default Paragraph Font, Body Text Char, Verbatim
            Char, Footnote Ref, Link.
          </para>
        </listitem>
      </varlistentry>
      <varlistentry>
        <term>
          <literal>--epub-stylesheet=</literal><emphasis>FILE</emphasis>
        </term>
        <listitem>
          <para>
            Use the specified CSS file to style the EPUB. If no
            stylesheet is specified, pandoc will look for a file
            <literal>epub.css</literal> in the user data directory (see
            <literal>--data-dir</literal>). If it is not found there,
            sensible defaults will be used.
          </para>
        </listitem>
      </varlistentry>
      <varlistentry>
        <term>
          <literal>--epub-cover-image=</literal><emphasis>FILE</emphasis>
        </term>
        <listitem>
          <para>
            Use the specified image as the EPUB cover. It is recommended
            that the image be less than 1000px in width and height.
          </para>
        </listitem>
      </varlistentry>
      <varlistentry>
        <term>
          <literal>--epub-metadata=</literal><emphasis>FILE</emphasis>
        </term>
        <listitem>
          <para>
            Look in the specified XML file for metadata for the EPUB.
            The file should contain a series of Dublin Core elements, as
            documented at
            <ulink url="http://dublincore.org/documents/dces/">http://dublincore.org/documents/dces/</ulink>.
            For example:
          </para>
          <programlisting>
 &lt;dc:rights&gt;Creative Commons&lt;/dc:rights&gt;
 &lt;dc:language&gt;es-AR&lt;/dc:language&gt;
</programlisting>
          <para>
            By default, pandoc will include the following metadata
            elements: <literal>&lt;dc:title&gt;</literal> (from the
            document title), <literal>&lt;dc:creator&gt;</literal> (from
            the document authors), <literal>&lt;dc:date&gt;</literal>
            (from the document date, which should be in
            <ulink url="http://www.w3.org/TR/NOTE-datetime">ISO 8601
            format</ulink>), <literal>&lt;dc:language&gt;</literal>
            (from the <literal>lang</literal> variable, or, if is not
            set, the locale), and
            <literal>&lt;dc:identifier id=&quot;BookId&quot;&gt;</literal>
            (a randomly generated UUID). Any of these may be overridden
            by elements in the metadata file.
          </para>
        </listitem>
      </varlistentry>
      <varlistentry>
        <term>
          <literal>--epub-embed-font=</literal><emphasis>FILE</emphasis>
        </term>
        <listitem>
          <para>
            Embed the specified font in the EPUB. This option can be
            repeated to embed multiple fonts. To use embedded fonts, you
            will need to add declarations like the following to your CSS
            (see <literal>--epub-stylesheet</literal>):
          </para>
          <programlisting>
@font-face {
font-family: DejaVuSans;
font-style: normal;
font-weight: normal;
src:url(&quot;DejaVuSans-Regular.ttf&quot;);
}
@font-face {
font-family: DejaVuSans;
font-style: normal;
font-weight: bold;
src:url(&quot;DejaVuSans-Bold.ttf&quot;);
}
@font-face {
font-family: DejaVuSans;
font-style: italic;
font-weight: normal;
src:url(&quot;DejaVuSans-Oblique.ttf&quot;);
}
@font-face {
font-family: DejaVuSans;
font-style: italic;
font-weight: bold;
src:url(&quot;DejaVuSans-BoldOblique.ttf&quot;);
}
body { font-family: &quot;DejaVuSans&quot;; }
</programlisting>
        </listitem>
      </varlistentry>
      <varlistentry>
        <term>
          <literal>--epub-chapter-level=</literal><emphasis>NUMBER</emphasis>
        </term>
        <listitem>
          <para>
            Specify the header level at which to split the EPUB into
            separate <quote>chapter</quote> files. The default is to
            split into chapters at level 1 headers. This option only
            affects the internal composition of the EPUB, not the way
            chapters and sections are displayed to users. Some readers
            may be slow if the chapter files are too large, so for large
            documents with few level 1 headers, one might want to use a
            chapter level of 2 or 3.
          </para>
        </listitem>
      </varlistentry>
      <varlistentry>
        <term>
          <literal>--latex-engine=</literal><emphasis>pdflatex|lualatex|xelatex</emphasis>
        </term>
        <listitem>
          <para>
            Use the specified LaTeX engine when producing PDF output.
            The default is <literal>pdflatex</literal>. If the engine is
            not in your PATH, the full path of the engine may be
            specified here.
          </para>
        </listitem>
      </varlistentry>
    </variablelist>
  </sect2>
  <sect2 id="citation-rendering">
    <title>Citation rendering</title>
    <variablelist>
      <varlistentry>
        <term>
          <literal>--bibliography=</literal><emphasis>FILE</emphasis>
        </term>
        <listitem>
          <para>
            Specify bibliography database to be used in resolving
            citations. The database type will be determined from the
            extension of <emphasis>FILE</emphasis>, which may be
            <literal>.mods</literal> (MODS format),
            <literal>.bib</literal> (BibLaTeX format, which will
            normally work for BibTeX files as well),
            <literal>.bibtex</literal> (BibTeX format),
            <literal>.ris</literal> (RIS format),
            <literal>.enl</literal> (EndNote format),
            <literal>.xml</literal> (EndNote XML format),
            <literal>.wos</literal> (ISI format),
            <literal>.medline</literal> (MEDLINE format),
            <literal>.copac</literal> (Copac format), or
            <literal>.json</literal> (citeproc JSON). If you want to use
            multiple bibliographies, just use this option repeatedly.
          </para>
        </listitem>
      </varlistentry>
      <varlistentry>
        <term>
          <literal>--csl=</literal><emphasis>FILE</emphasis>
        </term>
        <listitem>
          <para>
            Specify <ulink url="http://CitationStyles.org">CSL</ulink>
            style to be used in formatting citations and the
            bibliography. If <emphasis>FILE</emphasis> is not found,
            pandoc will look for it in
          </para>
          <programlisting>
$HOME/.csl
</programlisting>
          <para>
            in unix,
          </para>
          <programlisting>
C:\Documents And Settings\USERNAME\Application Data\csl
</programlisting>
          <para>
            in Windows XP, and
          </para>
          <programlisting>
C:\Users\USERNAME\AppData\Roaming\csl
</programlisting>
          <para>
            in Windows 7. If the <literal>--csl</literal> option is not
            specified, pandoc will use a default style: either
            <literal>default.csl</literal> in the user data directory
            (see <literal>--data-dir</literal>), or, if that is not
            present, the Chicago author-date style.
          </para>
        </listitem>
      </varlistentry>
      <varlistentry>
        <term>
          <literal>--citation-abbreviations=</literal><emphasis>FILE</emphasis>
        </term>
        <listitem>
          <para>
            Specify a file containing abbreviations for journal titles
            and other bibliographic fields (indicated by setting
            <literal>form=&quot;short&quot;</literal> in the CSL node
            for the field). The format is described at
            <ulink url="http://citationstylist.org/2011/10/19/abbreviations-for-zotero-test-release/">http://citationstylist.org/2011/10/19/abbreviations-for-zotero-test-release/</ulink>.
            Here is a short example:
          </para>
          <programlisting>
{ &quot;default&quot;: {
    &quot;container-title&quot;: {
            &quot;Lloyd's Law Reports&quot;: &quot;Lloyd's Rep&quot;,
            &quot;Estates Gazette&quot;: &quot;EG&quot;,
            &quot;Scots Law Times&quot;: &quot;SLT&quot;
    }
  }
}
</programlisting>
        </listitem>
      </varlistentry>
      <varlistentry>
        <term>
          <literal>--natbib</literal>
        </term>
        <listitem>
          <para>
            Use natbib for citations in LaTeX output.
          </para>
        </listitem>
      </varlistentry>
      <varlistentry>
        <term>
          <literal>--biblatex</literal>
        </term>
        <listitem>
          <para>
            Use biblatex for citations in LaTeX output.
          </para>
        </listitem>
      </varlistentry>
    </variablelist>
  </sect2>
  <sect2 id="math-rendering-in-html">
    <title>Math rendering in HTML</title>
    <variablelist>
      <varlistentry>
        <term>
          <literal>-m</literal> [<emphasis>URL</emphasis>],
          <literal>--latexmathml</literal>[=<emphasis>URL</emphasis>]
        </term>
        <listitem>
          <para>
            Use the
            <ulink url="http://math.etsu.edu/LaTeXMathML/">LaTeXMathML</ulink>
            script to display embedded TeX math in HTML output. To
            insert a link to a local copy of the
            <literal>LaTeXMathML.js</literal> script, provide a
            <emphasis>URL</emphasis>. If no <emphasis>URL</emphasis> is
            provided, the contents of the script will be inserted
            directly into the HTML header, preserving portability at the
            price of efficiency. If you plan to use math on several
            pages, it is much better to link to a copy of the script, so
            it can be cached.
          </para>
        </listitem>
      </varlistentry>
      <varlistentry>
        <term>
          <literal>--mathml</literal>[=<emphasis>URL</emphasis>]
        </term>
        <listitem>
          <para>
            Convert TeX math to MathML (in <literal>docbook</literal> as
            well as <literal>html</literal> and
            <literal>html5</literal>). In standalone
            <literal>html</literal> output, a small javascript (or a
            link to such a script if a <emphasis>URL</emphasis> is
            supplied) will be inserted that allows the MathML to be
            viewed on some browsers.
          </para>
        </listitem>
      </varlistentry>
      <varlistentry>
        <term>
          <literal>--jsmath</literal>[=<emphasis>URL</emphasis>]
        </term>
        <listitem>
          <para>
            Use
            <ulink url="http://www.math.union.edu/~dpvc/jsmath/">jsMath</ulink>
            to display embedded TeX math in HTML output. The
            <emphasis>URL</emphasis> should point to the jsMath load
            script (e.g. <literal>jsMath/easy/load.js</literal>); if
            provided, it will be linked to in the header of standalone
            HTML documents. If a <emphasis>URL</emphasis> is not
            provided, no link to the jsMath load script will be
            inserted; it is then up to the author to provide such a link
            in the HTML template.
          </para>
        </listitem>
      </varlistentry>
      <varlistentry>
        <term>
          <literal>--mathjax</literal>[=<emphasis>URL</emphasis>]
        </term>
        <listitem>
          <para>
            Use <ulink url="http://www.mathjax.org/">MathJax</ulink> to
            display embedded TeX math in HTML output. The
            <emphasis>URL</emphasis> should point to the
            <literal>MathJax.js</literal> load script. If a
            <emphasis>URL</emphasis> is not provided, a link to the
            MathJax CDN will be inserted.
          </para>
        </listitem>
      </varlistentry>
      <varlistentry>
        <term>
          <literal>--gladtex</literal>
        </term>
        <listitem>
          <para>
            Enclose TeX math in <literal>&lt;eq&gt;</literal> tags in
            HTML output. These can then be processed by
            <ulink url="http://ans.hsh.no/home/mgg/gladtex/">gladTeX</ulink>
            to produce links to images of the typeset formulas.
          </para>
        </listitem>
      </varlistentry>
      <varlistentry>
        <term>
          <literal>--mimetex</literal>[=<emphasis>URL</emphasis>]
        </term>
        <listitem>
          <para>
            Render TeX math using the
            <ulink url="http://www.forkosh.com/mimetex.html">mimeTeX</ulink>
            CGI script. If <emphasis>URL</emphasis> is not specified, it
            is assumed that the script is at
            <literal>/cgi-bin/mimetex.cgi</literal>.
          </para>
        </listitem>
      </varlistentry>
      <varlistentry>
        <term>
          <literal>--webtex</literal>[=<emphasis>URL</emphasis>]
        </term>
        <listitem>
          <para>
            Render TeX formulas using an external script that converts
            TeX formulas to images. The formula will be concatenated
            with the URL provided. If <emphasis>URL</emphasis> is not
            specified, the Google Chart API will be used.
          </para>
        </listitem>
      </varlistentry>
    </variablelist>
  </sect2>
  <sect2 id="options-for-wrapper-scripts">
    <title>Options for wrapper scripts</title>
    <variablelist>
      <varlistentry>
        <term>
          <literal>--dump-args</literal>
        </term>
        <listitem>
          <para>
            Print information about command-line arguments to
            <emphasis>stdout</emphasis>, then exit. This option is
            intended primarily for use in wrapper scripts. The first
            line of output contains the name of the output file
            specified with the <literal>-o</literal> option, or
            <literal>-</literal> (for <emphasis>stdout</emphasis>) if no
            output file was specified. The remaining lines contain the
            command-line arguments, one per line, in the order they
            appear. These do not include regular Pandoc options and
            their arguments, but do include any options appearing after
            a <literal>--</literal> separator at the end of the line.
          </para>
        </listitem>
      </varlistentry>
      <varlistentry>
        <term>
          <literal>--ignore-args</literal>
        </term>
        <listitem>
          <para>
            Ignore command-line arguments (for use in wrapper scripts).
            Regular Pandoc options are not ignored. Thus, for example,
          </para>
          <programlisting>
pandoc --ignore-args -o foo.html -s foo.txt -- -e latin1
</programlisting>
          <para>
            is equivalent to
          </para>
          <programlisting>
pandoc -o foo.html -s
</programlisting>
        </listitem>
      </varlistentry>
    </variablelist>
  </sect2>
</sect1>
<sect1 id="templates">
  <title>Templates</title>
  <para>
    When the <literal>-s/--standalone</literal> option is used, pandoc
    uses a template to add header and footer material that is needed for
    a self-standing document. To see the default template that is used,
    just type
  </para>
  <programlisting>
pandoc -D FORMAT
</programlisting>
  <para>
    where <literal>FORMAT</literal> is the name of the output format. A
    custom template can be specified using the
    <literal>--template</literal> option. You can also override the
    system default templates for a given output format
    <literal>FORMAT</literal> by putting a file
    <literal>templates/default.FORMAT</literal> in the user data
    directory (see <literal>--data-dir</literal>, above).
    <emphasis>Exceptions:</emphasis> For <literal>odt</literal> output,
    customize the <literal>default.opendocument</literal> template. For
    <literal>pdf</literal> output, customize the
    <literal>default.latex</literal> template.
  </para>
  <para>
    Templates may contain <emphasis>variables</emphasis>. Variable names
    are sequences of alphanumerics, <literal>-</literal>, and
    <literal>_</literal>, starting with a letter. A variable name
    surrounded by <literal>$</literal> signs will be replaced by its
    value. For example, the string <literal>$title$</literal> in
  </para>
  <programlisting>
&lt;title&gt;$title$&lt;/title&gt;
</programlisting>
  <para>
    will be replaced by the document title.
  </para>
  <para>
    To write a literal <literal>$</literal> in a template, use
    <literal>$$</literal>.
  </para>
  <para>
    Some variables are set automatically by pandoc. These vary somewhat
    depending on the output format, but include:
  </para>
  <variablelist>
    <varlistentry>
      <term>
        <literal>header-includes</literal>
      </term>
      <listitem>
        <para>
          contents specified by
          <literal>-H/--include-in-header</literal> (may have multiple
          values)
        </para>
      </listitem>
    </varlistentry>
    <varlistentry>
      <term>
        <literal>toc</literal>
      </term>
      <listitem>
        <para>
          non-null value if <literal>--toc/--table-of-contents</literal>
          was specified
        </para>
      </listitem>
    </varlistentry>
    <varlistentry>
      <term>
        <literal>include-before</literal>
      </term>
      <listitem>
        <para>
          contents specified by
          <literal>-B/--include-before-body</literal> (may have multiple
          values)
        </para>
      </listitem>
    </varlistentry>
    <varlistentry>
      <term>
        <literal>include-after</literal>
      </term>
      <listitem>
        <para>
          contents specified by
          <literal>-A/--include-after-body</literal> (may have multiple
          values)
        </para>
      </listitem>
    </varlistentry>
    <varlistentry>
      <term>
        <literal>body</literal>
      </term>
      <listitem>
        <para>
          body of document
        </para>
      </listitem>
    </varlistentry>
    <varlistentry>
      <term>
        <literal>title</literal>
      </term>
      <listitem>
        <para>
          title of document, as specified in title block
        </para>
      </listitem>
    </varlistentry>
    <varlistentry>
      <term>
        <literal>author</literal>
      </term>
      <listitem>
        <para>
          author of document, as specified in title block (may have
          multiple values)
        </para>
      </listitem>
    </varlistentry>
    <varlistentry>
      <term>
        <literal>date</literal>
      </term>
      <listitem>
        <para>
          date of document, as specified in title block
        </para>
      </listitem>
    </varlistentry>
    <varlistentry>
      <term>
        <literal>lang</literal>
      </term>
      <listitem>
        <para>
          language code for HTML or LaTeX documents
        </para>
      </listitem>
    </varlistentry>
    <varlistentry>
      <term>
        <literal>slidy-url</literal>
      </term>
      <listitem>
        <para>
          base URL for Slidy documents (defaults to
          <literal>http://www.w3.org/Talks/Tools/Slidy2</literal>)
        </para>
      </listitem>
    </varlistentry>
    <varlistentry>
      <term>
        <literal>slideous-url</literal>
      </term>
      <listitem>
        <para>
          base URL for Slideous documents (defaults to
          <literal>default</literal>)
        </para>
      </listitem>
    </varlistentry>
    <varlistentry>
      <term>
        <literal>s5-url</literal>
      </term>
      <listitem>
        <para>
          base URL for S5 documents (defaults to
          <literal>ui/default</literal>)
        </para>
      </listitem>
    </varlistentry>
    <varlistentry>
      <term>
        <literal>fontsize</literal>
      </term>
      <listitem>
        <para>
          font size (10pt, 11pt, 12pt) for LaTeX documents
        </para>
      </listitem>
    </varlistentry>
    <varlistentry>
      <term>
        <literal>documentclass</literal>
      </term>
      <listitem>
        <para>
          document class for LaTeX documents
        </para>
      </listitem>
    </varlistentry>
    <varlistentry>
      <term>
        <literal>geometry</literal>
      </term>
      <listitem>
        <para>
          options for LaTeX <literal>geometry</literal> class, e.g.
          <literal>margin=1in</literal>; may be repeated for multiple
          options
        </para>
      </listitem>
    </varlistentry>
    <varlistentry>
      <term>
        <literal>mainfont</literal>, <literal>sansfont</literal>,
        <literal>monofont</literal>, <literal>mathfont</literal>
      </term>
      <listitem>
        <para>
          fonts for LaTeX documents (works only with xelatex and
          lualatex)
        </para>
      </listitem>
    </varlistentry>
    <varlistentry>
      <term>
        <literal>theme</literal>
      </term>
      <listitem>
        <para>
          theme for LaTeX beamer documents
        </para>
      </listitem>
    </varlistentry>
    <varlistentry>
      <term>
        <literal>colortheme</literal>
      </term>
      <listitem>
        <para>
          colortheme for LaTeX beamer documents
        </para>
      </listitem>
    </varlistentry>
    <varlistentry>
      <term>
        <literal>linkcolor</literal>
      </term>
      <listitem>
        <para>
          color for internal links in LaTeX documents
          (<literal>red</literal>, <literal>green</literal>,
          <literal>magenta</literal>, <literal>cyan</literal>,
          <literal>blue</literal>, <literal>black</literal>)
        </para>
      </listitem>
    </varlistentry>
    <varlistentry>
      <term>
        <literal>urlcolor</literal>
      </term>
      <listitem>
        <para>
          color for external links in LaTeX documents
        </para>
      </listitem>
    </varlistentry>
    <varlistentry>
      <term>
        <literal>links-as-notes</literal>
      </term>
      <listitem>
        <para>
          causes links to be printed as footnotes in LaTeX documents
        </para>
      </listitem>
    </varlistentry>
  </variablelist>
  <para>
    Variables may be set at the command line using the
    <literal>-V/--variable</literal> option. This allows users to
    include custom variables in their templates.
  </para>
  <para>
    Templates may contain conditionals. The syntax is as follows:
  </para>
  <programlisting>
$if(variable)$
X
$else$
Y
$endif$
</programlisting>
  <para>
    This will include <literal>X</literal> in the template if
    <literal>variable</literal> has a non-null value; otherwise it will
    include <literal>Y</literal>. <literal>X</literal> and
    <literal>Y</literal> are placeholders for any valid template text,
    and may include interpolated variables or other conditionals. The
    <literal>$else$</literal> section may be omitted.
  </para>
  <para>
    When variables can have multiple values (for example,
    <literal>author</literal> in a multi-author document), you can use
    the <literal>$for$</literal> keyword:
  </para>
  <programlisting>
$for(author)$
&lt;meta name=&quot;author&quot; content=&quot;$author$&quot; /&gt;
$endfor$
</programlisting>
  <para>
    You can optionally specify a separator to be used between
    consecutive items:
  </para>
  <programlisting>
$for(author)$$author$$sep$, $endfor$
</programlisting>
  <para>
    If you use custom templates, you may need to revise them as pandoc
    changes. We recommend tracking the changes in the default templates,
    and modifying your custom templates accordingly. An easy way to do
    this is to fork the pandoc-templates repository
    (<ulink url="http://github.com/jgm/pandoc-templates">http://github.com/jgm/pandoc-templates</ulink>)
    and merge in changes after each pandoc release.
  </para>
</sect1>
<sect1 id="pandocs-markdown">
  <title>Pandoc’s markdown</title>
  <para>
    Pandoc understands an extended and slightly revised version of John
    Gruber’s
    <ulink url="http://daringfireball.net/projects/markdown/">markdown</ulink>
    syntax. This document explains the syntax, noting differences from
    standard markdown. Except where noted, these differences can be
    suppressed by using the <literal>markdown_strict</literal> format
    instead of <literal>markdown</literal>. An extensions can be enabled
    by adding <literal>+EXTENSION</literal> to the format name and
    disabled by adding <literal>-EXTENSION</literal>. For example,
    <literal>markdown_strict+footnotes</literal> is strict markdown with
    footnotes enabled, while
    <literal>markdown-footnotes-pipe_tables</literal> is pandoc’s
    markdown without footnotes or pipe tables.
  </para>
  <sect2 id="philosophy">
    <title>Philosophy</title>
    <para>
      Markdown is designed to be easy to write, and, even more
      importantly, easy to read:
    </para>
    <blockquote>
      <para>
        A Markdown-formatted document should be publishable as-is, as
        plain text, without looking like it’s been marked up with tags
        or formatting instructions. –
        <ulink url="http://daringfireball.net/projects/markdown/syntax#philosophy">John
        Gruber</ulink>
      </para>
    </blockquote>
    <para>
      This principle has guided pandoc’s decisions in finding syntax for
      tables, footnotes, and other extensions.
    </para>
    <para>
      There is, however, one respect in which pandoc’s aims are
      different from the original aims of markdown. Whereas markdown was
      originally designed with HTML generation in mind, pandoc is
      designed for multiple output formats. Thus, while pandoc allows
      the embedding of raw HTML, it discourages it, and provides other,
      non-HTMLish ways of representing important document elements like
      definition lists, tables, mathematics, and footnotes.
    </para>
  </sect2>
  <sect2 id="paragraphs">
    <title>Paragraphs</title>
    <para>
      A paragraph is one or more lines of text followed by one or more
      blank line. Newlines are treated as spaces, so you can reflow your
      paragraphs as you like. If you need a hard line break, put two or
      more spaces at the end of a line.
    </para>
    <para>
      <emphasis role="strong">Extension:
      <literal>escaped_line_breaks</literal></emphasis>
    </para>
    <para>
      A backslash followed by a newline is also a hard line break.
    </para>
  </sect2>
  <sect2 id="headers">
    <title>Headers</title>
    <para>
      There are two kinds of headers, Setext and atx.
    </para>
    <sect3 id="setext-style-headers">
      <title>Setext-style headers</title>
      <para>
        A setext-style header is a line of text
        <quote>underlined</quote> with a row of <literal>=</literal>
        signs (for a level one header) of <literal>-</literal> signs
        (for a level two header):
      </para>
      <programlisting>
A level-one header
==================

A level-two header
------------------
</programlisting>
      <para>
        The header text can contain inline formatting, such as emphasis
        (see <link linkend="inline-formatting">Inline formatting</link>,
        below).
      </para>
    </sect3>
    <sect3 id="atx-style-headers">
      <title>Atx-style headers</title>
      <para>
        An Atx-style header consists of one to six <literal>#</literal>
        signs and a line of text, optionally followed by any number of
        <literal>#</literal> signs. The number of <literal>#</literal>
        signs at the beginning of the line is the header level:
      </para>
      <programlisting>
## A level-two header

### A level-three header ###
</programlisting>
      <para>
        As with setext-style headers, the header text can contain
        formatting:
      </para>
      <programlisting>
# A level-one header with a [link](/url) and *emphasis*
</programlisting>
      <para>
        <emphasis role="strong">Extension:
        <literal>blank_before_header</literal></emphasis>
      </para>
      <para>
        Standard markdown syntax does not require a blank line before a
        header. Pandoc does require this (except, of course, at the
        beginning of the document). The reason for the requirement is
        that it is all too easy for a <literal>#</literal> to end up at
        the beginning of a line by accident (perhaps through line
        wrapping). Consider, for example:
      </para>
      <programlisting>
I like several of their flavors of ice cream:
#22, for example, and #5.
</programlisting>
    </sect3>
    <sect3 id="header-identifiers-in-html-latex-and-context">
      <title>Header identifiers in HTML, LaTeX, and ConTeXt</title>
      <para>
        <emphasis role="strong">Extension:
        <literal>header_attributes</literal></emphasis>
      </para>
      <para>
        Headers can be assigned attributes using this syntax at the end
        of the line containing the header text:
      </para>
      <programlisting>
{#identifier .class .class key=value key=value}
</programlisting>
      <para>
        Although this syntax allows assignment of classes and key/value
        attributes, only identifiers currently have any affect in the
        writers (and only in some writers: HTML, LaTeX, ConTeXt,
        Textile, AsciiDoc). Thus, for example, the following headers
        will all be assigned the identifier <literal>foo</literal>:
      </para>
      <programlisting>
# My header {#foo}

## My header ##    {#foo}

My other header   {#foo}
---------------
</programlisting>
      <para>
        (This syntax is compatible with
        <ulink url="http://www.michelf.com/projects/php-markdown/extra/">PHP
        Markdown Extra</ulink>.)
      </para>
      <para>
        Headers with the class <literal>unnumbered</literal> will not be
        numbered, even if <literal>--number-sections</literal> is
        specified. A single hyphen (<literal>-</literal>) in an
        attribute context is equivalent to
        <literal>.unnumbered</literal>, and preferable in non-English
        documents. So,
      </para>
      <programlisting>
# My header {-}
</programlisting>
      <para>
        is just the same as
      </para>
      <programlisting>
# My header {.unnumbered}
</programlisting>
      <para>
        <emphasis role="strong">Extension:
        <literal>auto_identifiers</literal></emphasis>
      </para>
      <para>
        A header without an explicitly specified identifier will be
        automatically assigned a unique identifier based on the header
        text. To derive the identifier from the header text,
      </para>
      <itemizedlist>
        <listitem>
          <para>
            Remove all formatting, links, etc.
          </para>
        </listitem>
        <listitem>
          <para>
            Remove all punctuation, except underscores, hyphens, and
            periods.
          </para>
        </listitem>
        <listitem>
          <para>
            Replace all spaces and newlines with hyphens.
          </para>
        </listitem>
        <listitem>
          <para>
            Convert all alphabetic characters to lowercase.
          </para>
        </listitem>
        <listitem>
          <para>
            Remove everything up to the first letter (identifiers may
            not begin with a number or punctuation mark).
          </para>
        </listitem>
        <listitem>
          <para>
            If nothing is left after this, use the identifier
            <literal>section</literal>.
          </para>
        </listitem>
      </itemizedlist>
      <para>
        Thus, for example,
      </para>
      <informaltable>
        <tgroup cols="2">
          <colspec align="left" />
          <colspec align="left" />
          <thead>
            <row>
              <entry>
                Header
              </entry>
              <entry>
                Identifier
              </entry>
            </row>
          </thead>
          <tbody>
            <row>
              <entry>
                Header identifiers in HTML
              </entry>
              <entry>
                <literal>header-identifiers-in-html</literal>
              </entry>
            </row>
            <row>
              <entry>
                <emphasis>Dogs</emphasis>?–in <emphasis>my</emphasis>
                house?
              </entry>
              <entry>
                <literal>dogs--in-my-house</literal>
              </entry>
            </row>
            <row>
              <entry>
                <ulink url="http://www.w3.org/TR/html40/">HTML</ulink>,
                <ulink url="http://meyerweb.com/eric/tools/s5/">S5</ulink>,
                or
                <ulink url="http://en.wikipedia.org/wiki/Rich_Text_Format">RTF</ulink>?
              </entry>
              <entry>
                <literal>html-s5-or-rtf</literal>
              </entry>
            </row>
            <row>
              <entry>
                3. Applications
              </entry>
              <entry>
                <literal>applications</literal>
              </entry>
            </row>
            <row>
              <entry>
                33
              </entry>
              <entry>
                <literal>section</literal>
              </entry>
            </row>
          </tbody>
        </tgroup>
      </informaltable>
      <para>
        These rules should, in most cases, allow one to determine the
        identifier from the header text. The exception is when several
        headers have the same text; in this case, the first will get an
        identifier as described above; the second will get the same
        identifier with <literal>-1</literal> appended; the third with
        <literal>-2</literal>; and so on.
      </para>
      <para>
        These identifiers are used to provide link targets in the table
        of contents generated by the
        <literal>--toc|--table-of-contents</literal> option. They also
        make it easy to provide links from one section of a document to
        another. A link to this section, for example, might look like
        this:
      </para>
      <programlisting>
See the section on
[header identifiers](#header-identifiers-in-html-latex-and-context).
</programlisting>
      <para>
        Note, however, that this method of providing links to sections
        works only in HTML, LaTeX, and ConTeXt formats.
      </para>
      <para>
        If the <literal>--section-divs</literal> option is specified,
        then each section will be wrapped in a <literal>div</literal>
        (or a <literal>section</literal>, if <literal>--html5</literal>
        was specified), and the identifier will be attached to the
        enclosing <literal>&lt;div&gt;</literal> (or
        <literal>&lt;section&gt;</literal>) tag rather than the header
        itself. This allows entire sections to be manipulated using
        javascript or treated differently in CSS.
      </para>
      <para>
        <emphasis role="strong">Extension:
        <literal>implicit_header_references</literal></emphasis>
      </para>
      <para>
        Pandoc behaves as if reference links have been defined for each
        header. So, instead of
      </para>
      <programlisting>
[header identifiers](#header-identifiers-in-html)
</programlisting>
      <para>
        you can simply write
      </para>
      <programlisting>
[header identifiers]
</programlisting>
      <para>
        or
      </para>
      <programlisting>
[header identifiers][]
</programlisting>
      <para>
        or
      </para>
      <programlisting>
[the section on header identifiers][header identifiers]
</programlisting>
      <para>
        If there are multiple headers with identical text, the
        corresponding reference will link to the first one only, and you
        will need to use explicit links to link to the others, as
        described above.
      </para>
      <para>
        Unlike regular reference links, these references are
        case-sensitive.
      </para>
      <para>
        Note: if you have defined an explicit identifier for a header,
        then implicit references to it will not work.
      </para>
    </sect3>
  </sect2>
  <sect2 id="block-quotations">
    <title>Block quotations</title>
    <para>
      Markdown uses email conventions for quoting blocks of text. A
      block quotation is one or more paragraphs or other block elements
      (such as lists or headers), with each line preceded by a
      <literal>&gt;</literal> character and a space. (The
      <literal>&gt;</literal> need not start at the left margin, but it
      should not be indented more than three spaces.)
    </para>
    <programlisting>
&gt; This is a block quote. This
&gt; paragraph has two lines.
&gt;
&gt; 1. This is a list inside a block quote.
&gt; 2. Second item.
</programlisting>
    <para>
      A <quote>lazy</quote> form, which requires the
      <literal>&gt;</literal> character only on the first line of each
      block, is also allowed:
    </para>
    <programlisting>
&gt; This is a block quote. This
paragraph has two lines.

&gt; 1. This is a list inside a block quote.
2. Second item.
</programlisting>
    <para>
      Among the block elements that can be contained in a block quote
      are other block quotes. That is, block quotes can be nested:
    </para>
    <programlisting>
&gt; This is a block quote.
&gt;
&gt; &gt; A block quote within a block quote.
</programlisting>
    <para>
      <emphasis role="strong">Extension:
      <literal>blank_before_blockquote</literal></emphasis>
    </para>
    <para>
      Standard markdown syntax does not require a blank line before a
      block quote. Pandoc does require this (except, of course, at the
      beginning of the document). The reason for the requirement is that
      it is all too easy for a <literal>&gt;</literal> to end up at the
      beginning of a line by accident (perhaps through line wrapping).
      So, unless the <literal>markdown_strict</literal> format is used,
      the following does not produce a nested block quote in pandoc:
    </para>
    <programlisting>
&gt; This is a block quote.
&gt;&gt; Nested.
</programlisting>
  </sect2>
  <sect2 id="verbatim-code-blocks">
    <title>Verbatim (code) blocks</title>
    <sect3 id="indented-code-blocks">
      <title>Indented code blocks</title>
      <para>
        A block of text indented four spaces (or one tab) is treated as
        verbatim text: that is, special characters do not trigger
        special formatting, and all spaces and line breaks are
        preserved. For example,
      </para>
      <programlisting>
    if (a &gt; 3) {
      moveShip(5 * gravity, DOWN);
    }
</programlisting>
      <para>
        The initial (four space or one tab) indentation is not
        considered part of the verbatim text, and is removed in the
        output.
      </para>
      <para>
        Note: blank lines in the verbatim text need not begin with four
        spaces.
      </para>
    </sect3>
    <sect3 id="fenced-code-blocks">
      <title>Fenced code blocks</title>
      <para>
        <emphasis role="strong">Extension:
        <literal>fenced_code_blocks</literal></emphasis>
      </para>
      <para>
        In addition to standard indented code blocks, Pandoc supports
        <emphasis>fenced</emphasis> code blocks. These begin with a row
        of three or more tildes (<literal>~</literal>) or backticks
        (<literal>`</literal>) and end with a row of tildes or backticks
        that must be at least as long as the starting row. Everything
        between these lines is treated as code. No indentation is
        necessary:
      </para>
      <programlisting>
~~~~~~~
if (a &gt; 3) {
  moveShip(5 * gravity, DOWN);
}
~~~~~~~
</programlisting>
      <para>
        Like regular code blocks, fenced code blocks must be separated
        from surrounding text by blank lines.
      </para>
      <para>
        If the code itself contains a row of tildes or backticks, just
        use a longer row of tildes or backticks at the start and end:
      </para>
      <programlisting>
~~~~~~~~~~~~~~~~
~~~~~~~~~~
code including tildes
~~~~~~~~~~
~~~~~~~~~~~~~~~~
</programlisting>
      <para>
        Optionally, you may attach attributes to the code block using
        this syntax:
      </para>
      <programlisting>
~~~~ {#mycode .haskell .numberLines startFrom=&quot;100&quot;}
qsort []     = []
qsort (x:xs) = qsort (filter (&lt; x) xs) ++ [x] ++
               qsort (filter (&gt;= x) xs)
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
</programlisting>
      <para>
        Here <literal>mycode</literal> is an identifier,
        <literal>haskell</literal> and <literal>numberLines</literal>
        are classes, and <literal>startFrom</literal> is an attribute
        with value <literal>100</literal>. Some output formats can use
        this information to do syntax highlighting. Currently, the only
        output formats that uses this information are HTML and LaTeX. If
        highlighting is supported for your output format and language,
        then the code block above will appear highlighted, with numbered
        lines. (To see which languages are supported, do
        <literal>pandoc --version</literal>.) Otherwise, the code block
        above will appear as follows:
      </para>
      <programlisting>
&lt;pre id=&quot;mycode&quot; class=&quot;haskell numberLines&quot; startFrom=&quot;100&quot;&gt;
  &lt;code&gt;
  ...
  &lt;/code&gt;
&lt;/pre&gt;
</programlisting>
      <para>
        A shortcut form can also be used for specifying the language of
        the code block:
      </para>
      <programlisting>
```haskell
qsort [] = []
```
</programlisting>
      <para>
        This is equivalent to:
      </para>
      <programlisting>
``` {.haskell}
qsort [] = []
```
</programlisting>
      <para>
        To prevent all highlighting, use the
        <literal>--no-highlight</literal> flag. To set the highlighting
        style, use <literal>--highlight-style</literal>.
      </para>
    </sect3>
  </sect2>
  <sect2 id="line-blocks">
    <title>Line blocks</title>
    <para>
      <emphasis role="strong">Extension:
      <literal>line_blocks</literal></emphasis>
    </para>
    <para>
      A line block is a sequence of lines beginning with a vertical bar
      (<literal>|</literal>) followed by a space. The division into
      lines will be preserved in the output, as will any leading spaces;
      otherwise, the lines will be formatted as markdown. This is useful
      for verse and addresses:
    </para>
    <programlisting>
| The limerick packs laughs anatomical
| In space that is quite economical.
|    But the good ones I've seen
|    So seldom are clean
| And the clean ones so seldom are comical

| 200 Main St.
| Berkeley, CA 94718
</programlisting>
    <para>
      The lines can be hard-wrapped if needed, but the continuation line
      must begin with a space.
    </para>
    <programlisting>
| The Right Honorable Most Venerable and Righteous Samuel L.
  Constable, Jr.
| 200 Main St.
| Berkeley, CA 94718
</programlisting>
    <para>
      This syntax is borrowed from
      <ulink url="http://docutils.sourceforge.net/docs/ref/rst/introduction.html">reStructuredText</ulink>.
    </para>
  </sect2>
  <sect2 id="lists">
    <title>Lists</title>
    <sect3 id="bullet-lists">
      <title>Bullet lists</title>
      <para>
        A bullet list is a list of bulleted list items. A bulleted list
        item begins with a bullet (<literal>*</literal>,
        <literal>+</literal>, or <literal>-</literal>). Here is a simple
        example:
      </para>
      <programlisting>
* one
* two
* three
</programlisting>
      <para>
        This will produce a <quote>compact</quote> list. If you want a
        <quote>loose</quote> list, in which each item is formatted as a
        paragraph, put spaces between the items:
      </para>
      <programlisting>
* one

* two

* three
</programlisting>
      <para>
        The bullets need not be flush with the left margin; they may be
        indented one, two, or three spaces. The bullet must be followed
        by whitespace.
      </para>
      <para>
        List items look best if subsequent lines are flush with the
        first line (after the bullet):
      </para>
      <programlisting>
* here is my first
  list item.
* and my second.
</programlisting>
      <para>
        But markdown also allows a <quote>lazy</quote> format:
      </para>
      <programlisting>
* here is my first
list item.
* and my second.
</programlisting>
    </sect3>
    <sect3 id="the-four-space-rule">
      <title>The four-space rule</title>
      <para>
        A list item may contain multiple paragraphs and other
        block-level content. However, subsequent paragraphs must be
        preceded by a blank line and indented four spaces or a tab. The
        list will look better if the first paragraph is aligned with the
        rest:
      </para>
      <programlisting>
  * First paragraph.

    Continued.

  * Second paragraph. With a code block, which must be indented
    eight spaces:

        { code }
</programlisting>
      <para>
        List items may include other lists. In this case the preceding
        blank line is optional. The nested list must be indented four
        spaces or one tab:
      </para>
      <programlisting>
* fruits
    + apples
        - macintosh
        - red delicious
    + pears
    + peaches
* vegetables
    + brocolli
    + chard
</programlisting>
      <para>
        As noted above, markdown allows you to write list items
        <quote>lazily,</quote> instead of indenting continuation lines.
        However, if there are multiple paragraphs or other blocks in a
        list item, the first line of each must be indented.
      </para>
      <programlisting>
+ A lazy, lazy, list
item.

+ Another one; this looks
bad but is legal.

    Second paragraph of second
list item.
</programlisting>
      <para>
        <emphasis role="strong">Note:</emphasis> Although the four-space
        rule for continuation paragraphs comes from the official
        <ulink url="http://daringfireball.net/projects/markdown/syntax#list">markdown
        syntax guide</ulink>, the reference implementation,
        <literal>Markdown.pl</literal>, does not follow it. So pandoc
        will give different results than <literal>Markdown.pl</literal>
        when authors have indented continuation paragraphs fewer than
        four spaces.
      </para>
      <para>
        The
        <ulink url="http://daringfireball.net/projects/markdown/syntax#list">markdown
        syntax guide</ulink> is not explicit whether the four-space rule
        applies to <emphasis>all</emphasis> block-level content in a
        list item; it only mentions paragraphs and code blocks. But it
        implies that the rule applies to all block-level content
        (including nested lists), and pandoc interprets it that way.
      </para>
    </sect3>
    <sect3 id="ordered-lists">
      <title>Ordered lists</title>
      <para>
        Ordered lists work just like bulleted lists, except that the
        items begin with enumerators rather than bullets.
      </para>
      <para>
        In standard markdown, enumerators are decimal numbers followed
        by a period and a space. The numbers themselves are ignored, so
        there is no difference between this list:
      </para>
      <programlisting>
1.  one
2.  two
3.  three
</programlisting>
      <para>
        and this one:
      </para>
      <programlisting>
5.  one
7.  two
1.  three
</programlisting>
      <para>
        <emphasis role="strong">Extension:
        <literal>fancy_lists</literal></emphasis>
      </para>
      <para>
        Unlike standard markdown, Pandoc allows ordered list items to be
        marked with uppercase and lowercase letters and roman numerals,
        in addition to arabic numerals. List markers may be enclosed in
        parentheses or followed by a single right-parentheses or period.
        They must be separated from the text that follows by at least
        one space, and, if the list marker is a capital letter with a
        period, by at least two spaces.<footnote>
          <para>
            The point of this rule is to ensure that normal paragraphs
            starting with people’s initials, like
          </para>
          <programlisting>
B. Russell was an English philosopher.
</programlisting>
          <para>
            do not get treated as list items.
          </para>
          <para>
            This rule will not prevent
          </para>
          <programlisting>
(C) 2007 Joe Smith
</programlisting>
          <para>
            from being interpreted as a list item. In this case, a
            backslash escape can be used:
          </para>
          <programlisting>
(C\) 2007 Joe Smith
</programlisting>
        </footnote>
      </para>
      <para>
        <emphasis role="strong">Extension:
        <literal>startnum</literal></emphasis>
      </para>
      <para>
        Pandoc also pays attention to the type of list marker used, and
        to the starting number, and both of these are preserved where
        possible in the output format. Thus, the following yields a list
        with numbers followed by a single parenthesis, starting with 9,
        and a sublist with lowercase roman numerals:
      </para>
      <programlisting>
 9)  Ninth
10)  Tenth
11)  Eleventh
       i. subone
      ii. subtwo
     iii. subthree
</programlisting>
      <para>
        Pandoc will start a new list each time a different type of list
        marker is used. So, the following will create three lists:
      </para>
      <programlisting>
(2) Two
(5) Three
1.  Four
*   Five
</programlisting>
      <para>
        If default list markers are desired, use <literal>#.</literal>:
      </para>
      <programlisting>
#.  one
#.  two
#.  three
</programlisting>
    </sect3>
    <sect3 id="definition-lists">
      <title>Definition lists</title>
      <para>
        <emphasis role="strong">Extension:
        <literal>definition_lists</literal></emphasis>
      </para>
      <para>
        Pandoc supports definition lists, using a syntax inspired by
        <ulink url="http://www.michelf.com/projects/php-markdown/extra/">PHP
        Markdown Extra</ulink> and
        <ulink url="http://docutils.sourceforge.net/docs/ref/rst/introduction.html">reStructuredText</ulink>:<footnote>
          <para>
            I have also been influenced by the suggestions of
            <ulink url="http://www.justatheory.com/computers/markup/modest-markdown-proposal.html">David
            Wheeler</ulink>.
          </para>
        </footnote>
      </para>
      <programlisting>
Term 1

:   Definition 1

Term 2 with *inline markup*

:   Definition 2

        { some code, part of Definition 2 }

    Third paragraph of definition 2.
</programlisting>
      <para>
        Each term must fit on one line, which may optionally be followed
        by a blank line, and must be followed by one or more
        definitions. A definition begins with a colon or tilde, which
        may be indented one or two spaces. The body of the definition
        (including the first line, aside from the colon or tilde) should
        be indented four spaces. A term may have multiple definitions,
        and each definition may consist of one or more block elements
        (paragraph, code block, list, etc.), each indented four spaces
        or one tab stop.
      </para>
      <para>
        If you leave space after the definition (as in the example
        above), the blocks of the definitions will be considered
        paragraphs. In some output formats, this will mean greater
        spacing between term/definition pairs. For a compact definition
        list, do not leave space between the definition and the next
        term:
      </para>
      <programlisting>
Term 1
  ~ Definition 1
Term 2
  ~ Definition 2a
  ~ Definition 2b
</programlisting>
    </sect3>
    <sect3 id="numbered-example-lists">
      <title>Numbered example lists</title>
      <para>
        <emphasis role="strong">Extension:
        <literal>example_lists</literal></emphasis>
      </para>
      <para>
        The special list marker <literal>@</literal> can be used for
        sequentially numbered examples. The first list item with a
        <literal>@</literal> marker will be numbered <quote>1</quote>,
        the next <quote>2</quote>, and so on, throughout the document.
        The numbered examples need not occur in a single list; each new
        list using <literal>@</literal> will take up where the last
        stopped. So, for example:
      </para>
      <programlisting>
(@)  My first example will be numbered (1).
(@)  My second example will be numbered (2).

Explanation of examples.

(@)  My third example will be numbered (3).
</programlisting>
      <para>
        Numbered examples can be labeled and referred to elsewhere in
        the document:
      </para>
      <programlisting>
(@good)  This is a good example.

As (@good) illustrates, ...
</programlisting>
      <para>
        The label can be any string of alphanumeric characters,
        underscores, or hyphens.
      </para>
    </sect3>
    <sect3 id="compact-and-loose-lists">
      <title>Compact and loose lists</title>
      <para>
        Pandoc behaves differently from <literal>Markdown.pl</literal>
        on some <quote>edge cases</quote> involving lists. Consider this
        source:
      </para>
      <programlisting>
+   First
+   Second:
    -   Fee
    -   Fie
    -   Foe

+   Third
</programlisting>
      <para>
        Pandoc transforms this into a <quote>compact list</quote> (with
        no <literal>&lt;p&gt;</literal> tags around
        <quote>First</quote>, <quote>Second</quote>, or
        <quote>Third</quote>), while markdown puts
        <literal>&lt;p&gt;</literal> tags around <quote>Second</quote>
        and <quote>Third</quote> (but not <quote>First</quote>), because
        of the blank space around <quote>Third</quote>. Pandoc follows a
        simple rule: if the text is followed by a blank line, it is
        treated as a paragraph. Since <quote>Second</quote> is followed
        by a list, and not a blank line, it isn’t treated as a
        paragraph. The fact that the list is followed by a blank line is
        irrelevant. (Note: Pandoc works this way even when the
        <literal>markdown_strict</literal> format is specified. This
        behavior is consistent with the official markdown syntax
        description, even though it is different from that of
        <literal>Markdown.pl</literal>.)
      </para>
    </sect3>
    <sect3 id="ending-a-list">
      <title>Ending a list</title>
      <para>
        What if you want to put an indented code block after a list?
      </para>
      <programlisting>
-   item one
-   item two

    { my code block }
</programlisting>
      <para>
        Trouble! Here pandoc (like other markdown implementations) will
        treat <literal>{ my code block }</literal> as the second
        paragraph of item two, and not as a code block.
      </para>
      <para>
        To <quote>cut off</quote> the list after item two, you can
        insert some non-indented content, like an HTML comment, which
        won’t produce visible output in any format:
      </para>
      <programlisting>
-   item one
-   item two

&lt;!-- end of list --&gt;

    { my code block }
</programlisting>
      <para>
        You can use the same trick if you want two consecutive lists
        instead of one big list:
      </para>
      <programlisting>
1.  one
2.  two
3.  three

&lt;!-- --&gt;

1.  uno
2.  dos
3.  tres
</programlisting>
    </sect3>
  </sect2>
  <sect2 id="horizontal-rules">
    <title>Horizontal rules</title>
    <para>
      A line containing a row of three or more <literal>*</literal>,
      <literal>-</literal>, or <literal>_</literal> characters
      (optionally separated by spaces) produces a horizontal rule:
    </para>
    <programlisting>
*  *  *  *

---------------
</programlisting>
  </sect2>
  <sect2 id="tables">
    <title>Tables</title>
    <para>
      Four kinds of tables may be used. The first three kinds presuppose
      the use of a fixed-width font, such as Courier. The fourth kind
      can be used with proportionally spaced fonts, as it does not
      require lining up columns.
    </para>
    <sect3 id="simple-tables">
      <title>Simple tables</title>
      <para>
        <emphasis role="strong">Extension:
        <literal>simple_tables</literal>,
        <literal>table_captions</literal></emphasis>
      </para>
      <para>
        Simple tables look like this:
      </para>
      <programlisting>
  Right     Left     Center     Default
-------     ------ ----------   -------
     12     12        12            12
    123     123       123          123
      1     1          1             1

Table:  Demonstration of simple table syntax.
</programlisting>
      <para>
        The headers and table rows must each fit on one line. Column
        alignments are determined by the position of the header text
        relative to the dashed line below it:<footnote>
          <para>
            This scheme is due to Michel Fortin, who proposed it on the
            <ulink url="http://six.pairlist.net/pipermail/markdown-discuss/2005-March/001097.html">Markdown
            discussion list</ulink>.
          </para>
        </footnote>
      </para>
      <itemizedlist>
        <listitem>
          <para>
            If the dashed line is flush with the header text on the
            right side but extends beyond it on the left, the column is
            right-aligned.
          </para>
        </listitem>
        <listitem>
          <para>
            If the dashed line is flush with the header text on the left
            side but extends beyond it on the right, the column is
            left-aligned.
          </para>
        </listitem>
        <listitem>
          <para>
            If the dashed line extends beyond the header text on both
            sides, the column is centered.
          </para>
        </listitem>
        <listitem>
          <para>
            If the dashed line is flush with the header text on both
            sides, the default alignment is used (in most cases, this
            will be left).
          </para>
        </listitem>
      </itemizedlist>
      <para>
        The table must end with a blank line, or a line of dashes
        followed by a blank line. A caption may optionally be provided
        (as illustrated in the example above). A caption is a paragraph
        beginning with the string <literal>Table:</literal> (or just
        <literal>:</literal>), which will be stripped off. It may appear
        either before or after the table.
      </para>
      <para>
        The column headers may be omitted, provided a dashed line is
        used to end the table. For example:
      </para>
      <programlisting>
-------     ------ ----------   -------
     12     12        12             12
    123     123       123           123
      1     1          1              1
-------     ------ ----------   -------
</programlisting>
      <para>
        When headers are omitted, column alignments are determined on
        the basis of the first line of the table body. So, in the tables
        above, the columns would be right, left, center, and right
        aligned, respectively.
      </para>
    </sect3>
    <sect3 id="multiline-tables">
      <title>Multiline tables</title>
      <para>
        <emphasis role="strong">Extension:
        <literal>multiline_tables</literal>,
        <literal>table_captions</literal></emphasis>
      </para>
      <para>
        Multiline tables allow headers and table rows to span multiple
        lines of text (but cells that span multiple columns or rows of
        the table are not supported). Here is an example:
      </para>
      <programlisting>
-------------------------------------------------------------
 Centered   Default           Right Left
  Header    Aligned         Aligned Aligned
----------- ------- --------------- -------------------------
   First    row                12.0 Example of a row that
                                    spans multiple lines.

  Second    row                 5.0 Here's another one. Note
                                    the blank line between
                                    rows.
-------------------------------------------------------------

Table: Here's the caption. It, too, may span
multiple lines.
</programlisting>
      <para>
        These work like simple tables, but with the following
        differences:
      </para>
      <itemizedlist>
        <listitem>
          <para>
            They must begin with a row of dashes, before the header text
            (unless the headers are omitted).
          </para>
        </listitem>
        <listitem>
          <para>
            They must end with a row of dashes, then a blank line.
          </para>
        </listitem>
        <listitem>
          <para>
            The rows must be separated by blank lines.
          </para>
        </listitem>
      </itemizedlist>
      <para>
        In multiline tables, the table parser pays attention to the
        widths of the columns, and the writers try to reproduce these
        relative widths in the output. So, if you find that one of the
        columns is too narrow in the output, try widening it in the
        markdown source.
      </para>
      <para>
        Headers may be omitted in multiline tables as well as simple
        tables:
      </para>
      <programlisting>
----------- ------- --------------- -------------------------
   First    row                12.0 Example of a row that
                                    spans multiple lines.

  Second    row                 5.0 Here's another one. Note
                                    the blank line between
                                    rows.
----------- ------- --------------- -------------------------

: Here's a multiline table without headers.
</programlisting>
      <para>
        It is possible for a multiline table to have just one row, but
        the row should be followed by a blank line (and then the row of
        dashes that ends the table), or the table may be interpreted as
        a simple table.
      </para>
    </sect3>
    <sect3 id="grid-tables">
      <title>Grid tables</title>
      <para>
        <emphasis role="strong">Extension:
        <literal>grid_tables</literal>,
        <literal>table_captions</literal></emphasis>
      </para>
      <para>
        Grid tables look like this:
      </para>
      <programlisting>
: Sample grid table.

+---------------+---------------+--------------------+
| Fruit         | Price         | Advantages         |
+===============+===============+====================+
| Bananas       | $1.34         | - built-in wrapper |
|               |               | - bright color     |
+---------------+---------------+--------------------+
| Oranges       | $2.10         | - cures scurvy     |
|               |               | - tasty            |
+---------------+---------------+--------------------+
</programlisting>
      <para>
        The row of <literal>=</literal>s separates the header from the
        table body, and can be omitted for a headerless table. The cells
        of grid tables may contain arbitrary block elements (multiple
        paragraphs, code blocks, lists, etc.). Alignments are not
        supported, nor are cells that span multiple columns or rows.
        Grid tables can be created easily using
        <ulink url="http://table.sourceforge.net/">Emacs table
        mode</ulink>.
      </para>
    </sect3>
    <sect3 id="pipe-tables">
      <title>Pipe tables</title>
      <para>
        <emphasis role="strong">Extension:
        <literal>pipe_tables</literal>,
        <literal>table_captions</literal></emphasis>
      </para>
      <para>
        Pipe tables look like this:
      </para>
      <programlisting>
| Right | Left | Default | Center |
|------:|:-----|---------|:------:|
|   12  |  12  |    12   |    12  |
|  123  |  123 |   123   |   123  |
|    1  |    1 |     1   |     1  |

  : Demonstration of simple table syntax.
</programlisting>
      <para>
        The syntax is
        <ulink url="http://michelf.ca/projects/php-markdown/extra/#table">the
        same as in PHP markdown extra</ulink>. The beginning and ending
        pipe characters are optional, but pipes are required between all
        columns. The colons indicate column alignment as shown. The
        header can be omitted, but the horizontal line must still be
        included, as it defines column alignments.
      </para>
      <para>
        Since the pipes indicate column boundaries, columns need not be
        vertically aligned, as they are in the above example. So, this
        is a perfectly legal (though ugly) pipe table:
      </para>
      <programlisting>
fruit| price
-----|-----:
apple|2.05
pear|1.37
orange|3.09
</programlisting>
      <para>
        The cells of pipe tables cannot contain block elements like
        paragraphs and lists, and cannot span multiple lines.
      </para>
      <para>
        Note: Pandoc also recognizes pipe tables of the following form,
        as can produced by Emacs’ orgtbl-mode:
      </para>
      <programlisting>
| One | Two   |
|-----+-------|
| my  | table |
| is  | nice  |
</programlisting>
      <para>
        The difference is that <literal>+</literal> is used instead of
        <literal>|</literal>. Other orgtbl features are not supported.
        In particular, to get non-default column alignment, you’ll need
        to add colons as above.
      </para>
    </sect3>
  </sect2>
  <sect2 id="title-block">
    <title>Title block</title>
    <para>
      <emphasis role="strong">Extension:
      <literal>pandoc_title_block</literal></emphasis>
    </para>
    <para>
      If the file begins with a title block
    </para>
    <programlisting>
% title
% author(s) (separated by semicolons)
% date
</programlisting>
    <para>
      it will be parsed as bibliographic information, not regular text.
      (It will be used, for example, in the title of standalone LaTeX or
      HTML output.) The block may contain just a title, a title and an
      author, or all three elements. If you want to include an author
      but no title, or a title and a date but no author, you need a
      blank line:
    </para>
    <programlisting>
%
% Author

% My title
%
% June 15, 2006
</programlisting>
    <para>
      The title may occupy multiple lines, but continuation lines must
      begin with leading space, thus:
    </para>
    <programlisting>
% My title
  on multiple lines
</programlisting>
    <para>
      If a document has multiple authors, the authors may be put on
      separate lines with leading space, or separated by semicolons, or
      both. So, all of the following are equivalent:
    </para>
    <programlisting>
% Author One
  Author Two

% Author One; Author Two

% Author One;
  Author Two
</programlisting>
    <para>
      The date must fit on one line.
    </para>
    <para>
      All three metadata fields may contain standard inline formatting
      (italics, links, footnotes, etc.).
    </para>
    <para>
      Title blocks will always be parsed, but they will affect the
      output only when the <literal>--standalone</literal>
      (<literal>-s</literal>) option is chosen. In HTML output, titles
      will appear twice: once in the document head – this is the title
      that will appear at the top of the window in a browser – and once
      at the beginning of the document body. The title in the document
      head can have an optional prefix attached
      (<literal>--title-prefix</literal> or <literal>-T</literal>
      option). The title in the body appears as an H1 element with class
      <quote>title</quote>, so it can be suppressed or reformatted with
      CSS. If a title prefix is specified with <literal>-T</literal> and
      no title block appears in the document, the title prefix will be
      used by itself as the HTML title.
    </para>
    <para>
      The man page writer extracts a title, man page section number, and
      other header and footer information from the title line. The title
      is assumed to be the first word on the title line, which may
      optionally end with a (single-digit) section number in
      parentheses. (There should be no space between the title and the
      parentheses.) Anything after this is assumed to be additional
      footer and header text. A single pipe character
      (<literal>|</literal>) should be used to separate the footer text
      from the header text. Thus,
    </para>
    <programlisting>
% PANDOC(1)
</programlisting>
    <para>
      will yield a man page with the title <literal>PANDOC</literal> and
      section 1.
    </para>
    <programlisting>
% PANDOC(1) Pandoc User Manuals
</programlisting>
    <para>
      will also have <quote>Pandoc User Manuals</quote> in the footer.
    </para>
    <programlisting>
% PANDOC(1) Pandoc User Manuals | Version 4.0
</programlisting>
    <para>
      will also have <quote>Version 4.0</quote> in the header.
    </para>
  </sect2>
  <sect2 id="backslash-escapes">
    <title>Backslash escapes</title>
    <para>
      <emphasis role="strong">Extension:
      <literal>all_symbols_escapable</literal></emphasis>
    </para>
    <para>
      Except inside a code block or inline code, any punctuation or
      space character preceded by a backslash will be treated literally,
      even if it would normally indicate formatting. Thus, for example,
      if one writes
    </para>
    <programlisting>
*\*hello\**
</programlisting>
    <para>
      one will get
    </para>
    <programlisting>
&lt;em&gt;*hello*&lt;/em&gt;
</programlisting>
    <para>
      instead of
    </para>
    <programlisting>
&lt;strong&gt;hello&lt;/strong&gt;
</programlisting>
    <para>
      This rule is easier to remember than standard markdown’s rule,
      which allows only the following characters to be
      backslash-escaped:
    </para>
    <programlisting>
\`*_{}[]()&gt;#+-.!
</programlisting>
    <para>
      (However, if the <literal>markdown_strict</literal> format is
      used, the standard markdown rule will be used.)
    </para>
    <para>
      A backslash-escaped space is parsed as a nonbreaking space. It
      will appear in TeX output as <literal>~</literal> and in HTML and
      XML as <literal>\&amp;#160;</literal> or
      <literal>\&amp;nbsp;</literal>.
    </para>
    <para>
      A backslash-escaped newline (i.e. a backslash occurring at the end
      of a line) is parsed as a hard line break. It will appear in TeX
      output as <literal>\\</literal> and in HTML as
      <literal>&lt;br /&gt;</literal>. This is a nice alternative to
      markdown’s <quote>invisible</quote> way of indicating hard line
      breaks using two trailing spaces on a line.
    </para>
    <para>
      Backslash escapes do not work in verbatim contexts.
    </para>
  </sect2>
  <sect2 id="smart-punctuation">
    <title>Smart punctuation</title>
    <para>
      <emphasis role="strong">Extension</emphasis>
    </para>
    <para>
      If the <literal>--smart</literal> option is specified, pandoc will
      produce typographically correct output, converting straight quotes
      to curly quotes, <literal>---</literal> to em-dashes,
      <literal>--</literal> to en-dashes, and <literal>...</literal> to
      ellipses. Nonbreaking spaces are inserted after certain
      abbreviations, such as <quote>Mr.</quote>
    </para>
    <para>
      Note: if your LaTeX template uses the <literal>csquotes</literal>
      package, pandoc will detect automatically this and use
      <literal>\enquote{...}</literal> for quoted text.
    </para>
  </sect2>
  <sect2 id="inline-formatting">
    <title>Inline formatting</title>
    <sect3 id="emphasis">
      <title>Emphasis</title>
      <para>
        To <emphasis>emphasize</emphasis> some text, surround it with
        <literal>*</literal>s or <literal>_</literal>, like this:
      </para>
      <programlisting>
This text is _emphasized with underscores_, and this
is *emphasized with asterisks*.
</programlisting>
      <para>
        Double <literal>*</literal> or <literal>_</literal> produces
        <emphasis role="strong">strong emphasis</emphasis>:
      </para>
      <programlisting>
This is **strong emphasis** and __with underscores__.
</programlisting>
      <para>
        A <literal>*</literal> or <literal>_</literal> character
        surrounded by spaces, or backslash-escaped, will not trigger
        emphasis:
      </para>
      <programlisting>
This is * not emphasized *, and \*neither is this\*.
</programlisting>
      <para>
        <emphasis role="strong">Extension:
        <literal>intraword_underscores</literal></emphasis>
      </para>
      <para>
        Because <literal>_</literal> is sometimes used inside words and
        identifiers, pandoc does not interpret a <literal>_</literal>
        surrounded by alphanumeric characters as an emphasis marker. If
        you want to emphasize just part of a word, use
        <literal>*</literal>:
      </para>
      <programlisting>
feas*ible*, not feas*able*.
</programlisting>
    </sect3>
    <sect3 id="strikeout">
      <title>Strikeout</title>
      <para>
        <emphasis role="strong">Extension:
        <literal>strikeout</literal></emphasis>
      </para>
      <para>
        To strikeout a section of text with a horizontal line, begin and
        end it with <literal>~~</literal>. Thus, for example,
      </para>
      <programlisting>
This ~~is deleted text.~~
</programlisting>
    </sect3>
    <sect3 id="superscripts-and-subscripts">
      <title>Superscripts and subscripts</title>
      <para>
        <emphasis role="strong">Extension:
        <literal>superscript</literal>,
        <literal>subscript</literal></emphasis>
      </para>
      <para>
        Superscripts may be written by surrounding the superscripted
        text by <literal>^</literal> characters; subscripts may be
        written by surrounding the subscripted text by
        <literal>~</literal> characters. Thus, for example,
      </para>
      <programlisting>
H~2~O is a liquid.  2^10^ is 1024.
</programlisting>
      <para>
        If the superscripted or subscripted text contains spaces, these
        spaces must be escaped with backslashes. (This is to prevent
        accidental superscripting and subscripting through the ordinary
        use of <literal>~</literal> and <literal>^</literal>.) Thus, if
        you want the letter P with <quote>a cat</quote> in subscripts,
        use <literal>P~a\ cat~</literal>, not
        <literal>P~a cat~</literal>.
      </para>
    </sect3>
    <sect3 id="verbatim">
      <title>Verbatim</title>
      <para>
        To make a short span of text verbatim, put it inside backticks:
      </para>
      <programlisting>
What is the difference between `&gt;&gt;=` and `&gt;&gt;`?
</programlisting>
      <para>
        If the verbatim text includes a backtick, use double backticks:
      </para>
      <programlisting>
Here is a literal backtick `` ` ``.
</programlisting>
      <para>
        (The spaces after the opening backticks and before the closing
        backticks will be ignored.)
      </para>
      <para>
        The general rule is that a verbatim span starts with a string of
        consecutive backticks (optionally followed by a space) and ends
        with a string of the same number of backticks (optionally
        preceded by a space).
      </para>
      <para>
        Note that backslash-escapes (and other markdown constructs) do
        not work in verbatim contexts:
      </para>
      <programlisting>
This is a backslash followed by an asterisk: `\*`.
</programlisting>
      <para>
        <emphasis role="strong">Extension:
        <literal>inline_code_attributes</literal></emphasis>
      </para>
      <para>
        Attributes can be attached to verbatim text, just as with
        <link linkend="fenced-code-blocks">fenced code blocks</link>:
      </para>
      <programlisting>
`&lt;$&gt;`{.haskell}
</programlisting>
    </sect3>
  </sect2>
  <sect2 id="math">
    <title>Math</title>
    <para>
      <emphasis role="strong">Extension:
      <literal>tex_math_dollars</literal></emphasis>
    </para>
    <para>
      Anything between two <literal>$</literal> characters will be
      treated as TeX math. The opening <literal>$</literal> must have a
      character immediately to its right, while the closing
      <literal>$</literal> must have a character immediately to its
      left. Thus, <literal>$20,000 and $30,000</literal> won’t parse as
      math. If for some reason you need to enclose text in literal
      <literal>$</literal> characters, backslash-escape them and they
      won’t be treated as math delimiters.
    </para>
    <para>
      TeX math will be printed in all output formats. How it is rendered
      depends on the output format:
    </para>
    <variablelist>
      <varlistentry>
        <term>
          Markdown, LaTeX, Org-Mode, ConTeXt
        </term>
        <listitem>
          <para>
            It will appear verbatim between <literal>$</literal>
            characters.
          </para>
        </listitem>
      </varlistentry>
      <varlistentry>
        <term>
          reStructuredText
        </term>
        <listitem>
          <para>
            It will be rendered using an interpreted text role
            <literal>:math:</literal>, as described
            <ulink url="http://www.american.edu/econ/itex2mml/mathhack.rst">here</ulink>.
          </para>
        </listitem>
      </varlistentry>
      <varlistentry>
        <term>
          AsciiDoc
        </term>
        <listitem>
          <para>
            It will be rendered as <literal>latexmath:[...]</literal>.
          </para>
        </listitem>
      </varlistentry>
      <varlistentry>
        <term>
          Texinfo
        </term>
        <listitem>
          <para>
            It will be rendered inside a <literal>@math</literal>
            command.
          </para>
        </listitem>
      </varlistentry>
      <varlistentry>
        <term>
          groff man
        </term>
        <listitem>
          <para>
            It will be rendered verbatim without <literal>$</literal>’s.
          </para>
        </listitem>
      </varlistentry>
      <varlistentry>
        <term>
          MediaWiki
        </term>
        <listitem>
          <para>
            It will be rendered inside <literal>&lt;math&gt;</literal>
            tags.
          </para>
        </listitem>
      </varlistentry>
      <varlistentry>
        <term>
          Textile
        </term>
        <listitem>
          <para>
            It will be rendered inside
            <literal>&lt;span class=&quot;math&quot;&gt;</literal> tags.
          </para>
        </listitem>
      </varlistentry>
      <varlistentry>
        <term>
          RTF, OpenDocument, ODT
        </term>
        <listitem>
          <para>
            It will be rendered, if possible, using unicode characters,
            and will otherwise appear verbatim.
          </para>
        </listitem>
      </varlistentry>
      <varlistentry>
        <term>
          Docbook
        </term>
        <listitem>
          <para>
            If the <literal>--mathml</literal> flag is used, it will be
            rendered using mathml in an
            <literal>inlineequation</literal> or
            <literal>informalequation</literal> tag. Otherwise it will
            be rendered, if possible, using unicode characters.
          </para>
        </listitem>
      </varlistentry>
      <varlistentry>
        <term>
          Docx
        </term>
        <listitem>
          <para>
            It will be rendered using OMML math markup.
          </para>
        </listitem>
      </varlistentry>
      <varlistentry>
        <term>
          FictionBook2
        </term>
        <listitem>
          <para>
            If the <literal>--webtex</literal> option is used, formulas
            are rendered as images using Google Charts or other
            compatible web service, downloaded and embedded in the
            e-book. Otherwise, they will appear verbatim.
          </para>
        </listitem>
      </varlistentry>
      <varlistentry>
        <term>
          HTML, Slidy, DZSlides, S5, EPUB
        </term>
        <listitem>
          <para>
            The way math is rendered in HTML will depend on the
            command-line options selected:
          </para>
          <orderedlist numeration="arabic">
            <listitem>
              <para>
                The default is to render TeX math as far as possible
                using unicode characters, as with RTF, DocBook, and
                OpenDocument output. Formulas are put inside a
                <literal>span</literal> with
                <literal>class=&quot;math&quot;</literal>, so that they
                may be styled differently from the surrounding text if
                needed.
              </para>
            </listitem>
            <listitem>
              <para>
                If the <literal>--latexmathml</literal> option is used,
                TeX math will be displayed between <literal>$</literal>
                or <literal>$$</literal> characters and put in
                <literal>&lt;span&gt;</literal> tags with class
                <literal>LaTeX</literal>. The
                <ulink url="http://math.etsu.edu/LaTeXMathML/">LaTeXMathML</ulink>
                script will be used to render it as formulas. (This
                trick does not work in all browsers, but it works in
                Firefox. In browsers that do not support LaTeXMathML,
                TeX math will appear verbatim between
                <literal>$</literal> characters.)
              </para>
            </listitem>
            <listitem>
              <para>
                If the <literal>--jsmath</literal> option is used, TeX
                math will be put inside <literal>&lt;span&gt;</literal>
                tags (for inline math) or <literal>&lt;div&gt;</literal>
                tags (for display math) with class
                <literal>math</literal>. The
                <ulink url="http://www.math.union.edu/~dpvc/jsmath/">jsMath</ulink>
                script will be used to render it.
              </para>
            </listitem>
            <listitem>
              <para>
                If the <literal>--mimetex</literal> option is used, the
                <ulink url="http://www.forkosh.com/mimetex.html">mimeTeX</ulink>
                CGI script will be called to generate images for each
                TeX formula. This should work in all browsers. The
                <literal>--mimetex</literal> option takes an optional
                URL as argument. If no URL is specified, it will be
                assumed that the mimeTeX CGI script is at
                <literal>/cgi-bin/mimetex.cgi</literal>.
              </para>
            </listitem>
            <listitem>
              <para>
                If the <literal>--gladtex</literal> option is used, TeX
                formulas will be enclosed in
                <literal>&lt;eq&gt;</literal> tags in the HTML output.
                The resulting <literal>htex</literal> file may then be
                processed by
                <ulink url="http://ans.hsh.no/home/mgg/gladtex/">gladTeX</ulink>,
                which will produce image files for each formula and an
                <literal>html</literal> file with links to these images.
                So, the procedure is:
              </para>
              <programlisting>
pandoc -s --gladtex myfile.txt -o myfile.htex
gladtex -d myfile-images myfile.htex
# produces myfile.html and images in myfile-images
</programlisting>
            </listitem>
            <listitem>
              <para>
                If the <literal>--webtex</literal> option is used, TeX
                formulas will be converted to
                <literal>&lt;img&gt;</literal> tags that link to an
                external script that converts formulas to images. The
                formula will be URL-encoded and concatenated with the
                URL provided. If no URL is specified, the Google Chart
                API will be used
                (<literal>http://chart.apis.google.com/chart?cht=tx&amp;chl=</literal>).
              </para>
            </listitem>
            <listitem>
              <para>
                If the <literal>--mathjax</literal> option is used, TeX
                math will be displayed between
                <literal>\(...\)</literal> (for inline math) or
                <literal>\[...\]</literal> (for display math) and put in
                <literal>&lt;span&gt;</literal> tags with class
                <literal>math</literal>. The
                <ulink url="http://www.mathjax.org/">MathJax</ulink>
                script will be used to render it as formulas.
              </para>
            </listitem>
          </orderedlist>
        </listitem>
      </varlistentry>
    </variablelist>
  </sect2>
  <sect2 id="raw-html">
    <title>Raw HTML</title>
    <para>
      <emphasis role="strong">Extension:
      <literal>raw_html</literal></emphasis>
    </para>
    <para>
      Markdown allows you to insert raw HTML (or DocBook) anywhere in a
      document (except verbatim contexts, where <literal>&lt;</literal>,
      <literal>&gt;</literal>, and <literal>&amp;</literal> are
      interpreted literally). (Techncially this is not an extension,
      since standard markdown allows it, but it has been made an
      extension so that it can be disabled if desired.)
    </para>
    <para>
      The raw HTML is passed through unchanged in HTML, S5, Slidy,
      Slideous, DZSlides, EPUB, Markdown, and Textile output, and
      suppressed in other formats.
    </para>
    <para>
      <emphasis role="strong">Extension:
      <literal>markdown_in_html_blocks</literal></emphasis>
    </para>
    <para>
      Standard markdown allows you to include HTML
      <quote>blocks</quote>: blocks of HTML between balanced tags that
      are separated from the surrounding text with blank lines, and
      start and end at the left margin. Within these blocks, everything
      is interpreted as HTML, not markdown; so (for example),
      <literal>*</literal> does not signify emphasis.
    </para>
    <para>
      Pandoc behaves this way when the
      <literal>markdown_strict</literal> format is used; but by default,
      pandoc interprets material between HTML block tags as markdown.
      Thus, for example, Pandoc will turn
    </para>
    <programlisting>
&lt;table&gt;
    &lt;tr&gt;
        &lt;td&gt;*one*&lt;/td&gt;
        &lt;td&gt;[a link](http://google.com)&lt;/td&gt;
    &lt;/tr&gt;
&lt;/table&gt;
</programlisting>
    <para>
      into
    </para>
    <programlisting>
&lt;table&gt;
    &lt;tr&gt;
        &lt;td&gt;&lt;em&gt;one&lt;/em&gt;&lt;/td&gt;
        &lt;td&gt;&lt;a href=&quot;http://google.com&quot;&gt;a link&lt;/a&gt;&lt;/td&gt;
    &lt;/tr&gt;
&lt;/table&gt;
</programlisting>
    <para>
      whereas <literal>Markdown.pl</literal> will preserve it as is.
    </para>
    <para>
      There is one exception to this rule: text between
      <literal>&lt;script&gt;</literal> and
      <literal>&lt;style&gt;</literal> tags is not interpreted as
      markdown.
    </para>
    <para>
      This departure from standard markdown should make it easier to mix
      markdown with HTML block elements. For example, one can surround a
      block of markdown text with <literal>&lt;div&gt;</literal> tags
      without preventing it from being interpreted as markdown.
    </para>
  </sect2>
  <sect2 id="raw-tex">
    <title>Raw TeX</title>
    <para>
      <emphasis role="strong">Extension:
      <literal>raw_tex</literal></emphasis>
    </para>
    <para>
      In addition to raw HTML, pandoc allows raw LaTeX, TeX, and ConTeXt
      to be included in a document. Inline TeX commands will be
      preserved and passed unchanged to the LaTeX and ConTeXt writers.
      Thus, for example, you can use LaTeX to include BibTeX citations:
    </para>
    <programlisting>
This result was proved in \cite{jones.1967}.
</programlisting>
    <para>
      Note that in LaTeX environments, like
    </para>
    <programlisting>
\begin{tabular}{|l|l|}\hline
Age &amp; Frequency \\ \hline
18--25  &amp; 15 \\
26--35  &amp; 33 \\
36--45  &amp; 22 \\ \hline
\end{tabular}
</programlisting>
    <para>
      the material between the begin and end tags will be interpreted as
      raw LaTeX, not as markdown.
    </para>
    <para>
      Inline LaTeX is ignored in output formats other than Markdown,
      LaTeX, and ConTeXt.
    </para>
  </sect2>
  <sect2 id="latex-macros">
    <title>LaTeX macros</title>
    <para>
      <emphasis role="strong">Extension:
      <literal>latex_macros</literal></emphasis>
    </para>
    <para>
      For output formats other than LaTeX, pandoc will parse LaTeX
      <literal>\newcommand</literal> and
      <literal>\renewcommand</literal> definitions and apply the
      resulting macros to all LaTeX math. So, for example, the following
      will work in all output formats, not just LaTeX:
    </para>
    <programlisting>
\newcommand{\tuple}[1]{\langle #1 \rangle}

$\tuple{a, b, c}$
</programlisting>
    <para>
      In LaTeX output, the <literal>\newcommand</literal> definition
      will simply be passed unchanged to the output.
    </para>
  </sect2>
  <sect2 id="links">
    <title>Links</title>
    <para>
      Markdown allows links to be specified in several ways.
    </para>
    <sect3 id="automatic-links">
      <title>Automatic links</title>
      <para>
        If you enclose a URL or email address in pointy brackets, it
        will become a link:
      </para>
      <programlisting>
&lt;http://google.com&gt;
&lt;sam@green.eggs.ham&gt;
</programlisting>
    </sect3>
    <sect3 id="inline-links">
      <title>Inline links</title>
      <para>
        An inline link consists of the link text in square brackets,
        followed by the URL in parentheses. (Optionally, the URL can be
        followed by a link title, in quotes.)
      </para>
      <programlisting>
This is an [inline link](/url), and here's [one with
a title](http://fsf.org &quot;click here for a good time!&quot;).
</programlisting>
      <para>
        There can be no space between the bracketed part and the
        parenthesized part. The link text can contain formatting (such
        as emphasis), but the title cannot.
      </para>
    </sect3>
    <sect3 id="reference-links">
      <title>Reference links</title>
      <para>
        An <emphasis>explicit</emphasis> reference link has two parts,
        the link itself and the link definition, which may occur
        elsewhere in the document (either before or after the link).
      </para>
      <para>
        The link consists of link text in square brackets, followed by a
        label in square brackets. (There can be space between the two.)
        The link definition consists of the bracketed label, followed by
        a colon and a space, followed by the URL, and optionally (after
        a space) a link title either in quotes or in parentheses.
      </para>
      <para>
        Here are some examples:
      </para>
      <programlisting>
[my label 1]: /foo/bar.html  &quot;My title, optional&quot;
[my label 2]: /foo
[my label 3]: http://fsf.org (The free software foundation)
[my label 4]: /bar#special  'A title in single quotes'
</programlisting>
      <para>
        The URL may optionally be surrounded by angle brackets:
      </para>
      <programlisting>
[my label 5]: &lt;http://foo.bar.baz&gt;
</programlisting>
      <para>
        The title may go on the next line:
      </para>
      <programlisting>
[my label 3]: http://fsf.org
  &quot;The free software foundation&quot;
</programlisting>
      <para>
        Note that link labels are not case sensitive. So, this will
        work:
      </para>
      <programlisting>
Here is [my link][FOO]

[Foo]: /bar/baz
</programlisting>
      <para>
        In an <emphasis>implicit</emphasis> reference link, the second
        pair of brackets is empty, or omitted entirely:
      </para>
      <programlisting>
See [my website][], or [my website].

[my website]: http://foo.bar.baz
</programlisting>
      <para>
        Note: In <literal>Markdown.pl</literal> and most other markdown
        implementations, reference link definitions cannot occur in
        nested constructions such as list items or block quotes. Pandoc
        lifts this arbitrary seeming restriction. So the following is
        fine in pandoc, though not in most other implementations:
      </para>
      <programlisting>
&gt; My block [quote].
&gt;
&gt; [quote]: /foo
</programlisting>
    </sect3>
    <sect3 id="internal-links">
      <title>Internal links</title>
      <para>
        To link to another section of the same document, use the
        automatically generated identifier (see
        <link linkend="header-identifiers-in-html-latex-and-context">Header
        identifiers in HTML, LaTeX, and ConTeXt</link>, below). For
        example:
      </para>
      <programlisting>
See the [Introduction](#introduction).
</programlisting>
      <para>
        or
      </para>
      <programlisting>
See the [Introduction].

[Introduction]: #introduction
</programlisting>
      <para>
        Internal links are currently supported for HTML formats
        (including HTML slide shows and EPUB), LaTeX, and ConTeXt.
      </para>
    </sect3>
  </sect2>
  <sect2 id="images">
    <title>Images</title>
    <para>
      A link immediately preceded by a <literal>!</literal> will be
      treated as an image. The link text will be used as the image’s alt
      text:
    </para>
    <programlisting>
![la lune](lalune.jpg &quot;Voyage to the moon&quot;)

![movie reel]

[movie reel]: movie.gif
</programlisting>
    <sect3 id="pictures-with-captions">
      <title>Pictures with captions</title>
      <para>
        <emphasis role="strong">Extension:
        <literal>implicit_figures</literal></emphasis>
      </para>
      <para>
        An image occurring by itself in a paragraph will be rendered as
        a figure with a caption.<footnote>
          <para>
            This feature is not yet implemented for RTF, OpenDocument,
            or ODT. In those formats, you’ll just get an image in a
            paragraph by itself, with no caption.
          </para>
        </footnote> (In LaTeX, a figure environment will be used; in
        HTML, the image will be placed in a <literal>div</literal> with
        class <literal>figure</literal>, together with a caption in a
        <literal>p</literal> with class <literal>caption</literal>.) The
        image’s alt text will be used as the caption.
      </para>
      <programlisting>
![This is the caption](/url/of/image.png)
</programlisting>
      <para>
        If you just want a regular inline image, just make sure it is
        not the only thing in the paragraph. One way to do this is to
        insert a nonbreaking space after the image:
      </para>
      <programlisting>
![This image won't be a figure](/url/of/image.png)\
</programlisting>
    </sect3>
  </sect2>
  <sect2 id="footnotes">
    <title>Footnotes</title>
    <para>
      <emphasis role="strong">Extension:
      <literal>footnotes</literal></emphasis>
    </para>
    <para>
      Pandoc’s markdown allows footnotes, using the following syntax:
    </para>
    <programlisting>
Here is a footnote reference,[^1] and another.[^longnote]

[^1]: Here is the footnote.

[^longnote]: Here's one with multiple blocks.

    Subsequent paragraphs are indented to show that they
belong to the previous footnote.

        { some.code }

    The whole paragraph can be indented, or just the first
    line.  In this way, multi-paragraph footnotes work like
    multi-paragraph list items.

This paragraph won't be part of the note, because it
isn't indented.
</programlisting>
    <para>
      The identifiers in footnote references may not contain spaces,
      tabs, or newlines. These identifiers are used only to correlate
      the footnote reference with the note itself; in the output,
      footnotes will be numbered sequentially.
    </para>
    <para>
      The footnotes themselves need not be placed at the end of the
      document. They may appear anywhere except inside other block
      elements (lists, block quotes, tables, etc.).
    </para>
    <para>
      <emphasis role="strong">Extension:
      <literal>inline_notes</literal></emphasis>
    </para>
    <para>
      Inline footnotes are also allowed (though, unlike regular notes,
      they cannot contain multiple paragraphs). The syntax is as
      follows:
    </para>
    <programlisting>
Here is an inline note.^[Inlines notes are easier to write, since
you don't have to pick an identifier and move down to type the
note.]
</programlisting>
    <para>
      Inline and regular footnotes may be mixed freely.
    </para>
  </sect2>
  <sect2 id="citations">
    <title>Citations</title>
    <para>
      <emphasis role="strong">Extension:
      <literal>citations</literal></emphasis>
    </para>
    <para>
      Pandoc can automatically generate citations and a bibliography in
      a number of styles (using Andrea Rossato’s
      <literal>hs-citeproc</literal>). In order to use this feature, you
      will need a bibliographic database in one of the following
      formats:
    </para>
    <informaltable>
      <tgroup cols="2">
        <colspec align="left" />
        <colspec align="left" />
        <thead>
          <row>
            <entry>
              Format
            </entry>
            <entry>
              File extension
            </entry>
          </row>
        </thead>
        <tbody>
          <row>
            <entry>
              MODS
            </entry>
            <entry>
              .mods
            </entry>
          </row>
          <row>
            <entry>
              BibLaTeX
            </entry>
            <entry>
              .bib
            </entry>
          </row>
          <row>
            <entry>
              BibTeX
            </entry>
            <entry>
              .bibtex
            </entry>
          </row>
          <row>
            <entry>
              RIS
            </entry>
            <entry>
              .ris
            </entry>
          </row>
          <row>
            <entry>
              EndNote
            </entry>
            <entry>
              .enl
            </entry>
          </row>
          <row>
            <entry>
              EndNote XML
            </entry>
            <entry>
              .xml
            </entry>
          </row>
          <row>
            <entry>
              ISI
            </entry>
            <entry>
              .wos
            </entry>
          </row>
          <row>
            <entry>
              MEDLINE
            </entry>
            <entry>
              .medline
            </entry>
          </row>
          <row>
            <entry>
              Copac
            </entry>
            <entry>
              .copac
            </entry>
          </row>
          <row>
            <entry>
              JSON citeproc
            </entry>
            <entry>
              .json
            </entry>
          </row>
        </tbody>
      </tgroup>
    </informaltable>
    <para>
      Note that <literal>.bib</literal> can generally be used with both
      BibTeX and BibLaTeX files, but you can use
      <literal>.bibtex</literal> to force BibTeX.
    </para>
    <para>
      You will need to specify the bibliography file using the
      <literal>--bibliography</literal> command-line option (which may
      be repeated if you have several bibliographies).
    </para>
    <para>
      By default, pandoc will use a Chicago author-date format for
      citations and references. To use another style, you will need to
      use the <literal>--csl</literal> option to specify a
      <ulink url="http://CitationStyles.org">CSL</ulink> 1.0 style file.
      A primer on creating and modifying CSL styles can be found at
      <ulink url="http://citationstyles.org/downloads/primer.html">http://citationstyles.org/downloads/primer.html</ulink>.
      A repository of CSL styles can be found at
      <ulink url="https://github.com/citation-style-language/styles">https://github.com/citation-style-language/styles</ulink>.
      See also
      <ulink url="http://zotero.org/styles">http://zotero.org/styles</ulink>
      for easy browsing.
    </para>
    <para>
      Citations go inside square brackets and are separated by
      semicolons. Each citation must have a key, composed of
      <quote>@</quote> + the citation identifier from the database, and
      may optionally have a prefix, a locator, and a suffix. Here are
      some examples:
    </para>
    <programlisting>
Blah blah [see @doe99, pp. 33-35; also @smith04, ch. 1].

Blah blah [@doe99, pp. 33-35, 38-39 and *passim*].

Blah blah [@smith04; @doe99].
</programlisting>
    <para>
      A minus sign (<literal>-</literal>) before the
      <literal>@</literal> will suppress mention of the author in the
      citation. This can be useful when the author is already mentioned
      in the text:
    </para>
    <programlisting>
Smith says blah [-@smith04].
</programlisting>
    <para>
      You can also write an in-text citation, as follows:
    </para>
    <programlisting>
@smith04 says blah.

@smith04 [p. 33] says blah.
</programlisting>
    <para>
      If the style calls for a list of works cited, it will be placed at
      the end of the document. Normally, you will want to end your
      document with an appropriate header:
    </para>
    <programlisting>
last paragraph...

# References
</programlisting>
    <para>
      The bibliography will be inserted after this header.
    </para>
  </sect2>
</sect1>
<sect1 id="non-pandoc-extensions">
  <title>Non-pandoc extensions</title>
  <para>
    The following markdown syntax extensions are not enabled by default
    in pandoc, but may be enabled by adding
    <literal>+EXTENSION</literal> to the format name, where
    <literal>EXTENSION</literal> is the name of the extension. Thus, for
    example, <literal>markdown+hard_line_breaks</literal> is markdown
    with hard line breaks.
  </para>
  <para>
    <emphasis role="strong">Extension:
    <literal>hard_line_breaks</literal></emphasis><literallayout>
</literallayout>Causes all newlines within a paragraph to be interpreted
    as hard line breaks instead of spaces.
  </para>
  <para>
    <emphasis role="strong">Extension:
    <literal>tex_math_single_backslash</literal></emphasis><literallayout>
</literallayout>Causes anything between <literal>\(</literal> and
    <literal>\)</literal> to be interpreted as inline TeX math, and
    anything between <literal>\[</literal> and <literal>\]</literal> to
    be interpreted as display TeX math. Note: a drawback of this
    extension is that it precludes escaping <literal>(</literal> and
    <literal>[</literal>.
  </para>
  <para>
    <emphasis role="strong">Extension:
    <literal>tex_math_double_backslash</literal></emphasis><literallayout>
</literallayout>Causes anything between <literal>\\(</literal> and
    <literal>\\)</literal> to be interpreted as inline TeX math, and
    anything between <literal>\\[</literal> and <literal>\\]</literal>
    to be interpreted as display TeX math.
  </para>
  <para>
    <emphasis role="strong">Extension:
    <literal>markdown_attribute</literal></emphasis><literallayout>
</literallayout>By default, pandoc interprets material inside
    block-level tags as markdown. This extension changes the behavior so
    that markdown is only parsed inside block-level tags if the tags
    have the attribute <literal>markdown=1</literal>.
  </para>
  <para>
    <emphasis role="strong">Extension:
    <literal>mmd_title_block</literal></emphasis><literallayout>
</literallayout>Enables a
    <ulink url="http://fletcherpenney.net/multimarkdown/">MultiMarkdown</ulink>
    style title block at the top of the document, for example:
  </para>
  <programlisting>
Title:   My title
Author:  John Doe
Date:    September 1, 2008
Comment: This is a sample mmd title block, with
         a field spanning multiple lines.
</programlisting>
  <para>
    See the MultiMarkdown documentation for details. Note that only
    title, author, and date are recognized; other fields are simply
    ignored by pandoc. If <literal>pandoc_title_block</literal> is
    enabled, it will take precedence over
    <literal>mmd_title_block</literal>.
  </para>
  <para>
    <emphasis role="strong">Extension:
    <literal>abbrevations</literal></emphasis><literallayout>
</literallayout>Parses PHP Markdown Extra abbreviation keys, like
  </para>
  <programlisting>
*[HTML]: Hyper Text Markup Language
</programlisting>
  <para>
    Note that the pandoc document model does not support abbreviations,
    so if this extension is enabled, abbreviation keys are simply
    skipped (as opposed to being parsed as paragraphs).
  </para>
  <para>
    <emphasis role="strong">Extension:
    <literal>autolink_bare_uris</literal></emphasis><literallayout>
</literallayout>Makes all absolute URIs into links, even when not
    surrounded by pointy braces <literal>&lt;...&gt;</literal>.
  </para>
  <para>
    <emphasis role="strong">Extension:
    <literal>link_attributes</literal></emphasis><literallayout>
</literallayout>Parses multimarkdown style key-value attributes on link
    and image references. Note that pandoc’s internal document model
    provides nowhere to put these, so they are presently just ignored.
  </para>
  <para>
    <emphasis role="strong">Extension:
    <literal>mmd_header_identifiers</literal></emphasis><literallayout>
</literallayout>Parses multimarkdown style header identifiers (in square
    brackets, after the header but before any trailing
    <literal>#</literal>s in an ATX header).
  </para>
</sect1>
<sect1 id="producing-slide-shows-with-pandoc">
  <title>Producing slide shows with Pandoc</title>
  <para>
    You can use Pandoc to produce an HTML + javascript slide
    presentation that can be viewed via a web browser. There are four
    ways to do this, using
    <ulink url="http://meyerweb.com/eric/tools/s5/">S5</ulink>,
    <ulink url="http://paulrouget.com/dzslides/">DZSlides</ulink>,
    <ulink url="http://www.w3.org/Talks/Tools/Slidy/">Slidy</ulink>, or
    <ulink url="http://goessner.net/articles/slideous/">Slideous</ulink>.
    You can also produce a PDF slide show using LaTeX
    <ulink url="http://www.tex.ac.uk/CTAN/macros/latex/contrib/beamer">beamer</ulink>.
  </para>
  <para>
    Here’s the markdown source for a simple slide show,
    <literal>habits.txt</literal>:
  </para>
  <programlisting>
% Habits
% John Doe
% March 22, 2005

# In the morning

## Getting up

- Turn off alarm
- Get out of bed

## Breakfast

- Eat eggs
- Drink coffee

# In the evening

## Dinner

- Eat spaghetti
- Drink wine

------------------

![picture of spaghetti](images/spaghetti.jpg)

## Going to sleep

- Get in bed
- Count sheep
</programlisting>
  <para>
    To produce the slide show, simply type
  </para>
  <programlisting>
pandoc -t s5 -s habits.txt -o habits.html
</programlisting>
  <para>
    for S5,
  </para>
  <programlisting>
pandoc -t slidy -s habits.txt -o habits.html
</programlisting>
  <para>
    for Slidy,
  </para>
  <programlisting>
pandoc -t slideous -s habits.txt -o habits.html
</programlisting>
  <para>
    for Slideous,
  </para>
  <programlisting>
pandoc -t dzslides -s habits.txt -o habits.html
</programlisting>
  <para>
    for DZSlides, or
  </para>
  <programlisting>
pandoc -t beamer habits.txt -o habits.pdf
</programlisting>
  <para>
    for beamer.
  </para>
  <para>
    With all HTML slide formats, the <literal>--self-contained</literal>
    option can be used to produce a single file that contains all of the
    data necessary to display the slide show, including linked scripts,
    stylesheets, images, and videos.
  </para>
  <sect2 id="structuring-the-slide-show">
    <title>Structuring the slide show</title>
    <para>
      By default, the <emphasis>slide level</emphasis> is the highest
      header level in the hierarchy that is followed immediately by
      content, and not another header, somewhere in the document. In the
      example above, level 1 headers are always followed by level 2
      headers, which are followed by content, so 2 is the slide level.
      This default can be overridden using the
      <literal>--slide-level</literal> option.
    </para>
    <para>
      The document is carved up into slides according to the following
      rules:
    </para>
    <itemizedlist>
      <listitem>
        <para>
          A horizontal rule always starts a new slide.
        </para>
      </listitem>
      <listitem>
        <para>
          A header at the slide level always starts a new slide.
        </para>
      </listitem>
      <listitem>
        <para>
          Headers <emphasis>below</emphasis> the slide level in the
          hierarchy create headers <emphasis>within</emphasis> a slide.
        </para>
      </listitem>
      <listitem>
        <para>
          Headers <emphasis>above</emphasis> the slide level in the
          hierarchy create <quote>title slides,</quote> which just
          contain the section title and help to break the slide show
          into sections.
        </para>
      </listitem>
      <listitem>
        <para>
          A title page is constructed automatically from the document’s
          title block, if present. (In the case of beamer, this can be
          disabled by commenting out some lines in the default
          template.)
        </para>
      </listitem>
    </itemizedlist>
    <para>
      These rules are designed to support many different styles of slide
      show. If you don’t care about structuring your slides into
      sections and subsections, you can just use level 1 headers for all
      each slide. (In that case, level 1 will be the slide level.) But
      you can also structure the slide show into sections, as in the
      example above.
    </para>
    <para>
      For Slidy, Slideous and S5, the file produced by pandoc with the
      <literal>-s/--standalone</literal> option embeds a link to
      javascripts and CSS files, which are assumed to be available at
      the relative path <literal>s5/default</literal> (for S5) or
      <literal>slideous</literal> (for Slideous), or at the Slidy
      website at <literal>w3.org</literal> (for Slidy). (These paths can
      be changed by setting the <literal>slidy-url</literal>,
      <literal>slideous-url</literal> or <literal>s5-url</literal>
      variables; see <literal>--variable</literal>, above.) For
      DZSlides, the (relatively short) javascript and css are included
      in the file by default.
    </para>
  </sect2>
  <sect2 id="incremental-lists">
    <title>Incremental lists</title>
    <para>
      By default, these writers produces lists that display <quote>all
      at once.</quote> If you want your lists to display incrementally
      (one item at a time), use the <literal>-i</literal> option. If you
      want a particular list to depart from the default (that is, to
      display incrementally without the <literal>-i</literal> option and
      all at once with the <literal>-i</literal> option), put it in a
      block quote:
    </para>
    <programlisting>
&gt; - Eat spaghetti
&gt; - Drink wine
</programlisting>
    <para>
      In this way incremental and nonincremental lists can be mixed in a
      single document.
    </para>
  </sect2>
  <sect2 id="styling-the-slides">
    <title>Styling the slides</title>
    <para>
      You can change the style of HTML slides by putting customized CSS
      files in <literal>$DATADIR/s5/default</literal> (for S5),
      <literal>$DATADIR/slidy</literal> (for Slidy), or
      <literal>$DATADIR/slideous</literal> (for Slideous), where
      <literal>$DATADIR</literal> is the user data directory (see
      <literal>--data-dir</literal>, above). The originals may be found
      in pandoc’s system data directory (generally
      <literal>$CABALDIR/pandoc-VERSION/s5/default</literal>). Pandoc
      will look there for any files it does not find in the user data
      directory.
    </para>
    <para>
      For dzslides, the CSS is included in the HTML file itself, and may
      be modified there.
    </para>
    <para>
      To style beamer slides, you can specify a beamer
      <quote>theme</quote> or <quote>colortheme</quote> using the
      <literal>-V</literal> option:
    </para>
    <programlisting>
pandoc -t beamer habits.txt -V theme:Warsaw -o habits.pdf
</programlisting>
  </sect2>
</sect1>
<sect1 id="literate-haskell-support">
  <title>Literate Haskell support</title>
  <para>
    If you append <literal>+lhs</literal> (or
    <literal>+literate_haskell</literal>) to an appropriate input or
    output format (<literal>markdown</literal>,
    <literal>mardkown_strict</literal>, <literal>rst</literal>, or
    <literal>latex</literal> for input or output;
    <literal>beamer</literal>, <literal>html</literal> or
    <literal>html5</literal> for output only), pandoc will treat the
    document as literate Haskell source. This means that
  </para>
  <itemizedlist>
    <listitem>
      <para>
        In markdown input, <quote>bird track</quote> sections will be
        parsed as Haskell code rather than block quotations. Text
        between <literal>\begin{code}</literal> and
        <literal>\end{code}</literal> will also be treated as Haskell
        code.
      </para>
    </listitem>
    <listitem>
      <para>
        In markdown output, code blocks with classes
        <literal>haskell</literal> and <literal>literate</literal> will
        be rendered using bird tracks, and block quotations will be
        indented one space, so they will not be treated as Haskell code.
        In addition, headers will be rendered setext-style (with
        underlines) rather than atx-style (with <quote>#</quote>
        characters). (This is because ghc treats <quote>#</quote>
        characters in column 1 as introducing line numbers.)
      </para>
    </listitem>
    <listitem>
      <para>
        In restructured text input, <quote>bird track</quote> sections
        will be parsed as Haskell code.
      </para>
    </listitem>
    <listitem>
      <para>
        In restructured text output, code blocks with class
        <literal>haskell</literal> will be rendered using bird tracks.
      </para>
    </listitem>
    <listitem>
      <para>
        In LaTeX input, text in <literal>code</literal> environments
        will be parsed as Haskell code.
      </para>
    </listitem>
    <listitem>
      <para>
        In LaTeX output, code blocks with class
        <literal>haskell</literal> will be rendered inside
        <literal>code</literal> environments.
      </para>
    </listitem>
    <listitem>
      <para>
        In HTML output, code blocks with class
        <literal>haskell</literal> will be rendered with class
        <literal>literatehaskell</literal> and bird tracks.
      </para>
    </listitem>
  </itemizedlist>
  <para>
    Examples:
  </para>
  <programlisting>
pandoc -f markdown+lhs -t html
</programlisting>
  <para>
    reads literate Haskell source formatted with markdown conventions
    and writes ordinary HTML (without bird tracks).
  </para>
  <programlisting>
pandoc -f markdown+lhs -t html+lhs
</programlisting>
  <para>
    writes HTML with the Haskell code in bird tracks, so it can be
    copied and pasted as literate Haskell source.
  </para>
</sect1>
<sect1 id="authors">
  <title>Authors</title>
  <para>
    © 2006-2013 John MacFarlane (jgm at berkeley dot edu). Released
    under the
    <ulink url="http://www.gnu.org/copyleft/gpl.html">GPL</ulink>,
    version 2 or greater. This software carries no warranty of any kind.
    (See COPYRIGHT for full copyright and warranty notices.) Other
    contributors include Recai Oktaş, Paulo Tanimoto, Peter Wang, Andrea
    Rossato, Eric Kow, infinity0x, Luke Plant, shreevatsa.public,
    Puneeth Chaganti, Paul Rivier, rodja.trappe, Bradley Kuhn, thsutton,
    Nathan Gass, Jonathan Daugherty, Jérémy Bobbio, Justin Bogner,
    qerub, Christopher Sawicki, Kelsey Hightower, Masayoshi Takahashi,
    Antoine Latter, Ralf Stephan, Eric Seidel, B. Scott Michel, Gavin
    Beatty, Sergey Astanin, Arlo O’Keeffe, Denis Laxalde, Brent Yorgey.
  </para>
</sect1>
</article>
