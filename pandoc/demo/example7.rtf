{\rtf1\ansi\deff0{\fonttbl{\f0 \fswiss Helvetica;}{\f1 Courier;}}
{\colortbl;\red255\green0\blue0;\red0\green0\blue255;}
\widowctrl\hyphauto

{\pard \qc \f0 \sa180 \li0 \fi0 \b \fs36 Pandoc User's Guide\par}
{\pard \qc \f0 \sa180 \li0 \fi0  John MacFarlane\par}
{\pard \qc \f0 \sa180 \li0 \fi0  January 19, 2013\par}
{\pard \ql \f0 \sa180 \li0 \fi0 \par}
{\pard \ql \f0 \sa180 \li0 \fi0 \b \fs36 Synopsis\par}
{\pard \ql \f0 \sa180 \li0 \fi0 pandoc [{\i options}][*input-file*]...\par}
{\pard \ql \f0 \sa180 \li0 \fi0 \b \fs36 Description\par}
{\pard \ql \f0 \sa180 \li0 \fi0 Pandoc is a {\field{\*\fldinst{HYPERLINK "http://www.haskell.org/"}}{\fldrslt{\ul
Haskell
}}}
 library for converting from one markup format to another, and a command-line tool that uses this library. It can read {\field{\*\fldinst{HYPERLINK "http://daringfireball.net/projects/markdown/"}}{\fldrslt{\ul
markdown
}}}
 and (subsets of) {\field{\*\fldinst{HYPERLINK "http://redcloth.org/textile"}}{\fldrslt{\ul
Textile
}}}
, {\field{\*\fldinst{HYPERLINK "http://docutils.sourceforge.net/docs/ref/rst/introduction.html"}}{\fldrslt{\ul
reStructuredText
}}}
, {\field{\*\fldinst{HYPERLINK "http://www.w3.org/TR/html40/"}}{\fldrslt{\ul
HTML
}}}
, {\field{\*\fldinst{HYPERLINK "http://www.latex-project.org/"}}{\fldrslt{\ul
LaTeX
}}}
, {\field{\*\fldinst{HYPERLINK "http://www.mediawiki.org/wiki/Help:Formatting"}}{\fldrslt{\ul
MediaWiki markup
}}}
, and {\field{\*\fldinst{HYPERLINK "http://www.docbook.org/"}}{\fldrslt{\ul
DocBook XML
}}}
; and it can write plain text, {\field{\*\fldinst{HYPERLINK "http://daringfireball.net/projects/markdown/"}}{\fldrslt{\ul
markdown
}}}
, {\field{\*\fldinst{HYPERLINK "http://docutils.sourceforge.net/docs/ref/rst/introduction.html"}}{\fldrslt{\ul
reStructuredText
}}}
, {\field{\*\fldinst{HYPERLINK "http://www.w3.org/TR/xhtml1/"}}{\fldrslt{\ul
XHTML
}}}
, {\field{\*\fldinst{HYPERLINK "http://www.w3.org/TR/html5/"}}{\fldrslt{\ul
HTML 5
}}}
, {\field{\*\fldinst{HYPERLINK "http://www.latex-project.org/"}}{\fldrslt{\ul
LaTeX
}}}
 (including {\field{\*\fldinst{HYPERLINK "http://www.tex.ac.uk/CTAN/macros/latex/contrib/beamer"}}{\fldrslt{\ul
beamer
}}}
 slide shows), {\field{\*\fldinst{HYPERLINK "http://www.pragma-ade.nl/"}}{\fldrslt{\ul
ConTeXt
}}}
, {\field{\*\fldinst{HYPERLINK "http://en.wikipedia.org/wiki/Rich_Text_Format"}}{\fldrslt{\ul
RTF
}}}
, {\field{\*\fldinst{HYPERLINK "http://www.docbook.org/"}}{\fldrslt{\ul
DocBook XML
}}}
, {\field{\*\fldinst{HYPERLINK "http://opendocument.xml.org/"}}{\fldrslt{\ul
OpenDocument XML
}}}
, {\field{\*\fldinst{HYPERLINK "http://en.wikipedia.org/wiki/OpenDocument"}}{\fldrslt{\ul
ODT
}}}
, {\field{\*\fldinst{HYPERLINK "http://www.microsoft.com/interop/openup/openxml/default.aspx"}}{\fldrslt{\ul
Word docx
}}}
, {\field{\*\fldinst{HYPERLINK "http://www.gnu.org/software/texinfo/"}}{\fldrslt{\ul
GNU Texinfo
}}}
, {\field{\*\fldinst{HYPERLINK "http://www.mediawiki.org/wiki/Help:Formatting"}}{\fldrslt{\ul
MediaWiki markup
}}}
, {\field{\*\fldinst{HYPERLINK "http://www.idpf.org/"}}{\fldrslt{\ul
EPUB
}}}
 (v2 or v3), {\field{\*\fldinst{HYPERLINK "http://www.fictionbook.org/index.php/Eng:XML_Schema_Fictionbook_2.1"}}{\fldrslt{\ul
FictionBook2
}}}
, {\field{\*\fldinst{HYPERLINK "http://redcloth.org/textile"}}{\fldrslt{\ul
Textile
}}}
, {\field{\*\fldinst{HYPERLINK "http://developer.apple.com/DOCUMENTATION/Darwin/Reference/ManPages/man7/groff_man.7.html"}}{\fldrslt{\ul
groff man
}}}
 pages, {\field{\*\fldinst{HYPERLINK "http://orgmode.org"}}{\fldrslt{\ul
Emacs Org-Mode
}}}
, {\field{\*\fldinst{HYPERLINK "http://www.methods.co.nz/asciidoc/"}}{\fldrslt{\ul
AsciiDoc
}}}
, and {\field{\*\fldinst{HYPERLINK "http://www.w3.org/Talks/Tools/Slidy/"}}{\fldrslt{\ul
Slidy
}}}
, {\field{\*\fldinst{HYPERLINK "http://goessner.net/articles/slideous/"}}{\fldrslt{\ul
Slideous
}}}
, {\field{\*\fldinst{HYPERLINK "http://paulrouget.com/dzslides/"}}{\fldrslt{\ul
DZSlides
}}}
, or {\field{\*\fldinst{HYPERLINK "http://meyerweb.com/eric/tools/s5/"}}{\fldrslt{\ul
S5
}}}
 HTML slide shows. It can also produce {\field{\*\fldinst{HYPERLINK "http://www.adobe.com/pdf/"}}{\fldrslt{\ul
PDF
}}}
 output on systems where LaTeX is installed.\par}
{\pard \ql \f0 \sa180 \li0 \fi0 Pandoc's enhanced version of markdown includes syntax for footnotes, tables, flexible ordered lists, definition lists, fenced code blocks, superscript, subscript, strikeout, title blocks, automatic tables of contents, embedded LaTeX math, citations, and markdown inside HTML block elements. (These enhancements, described below under {\field{\*\fldinst{HYPERLINK "#pandocs-markdown"}}{\fldrslt{\ul
Pandoc's markdown
}}}
, can be disabled using the {\f1 markdown_strict} input or output format.)\par}
{\pard \ql \f0 \sa180 \li0 \fi0 In contrast to most existing tools for converting markdown to HTML, which use regex substitutions, Pandoc has a modular design: it consists of a set of readers, which parse text in a given format and produce a native representation of the document, and a set of writers, which convert this native representation into a target format. Thus, adding an input or output format requires only adding a reader or writer.\par}
{\pard \ql \f0 \sa180 \li0 \fi0 \b \fs32 Using {\f1 pandoc}\par}
{\pard \ql \f0 \sa180 \li0 \fi0 If no {\i input-file} is specified, input is read from {\i stdin}. Otherwise, the {\i input-files} are concatenated (with a blank line between each) and used as input. Output goes to {\i stdout} by default (though output to {\i stdout} is disabled for the {\f1 odt}, {\f1 docx}, {\f1 epub}, and {\f1 epub3} output formats). For output to a file, use the {\f1 -o} option:\par}
{\pard \ql \f0 \sa180 \li0 \fi0 \f1 pandoc -o output.html input.txt\par}
{\pard \ql \f0 \sa180 \li0 \fi0 Instead of a file, an absolute URI may be given. In this case pandoc will fetch the content using HTTP:\par}
{\pard \ql \f0 \sa180 \li0 \fi0 \f1 pandoc -f html -t markdown http://www.fsf.org\par}
{\pard \ql \f0 \sa180 \li0 \fi0 If multiple input files are given, {\f1 pandoc} will concatenate them all (with blank lines between them) before parsing.\par}
{\pard \ql \f0 \sa180 \li0 \fi0 The format of the input and output can be specified explicitly using command-line options. The input format can be specified using the {\f1 -r/--read} or {\f1 -f/--from} options, the output format using the {\f1 -w/--write} or {\f1 -t/--to} options. Thus, to convert {\f1 hello.txt} from markdown to LaTeX, you could type:\par}
{\pard \ql \f0 \sa180 \li0 \fi0 \f1 pandoc -f markdown -t latex hello.txt\par}
{\pard \ql \f0 \sa180 \li0 \fi0 To convert {\f1 hello.html} from html to markdown:\par}
{\pard \ql \f0 \sa180 \li0 \fi0 \f1 pandoc -f html -t markdown hello.html\par}
{\pard \ql \f0 \sa180 \li0 \fi0 Supported output formats are listed below under the {\f1 -t/--to} option. Supported input formats are listed below under the {\f1 -f/--from} option. Note that the {\f1 rst}, {\f1 textile}, {\f1 latex}, and {\f1 html} readers are not complete; there are some constructs that they do not parse.\par}
{\pard \ql \f0 \sa180 \li0 \fi0 If the input or output format is not specified explicitly, {\f1 pandoc} will attempt to guess it from the extensions of the input and output filenames. Thus, for example,\par}
{\pard \ql \f0 \sa180 \li0 \fi0 \f1 pandoc -o hello.tex hello.txt\par}
{\pard \ql \f0 \sa180 \li0 \fi0 will convert {\f1 hello.txt} from markdown to LaTeX. If no output file is specified (so that output goes to {\i stdout}), or if the output file's extension is unknown, the output format will default to HTML. If no input file is specified (so that input comes from {\i stdin}), or if the input files' extensions are unknown, the input format will be assumed to be markdown unless explicitly specified.\par}
{\pard \ql \f0 \sa180 \li0 \fi0 Pandoc uses the UTF-8 character encoding for both input and output. If your local character encoding is not UTF-8, you should pipe input and output through {\f1 iconv}:\par}
{\pard \ql \f0 \sa180 \li0 \fi0 \f1 iconv -t utf-8 input.txt | pandoc | iconv -f utf-8\par}
{\pard \ql \f0 \sa180 \li0 \fi0 \b \fs32 Creating a PDF\par}
{\pard \ql \f0 \sa180 \li0 \fi0 Earlier versions of pandoc came with a program, {\f1 markdown2pdf}, that used pandoc and pdflatex to produce a PDF. This is no longer needed, since {\f1 pandoc} can now produce {\f1 pdf} output itself. To produce a PDF, simply specify an output file with a {\f1 .pdf} extension. Pandoc will create a latex file and use pdflatex (or another engine, see {\f1 --latex-engine}) to convert it to PDF:\par}
{\pard \ql \f0 \sa180 \li0 \fi0 \f1 pandoc test.txt -o test.pdf\par}
{\pard \ql \f0 \sa180 \li0 \fi0 Production of a PDF requires that a LaTeX engine be installed (see {\f1 --latex-engine}, below), and assumes that the following LaTeX packages are available: {\f1 amssymb}, {\f1 amsmath}, {\f1 ifxetex}, {\f1 ifluatex}, {\f1 listings} (if the {\f1 --listings} option is used), {\f1 fancyvrb}, {\f1 longtable}, {\f1 url}, {\f1 graphicx}, {\f1 hyperref}, {\f1 ulem}, {\f1 babel} (if the {\f1 lang} variable is set), {\f1 fontspec} (if {\f1 xelatex} or {\f1 lualatex} is used as the LaTeX engine), {\f1 xltxtra} and {\f1 xunicode} (if {\f1 xelatex} is used).\par}
{\pard \ql \f0 \sa180 \li0 \fi0 \b \fs32 {\f1 hsmarkdown}\par}
{\pard \ql \f0 \sa180 \li0 \fi0 A user who wants a drop-in replacement for {\f1 Markdown.pl} may create a symbolic link to the {\f1 pandoc} executable called {\f1 hsmarkdown}. When invoked under the name {\f1 hsmarkdown}, {\f1 pandoc} will behave as if invoked with {\f1 -f markdown_strict --email-obfuscation=references}, and all command-line options will be treated as regular arguments. However, this approach does not work under Cygwin, due to problems with its simulation of symbolic links.\par}
{\pard \ql \f0 \sa180 \li0 \fi0 \b \fs36 Options\par}
{\pard \ql \f0 \sa180 \li0 \fi0 \b \fs32 General options\par}
{\pard \ql \f0 \sa0 \li0 \fi0 {\f1 -f} {\i FORMAT}, {\f1 -r} {\i FORMAT}, {\f1 --from=}{\i FORMAT}, {\f1 --read=}{\i FORMAT}\par}
{\pard \ql \f0 \sa180 \li360 \fi0 Specify input format. {\i FORMAT} can be {\f1 native} (native Haskell), {\f1 json} (JSON version of native AST), {\f1 markdown} (pandoc's extended markdown), {\f1 markdown_strict} (original unextended markdown), {\f1 markdown_phpextra} (PHP Markdown Extra extended markdown), {\f1 markdown_github} (github extended markdown), {\f1 textile} (Textile), {\f1 rst} (reStructuredText), {\f1 html} (HTML), {\f1 docbook} (DocBook XML), {\f1 mediawiki} (MediaWiki markup), or {\f1 latex} (LaTeX). If {\f1 +lhs} is appended to {\f1 markdown}, {\f1 rst}, {\f1 latex}, the input will be treated as literate Haskell source: see {\field{\*\fldinst{HYPERLINK "#literate-haskell-support"}}{\fldrslt{\ul
Literate Haskell support
}}}
, below. Markdown syntax extensions can be individually enabled or disabled by appending {\f1 +EXTENSION} or {\f1 -EXTENSION} to the format name. So, for example, {\f1 markdown_strict+footnotes+definition_lists} is strict markdown with footnotes and definition lists enabled, and {\f1 markdown-pipe_tables+hard_line_breaks} is pandoc's markdown without pipe tables and with hard line breaks. See {\field{\*\fldinst{HYPERLINK "#pandocs-markdown"}}{\fldrslt{\ul
Pandoc's markdown
}}}
, below, for a list of extensions and their names.\par}
{\pard \ql \f0 \sa0 \li0 \fi0 {\f1 -t} {\i FORMAT}, {\f1 -w} {\i FORMAT}, {\f1 --to=}{\i FORMAT}, {\f1 --write=}{\i FORMAT}\par}
{\pard \ql \f0 \sa180 \li360 \fi0 Specify output format. {\i FORMAT} can be {\f1 native} (native Haskell), {\f1 json} (JSON version of native AST), {\f1 plain} (plain text), {\f1 markdown} (pandoc's extended markdown), {\f1 markdown_strict} (original unextended markdown), {\f1 markdown_phpextra} (PHP Markdown extra extended markdown), {\f1 markdown_github} (github extended markdown), {\f1 rst} (reStructuredText), {\f1 html} (XHTML 1), {\f1 html5} (HTML 5), {\f1 latex} (LaTeX), {\f1 beamer} (LaTeX beamer slide show), {\f1 context} (ConTeXt), {\f1 man} (groff man), {\f1 mediawiki} (MediaWiki markup), {\f1 textile} (Textile), {\f1 org} (Emacs Org-Mode), {\f1 texinfo} (GNU Texinfo), {\f1 docbook} (DocBook XML), {\f1 opendocument} (OpenDocument XML), {\f1 odt} (OpenOffice text document), {\f1 docx} (Word docx), {\f1 epub} (EPUB book), {\f1 epub3} (EPUB v3), {\f1 fb2} (FictionBook2 e-book), {\f1 asciidoc} (AsciiDoc), {\f1 slidy} (Slidy HTML and javascript slide show), {\f1 slideous} (Slideous HTML and javascript slide show), {\f1 dzslides} (HTML5 + javascript slide show), {\f1 s5} (S5 HTML and javascript slide show), or {\f1 rtf} (rich text format). Note that {\f1 odt}, {\f1 epub}, and {\f1 epub3} output will not be directed to {\i stdout}; an output filename must be specified using the {\f1 -o/--output} option. If {\f1 +lhs} is appended to {\f1 markdown}, {\f1 rst}, {\f1 latex}, {\f1 beamer}, {\f1 html}, or {\f1 html5}, the output will be rendered as literate Haskell source: see {\field{\*\fldinst{HYPERLINK "#literate-haskell-support"}}{\fldrslt{\ul
Literate Haskell support
}}}
, below. Markdown syntax extensions can be individually enabled or disabled by appending {\f1 +EXTENSION} or {\f1 -EXTENSION} to the format name, as described above under {\f1 -f}.\par}
{\pard \ql \f0 \sa0 \li0 \fi0 {\f1 -o} {\i FILE}, {\f1 --output=}{\i FILE}\par}
{\pard \ql \f0 \sa180 \li360 \fi0 Write output to {\i FILE} instead of {\i stdout}. If {\i FILE} is {\f1 -}, output will go to {\i stdout}. (Exception: if the output format is {\f1 odt}, {\f1 docx}, {\f1 epub}, or {\f1 epub3}, output to stdout is disabled.)\par}
{\pard \ql \f0 \sa0 \li0 \fi0 {\f1 --data-dir=}{\i DIRECTORY}\par}
{\pard \ql \f0 \sa180 \li360 \fi0 Specify the user data directory to search for pandoc data files. If this option is not specified, the default user data directory will be used. This is\par}
{\pard \ql \f0 \sa180 \li360 \fi0 \f1 $HOME/.pandoc\par}
{\pard \ql \f0 \sa180 \li360 \fi0 in unix,\par}
{\pard \ql \f0 \sa180 \li360 \fi0 \f1 C:\\Documents And Settings\\USERNAME\\Application Data\\pandoc\par}
{\pard \ql \f0 \sa180 \li360 \fi0 in Windows XP, and\par}
{\pard \ql \f0 \sa180 \li360 \fi0 \f1 C:\\Users\\USERNAME\\AppData\\Roaming\\pandoc\par}
{\pard \ql \f0 \sa180 \li360 \fi0 in Windows 7. (You can find the default user data directory on your system by looking at the output of {\f1 pandoc --version}.) A {\f1 reference.odt}, {\f1 reference.docx}, {\f1 default.csl}, {\f1 epub.css}, {\f1 templates}, {\f1 slidy}, {\f1 slideous}, or {\f1 s5} directory placed in this directory will override pandoc's normal defaults.\par}
{\pard \ql \f0 \sa0 \li0 \fi0 {\f1 -v}, {\f1 --version}\par}
{\pard \ql \f0 \sa180 \li360 \fi0 Print version.\par}
{\pard \ql \f0 \sa0 \li0 \fi0 {\f1 -h}, {\f1 --help}\par}
{\pard \ql \f0 \sa180 \li360 \fi0 Show usage message.\sa180\par}
{\pard \ql \f0 \sa180 \li0 \fi0 \b \fs32 Reader options\par}
{\pard \ql \f0 \sa0 \li0 \fi0 {\f1 -R}, {\f1 --parse-raw}\par}
{\pard \ql \f0 \sa180 \li360 \fi0 Parse untranslatable HTML codes and LaTeX environments as raw HTML or LaTeX, instead of ignoring them. Affects only HTML and LaTeX input. Raw HTML can be printed in markdown, reStructuredText, HTML, Slidy, Slideous, DZSlides, and S5 output; raw LaTeX can be printed in markdown, reStructuredText, LaTeX, and ConTeXt output. The default is for the readers to omit untranslatable HTML codes and LaTeX environments. (The LaTeX reader does pass through untranslatable LaTeX {\i commands}, even if {\f1 -R} is not specified.)\par}
{\pard \ql \f0 \sa0 \li0 \fi0 {\f1 -S}, {\f1 --smart}\par}
{\pard \ql \f0 \sa180 \li360 \fi0 Produce typographically correct output, converting straight quotes to curly quotes, {\f1 ---} to em-dashes, {\f1 --} to en-dashes, and {\f1 ...} to ellipses. Nonbreaking spaces are inserted after certain abbreviations, such as "Mr." (Note: This option is significant only when the input format is {\f1 markdown}, {\f1 markdown_strict}, or {\f1 textile}. It is selected automatically when the input format is {\f1 textile} or the output format is {\f1 latex} or {\f1 context}, unless {\f1 --no-tex-ligatures} is used.)\par}
{\pard \ql \f0 \sa0 \li0 \fi0 {\f1 --old-dashes}\par}
{\pard \ql \f0 \sa180 \li360 \fi0 Selects the pandoc <= 1.8.2.1 behavior for parsing smart dashes: {\f1 -} before a numeral is an en-dash, and {\f1 --} is an em-dash. This option is selected automatically for {\f1 textile} input.\par}
{\pard \ql \f0 \sa0 \li0 \fi0 {\f1 --base-header-level=}{\i NUMBER}\par}
{\pard \ql \f0 \sa180 \li360 \fi0 Specify the base level for headers (defaults to 1).\par}
{\pard \ql \f0 \sa0 \li0 \fi0 {\f1 --indented-code-classes=}{\i CLASSES}\par}
{\pard \ql \f0 \sa180 \li360 \fi0 Specify classes to use for indented code blocks--for example, {\f1 perl,numberLines} or {\f1 haskell}. Multiple classes may be separated by spaces or commas.\par}
{\pard \ql \f0 \sa0 \li0 \fi0 {\f1 --default-image-extension=}{\i EXTENSION}\par}
{\pard \ql \f0 \sa180 \li360 \fi0 Specify a default extension to use when image paths/URLs have no extension. This allows you to use the same source for formats that require different kinds of images. Currently this option only affects the markdown and LaTeX readers.\par}
{\pard \ql \f0 \sa0 \li0 \fi0 {\f1 --normalize}\par}
{\pard \ql \f0 \sa180 \li360 \fi0 Normalize the document after reading: merge adjacent {\f1 Str} or {\f1 Emph} elements, for example, and remove repeated {\f1 Space}s.\par}
{\pard \ql \f0 \sa0 \li0 \fi0 {\f1 -p}, {\f1 --preserve-tabs}\par}
{\pard \ql \f0 \sa180 \li360 \fi0 Preserve tabs instead of converting them to spaces (the default). Note that this will only affect tabs in literal code spans and code blocks; tabs in regular text will be treated as spaces.\par}
{\pard \ql \f0 \sa0 \li0 \fi0 {\f1 --tab-stop=}{\i NUMBER}\par}
{\pard \ql \f0 \sa180 \li360 \fi0 Specify the number of spaces per tab (default is 4).\sa180\par}
{\pard \ql \f0 \sa180 \li0 \fi0 \b \fs32 General writer options\par}
{\pard \ql \f0 \sa0 \li0 \fi0 {\f1 -s}, {\f1 --standalone}\par}
{\pard \ql \f0 \sa180 \li360 \fi0 Produce output with an appropriate header and footer (e.g. a standalone HTML, LaTeX, or RTF file, not a fragment). This option is set automatically for {\f1 pdf}, {\f1 epub}, {\f1 epub3}, {\f1 fb2}, {\f1 docx}, and {\f1 odt} output.\par}
{\pard \ql \f0 \sa0 \li0 \fi0 {\f1 --template=}{\i FILE}\par}
{\pard \ql \f0 \sa180 \li360 \fi0 Use {\i FILE} as a custom template for the generated document. Implies {\f1 --standalone}. See {\field{\*\fldinst{HYPERLINK "#templates"}}{\fldrslt{\ul
Templates
}}}
 below for a description of template syntax. If no extension is specified, an extension corresponding to the writer will be added, so that {\f1 --template=special} looks for {\f1 special.html} for HTML output. If the template is not found, pandoc will search for it in the user data directory (see {\f1 --data-dir}). If this option is not used, a default template appropriate for the output format will be used (see {\f1 -D/--print-default-template}).\par}
{\pard \ql \f0 \sa0 \li0 \fi0 {\f1 -V} {\i KEY[=VAL]}, {\f1 --variable=}{\i KEY[:VAL]}\par}
{\pard \ql \f0 \sa180 \li360 \fi0 Set the template variable {\i KEY} to the value {\i VAL} when rendering the document in standalone mode. This is generally only useful when the {\f1 --template} option is used to specify a custom template, since pandoc automatically sets the variables used in the default templates. If no {\i VAL} is specified, the key will be given the value {\f1 true}.\par}
{\pard \ql \f0 \sa0 \li0 \fi0 {\f1 -D} {\i FORMAT}, {\f1 --print-default-template=}{\i FORMAT}\par}
{\pard \ql \f0 \sa180 \li360 \fi0 Print the default template for an output {\i FORMAT}. (See {\f1 -t} for a list of possible {\i FORMAT}s.)\par}
{\pard \ql \f0 \sa0 \li0 \fi0 {\f1 --no-wrap}\par}
{\pard \ql \f0 \sa180 \li360 \fi0 Disable text wrapping in output. By default, text is wrapped appropriately for the output format.\par}
{\pard \ql \f0 \sa0 \li0 \fi0 {\f1 --columns}={\i NUMBER}\par}
{\pard \ql \f0 \sa180 \li360 \fi0 Specify length of lines in characters (for text wrapping).\par}
{\pard \ql \f0 \sa0 \li0 \fi0 {\f1 --toc}, {\f1 --table-of-contents}\par}
{\pard \ql \f0 \sa180 \li360 \fi0 Include an automatically generated table of contents (or, in the case of {\f1 latex}, {\f1 context}, and {\f1 rst}, an instruction to create one) in the output document. This option has no effect on {\f1 man}, {\f1 docbook}, {\f1 slidy}, {\f1 slideous}, or {\f1 s5} output.\par}
{\pard \ql \f0 \sa0 \li0 \fi0 {\f1 --toc-depth=}{\i NUMBER}\par}
{\pard \ql \f0 \sa180 \li360 \fi0 Specify the number of section levels to include in the table of contents. The default is 3 (which means that level 1, 2, and 3 headers will be listed in the contents). Implies {\f1 --toc}.\par}
{\pard \ql \f0 \sa0 \li0 \fi0 {\f1 --no-highlight}\par}
{\pard \ql \f0 \sa180 \li360 \fi0 Disables syntax highlighting for code blocks and inlines, even when a language attribute is given.\par}
{\pard \ql \f0 \sa0 \li0 \fi0 {\f1 --highlight-style}={\i STYLE}\par}
{\pard \ql \f0 \sa180 \li360 \fi0 Specifies the coloring style to be used in highlighted source code. Options are {\f1 pygments} (the default), {\f1 kate}, {\f1 monochrome}, {\f1 espresso}, {\f1 zenburn}, {\f1 haddock}, and {\f1 tango}.\par}
{\pard \ql \f0 \sa0 \li0 \fi0 {\f1 -H} {\i FILE}, {\f1 --include-in-header=}{\i FILE}\par}
{\pard \ql \f0 \sa180 \li360 \fi0 Include contents of {\i FILE}, verbatim, at the end of the header. This can be used, for example, to include special CSS or javascript in HTML documents. This option can be used repeatedly to include multiple files in the header. They will be included in the order specified. Implies {\f1 --standalone}.\par}
{\pard \ql \f0 \sa0 \li0 \fi0 {\f1 -B} {\i FILE}, {\f1 --include-before-body=}{\i FILE}\par}
{\pard \ql \f0 \sa180 \li360 \fi0 Include contents of {\i FILE}, verbatim, at the beginning of the document body (e.g. after the {\f1 <body>} tag in HTML, or the {\f1 \\begin\{document\}} command in LaTeX). This can be used to include navigation bars or banners in HTML documents. This option can be used repeatedly to include multiple files. They will be included in the order specified. Implies {\f1 --standalone}.\par}
{\pard \ql \f0 \sa0 \li0 \fi0 {\f1 -A} {\i FILE}, {\f1 --include-after-body=}{\i FILE}\par}
{\pard \ql \f0 \sa180 \li360 \fi0 Include contents of {\i FILE}, verbatim, at the end of the document body (before the {\f1 </body>} tag in HTML, or the {\f1 \\end\{document\}} command in LaTeX). This option can be be used repeatedly to include multiple files. They will be included in the order specified. Implies {\f1 --standalone}.\sa180\par}
{\pard \ql \f0 \sa180 \li0 \fi0 \b \fs32 Options affecting specific writers\par}
{\pard \ql \f0 \sa0 \li0 \fi0 {\f1 --self-contained}\par}
{\pard \ql \f0 \sa180 \li360 \fi0 Produce a standalone HTML file with no external dependencies, using {\f1 data:} URIs to incorporate the contents of linked scripts, stylesheets, images, and videos. The resulting file should be "self-contained," in the sense that it needs no external files and no net access to be displayed properly by a browser. This option works only with HTML output formats, including {\f1 html}, {\f1 html5}, {\f1 html+lhs}, {\f1 html5+lhs}, {\f1 s5}, {\f1 slidy}, {\f1 slideous}, and {\f1 dzslides}. Scripts, images, and stylesheets at absolute URLs will be downloaded; those at relative URLs will be sought first relative to the working directory, then relative to the user data directory (see {\f1 --data-dir}), and finally relative to pandoc's default data directory.\par}
{\pard \ql \f0 \sa0 \li0 \fi0 {\f1 --offline}\par}
{\pard \ql \f0 \sa180 \li360 \fi0 Deprecated synonym for {\f1 --self-contained}.\par}
{\pard \ql \f0 \sa0 \li0 \fi0 {\f1 -5}, {\f1 --html5}\par}
{\pard \ql \f0 \sa180 \li360 \fi0 Produce HTML5 instead of HTML4. This option has no effect for writers other than {\f1 html}. ({\i Deprecated:} Use the {\f1 html5} output format instead.)\par}
{\pard \ql \f0 \sa0 \li0 \fi0 {\f1 --html-q-tags}\par}
{\pard \ql \f0 \sa180 \li360 \fi0 Use {\f1 <q>} tags for quotes in HTML.\par}
{\pard \ql \f0 \sa0 \li0 \fi0 {\f1 --ascii}\par}
{\pard \ql \f0 \sa180 \li360 \fi0 Use only ascii characters in output. Currently supported only for HTML output (which uses numerical entities instead of UTF-8 when this option is selected).\par}
{\pard \ql \f0 \sa0 \li0 \fi0 {\f1 --reference-links}\par}
{\pard \ql \f0 \sa180 \li360 \fi0 Use reference-style links, rather than inline links, in writing markdown or reStructuredText. By default inline links are used.\par}
{\pard \ql \f0 \sa0 \li0 \fi0 {\f1 --atx-headers}\par}
{\pard \ql \f0 \sa180 \li360 \fi0 Use ATX style headers in markdown output. The default is to use setext-style headers for levels 1-2, and then ATX headers.\par}
{\pard \ql \f0 \sa0 \li0 \fi0 {\f1 --chapters}\par}
{\pard \ql \f0 \sa180 \li360 \fi0 Treat top-level headers as chapters in LaTeX, ConTeXt, and DocBook output. When the LaTeX template uses the report, book, or memoir class, this option is implied. If {\f1 --beamer} is used, top-level headers will become {\f1 \\part\{..\}}.\par}
{\pard \ql \f0 \sa0 \li0 \fi0 {\f1 -N}, {\f1 --number-sections}\par}
{\pard \ql \f0 \sa180 \li360 \fi0 Number section headings in LaTeX, ConTeXt, HTML, or EPUB output. By default, sections are not numbered. Sections with class {\f1 unnumbered} will never be numbered, even if {\f1 --number-sections} is specified.\par}
{\pard \ql \f0 \sa0 \li0 \fi0 {\f1 --number-offset}={\i NUMBER[,NUMBER,...]},\par}
{\pard \ql \f0 \sa180 \li360 \fi0 Offset for section headings in HTML output (ignored in other output formats). The first number is added to the section number for top-level headers, the second for second-level headers, and so on. So, for example, if you want the first top-level header in your document to be numbered "6", specify {\f1 --number-offset=5}. If your document starts with a level-2 header which you want to be numbered "1.5", specify {\f1 --number-offset=1,4}. Offsets are 0 by default. Implies {\f1 --number-sections}.\par}
{\pard \ql \f0 \sa0 \li0 \fi0 {\f1 --no-tex-ligatures}\par}
{\pard \ql \f0 \sa180 \li360 \fi0 Do not convert quotation marks, apostrophes, and dashes to the TeX ligatures when writing LaTeX or ConTeXt. Instead, just use literal unicode characters. This is needed for using advanced OpenType features with XeLaTeX and LuaLaTeX. Note: normally {\f1 --smart} is selected automatically for LaTeX and ConTeXt output, but it must be specified explicitly if {\f1 --no-tex-ligatures} is selected. If you use literal curly quotes, dashes, and ellipses in your source, then you may want to use {\f1 --no-tex-ligatures} without {\f1 --smart}.\par}
{\pard \ql \f0 \sa0 \li0 \fi0 {\f1 --listings}\par}
{\pard \ql \f0 \sa180 \li360 \fi0 Use listings package for LaTeX code blocks\par}
{\pard \ql \f0 \sa0 \li0 \fi0 {\f1 -i}, {\f1 --incremental}\par}
{\pard \ql \f0 \sa180 \li360 \fi0 Make list items in slide shows display incrementally (one by one). The default is for lists to be displayed all at once.\par}
{\pard \ql \f0 \sa0 \li0 \fi0 {\f1 --slide-level}={\i NUMBER}\par}
{\pard \ql \f0 \sa180 \li360 \fi0 Specifies that headers with the specified level create slides (for {\f1 beamer}, {\f1 s5}, {\f1 slidy}, {\f1 slideous}, {\f1 dzslides}). Headers above this level in the hierarchy are used to divide the slide show into sections; headers below this level create subheads within a slide. The default is to set the slide level based on the contents of the document; see {\field{\*\fldinst{HYPERLINK "#structuring-the-slide-show"}}{\fldrslt{\ul
Structuring the slide show
}}}
, below.\par}
{\pard \ql \f0 \sa0 \li0 \fi0 {\f1 --section-divs}\par}
{\pard \ql \f0 \sa180 \li360 \fi0 Wrap sections in {\f1 <div>} tags (or {\f1 <section>} tags in HTML5), and attach identifiers to the enclosing {\f1 <div>} (or {\f1 <section>}) rather than the header itself. See {\field{\*\fldinst{HYPERLINK "#header-identifiers-in-html-latex-and-context"}}{\fldrslt{\ul
Section identifiers
}}}
, below.\par}
{\pard \ql \f0 \sa0 \li0 \fi0 {\f1 --email-obfuscation=}{\i none|javascript|references}\par}
{\pard \ql \f0 \sa180 \li360 \fi0 Specify a method for obfuscating {\f1 mailto:} links in HTML documents. {\i none} leaves {\f1 mailto:} links as they are. {\i javascript} obfuscates them using javascript. {\i references} obfuscates them by printing their letters as decimal or hexadecimal character references.\par}
{\pard \ql \f0 \sa0 \li0 \fi0 {\f1 --id-prefix}={\i STRING}\par}
{\pard \ql \f0 \sa180 \li360 \fi0 Specify a prefix to be added to all automatically generated identifiers in HTML and DocBook output, and to footnote numbers in markdown output. This is useful for preventing duplicate identifiers when generating fragments to be included in other pages.\par}
{\pard \ql \f0 \sa0 \li0 \fi0 {\f1 -T} {\i STRING}, {\f1 --title-prefix=}{\i STRING}\par}
{\pard \ql \f0 \sa180 \li360 \fi0 Specify {\i STRING} as a prefix at the beginning of the title that appears in the HTML header (but not in the title as it appears at the beginning of the HTML body). Implies {\f1 --standalone}.\par}
{\pard \ql \f0 \sa0 \li0 \fi0 {\f1 -c} {\i URL}, {\f1 --css=}{\i URL}\par}
{\pard \ql \f0 \sa180 \li360 \fi0 Link to a CSS style sheet. This option can be be used repeatedly to include multiple files. They will be included in the order specified.\par}
{\pard \ql \f0 \sa0 \li0 \fi0 {\f1 --reference-odt=}{\i FILE}\par}
{\pard \ql \f0 \sa180 \li360 \fi0 Use the specified file as a style reference in producing an ODT. For best results, the reference ODT should be a modified version of an ODT produced using pandoc. The contents of the reference ODT are ignored, but its stylesheets are used in the new ODT. If no reference ODT is specified on the command line, pandoc will look for a file {\f1 reference.odt} in the user data directory (see {\f1 --data-dir}). If this is not found either, sensible defaults will be used.\par}
{\pard \ql \f0 \sa0 \li0 \fi0 {\f1 --reference-docx=}{\i FILE}\par}
{\pard \ql \f0 \sa180 \li360 \fi0 Use the specified file as a style reference in producing a docx file. For best results, the reference docx should be a modified version of a docx file produced using pandoc. The contents of the reference docx are ignored, but its stylesheets are used in the new docx. If no reference docx is specified on the command line, pandoc will look for a file {\f1 reference.docx} in the user data directory (see {\f1 --data-dir}). If this is not found either, sensible defaults will be used. The following styles are used by pandoc: [paragraph] Normal, Title, Authors, Date, Heading 1, Heading 2, Heading 3, Heading 4, Heading 5, Block Quote, Definition Term, Definition, Body Text, Table Caption, Image Caption; [character] Default Paragraph Font, Body Text Char, Verbatim Char, Footnote Ref, Link.\par}
{\pard \ql \f0 \sa0 \li0 \fi0 {\f1 --epub-stylesheet=}{\i FILE}\par}
{\pard \ql \f0 \sa180 \li360 \fi0 Use the specified CSS file to style the EPUB. If no stylesheet is specified, pandoc will look for a file {\f1 epub.css} in the user data directory (see {\f1 --data-dir}). If it is not found there, sensible defaults will be used.\par}
{\pard \ql \f0 \sa0 \li0 \fi0 {\f1 --epub-cover-image=}{\i FILE}\par}
{\pard \ql \f0 \sa180 \li360 \fi0 Use the specified image as the EPUB cover. It is recommended that the image be less than 1000px in width and height.\par}
{\pard \ql \f0 \sa0 \li0 \fi0 {\f1 --epub-metadata=}{\i FILE}\par}
{\pard \ql \f0 \sa180 \li360 \fi0 Look in the specified XML file for metadata for the EPUB. The file should contain a series of Dublin Core elements, as documented at {\field{\*\fldinst{HYPERLINK "http://dublincore.org/documents/dces/"}}{\fldrslt{\ul
http://dublincore.org/documents/dces/
}}}
. For example:\par}
{\pard \ql \f0 \sa180 \li360 \fi0 \f1  <dc:rights>Creative Commons</dc:rights>\line
 <dc:language>es-AR</dc:language>\par}
{\pard \ql \f0 \sa180 \li360 \fi0 By default, pandoc will include the following metadata elements: {\f1 <dc:title>} (from the document title), {\f1 <dc:creator>} (from the document authors), {\f1 <dc:date>} (from the document date, which should be in {\field{\*\fldinst{HYPERLINK "http://www.w3.org/TR/NOTE-datetime"}}{\fldrslt{\ul
ISO 8601 format
}}}
), {\f1 <dc:language>} (from the {\f1 lang} variable, or, if is not set, the locale), and {\f1 <dc:identifier id="BookId">} (a randomly generated UUID). Any of these may be overridden by elements in the metadata file.\par}
{\pard \ql \f0 \sa0 \li0 \fi0 {\f1 --epub-embed-font=}{\i FILE}\par}
{\pard \ql \f0 \sa180 \li360 \fi0 Embed the specified font in the EPUB. This option can be repeated to embed multiple fonts. To use embedded fonts, you will need to add declarations like the following to your CSS (see {\f1 --epub-stylesheet}):\par}
{\pard \ql \f0 \sa180 \li360 \fi0 \f1 @font-face \{\line
font-family: DejaVuSans;\line
font-style: normal;\line
font-weight: normal;\line
src:url("DejaVuSans-Regular.ttf");\line
\}\line
@font-face \{\line
font-family: DejaVuSans;\line
font-style: normal;\line
font-weight: bold;\line
src:url("DejaVuSans-Bold.ttf");\line
\}\line
@font-face \{\line
font-family: DejaVuSans;\line
font-style: italic;\line
font-weight: normal;\line
src:url("DejaVuSans-Oblique.ttf");\line
\}\line
@font-face \{\line
font-family: DejaVuSans;\line
font-style: italic;\line
font-weight: bold;\line
src:url("DejaVuSans-BoldOblique.ttf");\line
\}\line
body \{ font-family: "DejaVuSans"; \}\par}
{\pard \ql \f0 \sa0 \li0 \fi0 {\f1 --epub-chapter-level=}{\i NUMBER}\par}
{\pard \ql \f0 \sa180 \li360 \fi0 Specify the header level at which to split the EPUB into separate "chapter" files. The default is to split into chapters at level 1 headers. This option only affects the internal composition of the EPUB, not the way chapters and sections are displayed to users. Some readers may be slow if the chapter files are too large, so for large documents with few level 1 headers, one might want to use a chapter level of 2 or 3.\par}
{\pard \ql \f0 \sa0 \li0 \fi0 {\f1 --latex-engine=}{\i pdflatex|lualatex|xelatex}\par}
{\pard \ql \f0 \sa180 \li360 \fi0 Use the specified LaTeX engine when producing PDF output. The default is {\f1 pdflatex}. If the engine is not in your PATH, the full path of the engine may be specified here.\sa180\par}
{\pard \ql \f0 \sa180 \li0 \fi0 \b \fs32 Citation rendering\par}
{\pard \ql \f0 \sa0 \li0 \fi0 {\f1 --bibliography=}{\i FILE}\par}
{\pard \ql \f0 \sa180 \li360 \fi0 Specify bibliography database to be used in resolving citations. The database type will be determined from the extension of {\i FILE}, which may be {\f1 .mods} (MODS format), {\f1 .bib} (BibLaTeX format, which will normally work for BibTeX files as well), {\f1 .bibtex} (BibTeX format), {\f1 .ris} (RIS format), {\f1 .enl} (EndNote format), {\f1 .xml} (EndNote XML format), {\f1 .wos} (ISI format), {\f1 .medline} (MEDLINE format), {\f1 .copac} (Copac format), or {\f1 .json} (citeproc JSON). If you want to use multiple bibliographies, just use this option repeatedly.\par}
{\pard \ql \f0 \sa0 \li0 \fi0 {\f1 --csl=}{\i FILE}\par}
{\pard \ql \f0 \sa180 \li360 \fi0 Specify {\field{\*\fldinst{HYPERLINK "http://CitationStyles.org"}}{\fldrslt{\ul
CSL
}}}
 style to be used in formatting citations and the bibliography. If {\i FILE} is not found, pandoc will look for it in\par}
{\pard \ql \f0 \sa180 \li360 \fi0 \f1 $HOME/.csl\par}
{\pard \ql \f0 \sa180 \li360 \fi0 in unix,\par}
{\pard \ql \f0 \sa180 \li360 \fi0 \f1 C:\\Documents And Settings\\USERNAME\\Application Data\\csl\par}
{\pard \ql \f0 \sa180 \li360 \fi0 in Windows XP, and\par}
{\pard \ql \f0 \sa180 \li360 \fi0 \f1 C:\\Users\\USERNAME\\AppData\\Roaming\\csl\par}
{\pard \ql \f0 \sa180 \li360 \fi0 in Windows 7. If the {\f1 --csl} option is not specified, pandoc will use a default style: either {\f1 default.csl} in the user data directory (see {\f1 --data-dir}), or, if that is not present, the Chicago author-date style.\par}
{\pard \ql \f0 \sa0 \li0 \fi0 {\f1 --citation-abbreviations=}{\i FILE}\par}
{\pard \ql \f0 \sa180 \li360 \fi0 Specify a file containing abbreviations for journal titles and other bibliographic fields (indicated by setting {\f1 form="short"} in the CSL node for the field). The format is described at {\field{\*\fldinst{HYPERLINK "http://citationstylist.org/2011/10/19/abbreviations-for-zotero-test-release/"}}{\fldrslt{\ul
http://citationstylist.org/2011/10/19/abbreviations-for-zotero-test-release/
}}}
. Here is a short example:\par}
{\pard \ql \f0 \sa180 \li360 \fi0 \f1 \{ "default": \{\line
    "container-title": \{\line
            "Lloyd's Law Reports": "Lloyd's Rep",\line
            "Estates Gazette": "EG",\line
            "Scots Law Times": "SLT"\line
    \}\line
  \}\line
\}\par}
{\pard \ql \f0 \sa0 \li0 \fi0 {\f1 --natbib}\par}
{\pard \ql \f0 \sa180 \li360 \fi0 Use natbib for citations in LaTeX output.\par}
{\pard \ql \f0 \sa0 \li0 \fi0 {\f1 --biblatex}\par}
{\pard \ql \f0 \sa180 \li360 \fi0 Use biblatex for citations in LaTeX output.\sa180\par}
{\pard \ql \f0 \sa180 \li0 \fi0 \b \fs32 Math rendering in HTML\par}
{\pard \ql \f0 \sa0 \li0 \fi0 {\f1 -m} [{\i URL}], {\f1 --latexmathml}[={\i URL}]\par}
{\pard \ql \f0 \sa180 \li360 \fi0 Use the {\field{\*\fldinst{HYPERLINK "http://math.etsu.edu/LaTeXMathML/"}}{\fldrslt{\ul
LaTeXMathML
}}}
 script to display embedded TeX math in HTML output. To insert a link to a local copy of the {\f1 LaTeXMathML.js} script, provide a {\i URL}. If no {\i URL} is provided, the contents of the script will be inserted directly into the HTML header, preserving portability at the price of efficiency. If you plan to use math on several pages, it is much better to link to a copy of the script, so it can be cached.\par}
{\pard \ql \f0 \sa0 \li0 \fi0 {\f1 --mathml}[={\i URL}]\par}
{\pard \ql \f0 \sa180 \li360 \fi0 Convert TeX math to MathML (in {\f1 docbook} as well as {\f1 html} and {\f1 html5}). In standalone {\f1 html} output, a small javascript (or a link to such a script if a {\i URL} is supplied) will be inserted that allows the MathML to be viewed on some browsers.\par}
{\pard \ql \f0 \sa0 \li0 \fi0 {\f1 --jsmath}[={\i URL}]\par}
{\pard \ql \f0 \sa180 \li360 \fi0 Use {\field{\*\fldinst{HYPERLINK "http://www.math.union.edu/~dpvc/jsmath/"}}{\fldrslt{\ul
jsMath
}}}
 to display embedded TeX math in HTML output. The {\i URL} should point to the jsMath load script (e.g. {\f1 jsMath/easy/load.js}); if provided, it will be linked to in the header of standalone HTML documents. If a {\i URL} is not provided, no link to the jsMath load script will be inserted; it is then up to the author to provide such a link in the HTML template.\par}
{\pard \ql \f0 \sa0 \li0 \fi0 {\f1 --mathjax}[={\i URL}]\par}
{\pard \ql \f0 \sa180 \li360 \fi0 Use {\field{\*\fldinst{HYPERLINK "http://www.mathjax.org/"}}{\fldrslt{\ul
MathJax
}}}
 to display embedded TeX math in HTML output. The {\i URL} should point to the {\f1 MathJax.js} load script. If a {\i URL} is not provided, a link to the MathJax CDN will be inserted.\par}
{\pard \ql \f0 \sa0 \li0 \fi0 {\f1 --gladtex}\par}
{\pard \ql \f0 \sa180 \li360 \fi0 Enclose TeX math in {\f1 <eq>} tags in HTML output. These can then be processed by {\field{\*\fldinst{HYPERLINK "http://ans.hsh.no/home/mgg/gladtex/"}}{\fldrslt{\ul
gladTeX
}}}
 to produce links to images of the typeset formulas.\par}
{\pard \ql \f0 \sa0 \li0 \fi0 {\f1 --mimetex}[={\i URL}]\par}
{\pard \ql \f0 \sa180 \li360 \fi0 Render TeX math using the {\field{\*\fldinst{HYPERLINK "http://www.forkosh.com/mimetex.html"}}{\fldrslt{\ul
mimeTeX
}}}
 CGI script. If {\i URL} is not specified, it is assumed that the script is at {\f1 /cgi-bin/mimetex.cgi}.\par}
{\pard \ql \f0 \sa0 \li0 \fi0 {\f1 --webtex}[={\i URL}]\par}
{\pard \ql \f0 \sa180 \li360 \fi0 Render TeX formulas using an external script that converts TeX formulas to images. The formula will be concatenated with the URL provided. If {\i URL} is not specified, the Google Chart API will be used.\sa180\par}
{\pard \ql \f0 \sa180 \li0 \fi0 \b \fs32 Options for wrapper scripts\par}
{\pard \ql \f0 \sa0 \li0 \fi0 {\f1 --dump-args}\par}
{\pard \ql \f0 \sa180 \li360 \fi0 Print information about command-line arguments to {\i stdout}, then exit. This option is intended primarily for use in wrapper scripts. The first line of output contains the name of the output file specified with the {\f1 -o} option, or {\f1 -} (for {\i stdout}) if no output file was specified. The remaining lines contain the command-line arguments, one per line, in the order they appear. These do not include regular Pandoc options and their arguments, but do include any options appearing after a {\f1 --} separator at the end of the line.\par}
{\pard \ql \f0 \sa0 \li0 \fi0 {\f1 --ignore-args}\par}
{\pard \ql \f0 \sa180 \li360 \fi0 Ignore command-line arguments (for use in wrapper scripts). Regular Pandoc options are not ignored. Thus, for example,\par}
{\pard \ql \f0 \sa180 \li360 \fi0 \f1 pandoc --ignore-args -o foo.html -s foo.txt -- -e latin1\par}
{\pard \ql \f0 \sa180 \li360 \fi0 is equivalent to\par}
{\pard \ql \f0 \sa180 \li360 \fi0 \f1 pandoc -o foo.html -s\sa180\par}
{\pard \ql \f0 \sa180 \li0 \fi0 \b \fs36 Templates\par}
{\pard \ql \f0 \sa180 \li0 \fi0 When the {\f1 -s/--standalone} option is used, pandoc uses a template to add header and footer material that is needed for a self-standing document. To see the default template that is used, just type\par}
{\pard \ql \f0 \sa180 \li0 \fi0 \f1 pandoc -D FORMAT\par}
{\pard \ql \f0 \sa180 \li0 \fi0 where {\f1 FORMAT} is the name of the output format. A custom template can be specified using the {\f1 --template} option. You can also override the system default templates for a given output format {\f1 FORMAT} by putting a file {\f1 templates/default.FORMAT} in the user data directory (see {\f1 --data-dir}, above). {\i Exceptions:} For {\f1 odt} output, customize the {\f1 default.opendocument} template. For {\f1 pdf} output, customize the {\f1 default.latex} template.\par}
{\pard \ql \f0 \sa180 \li0 \fi0 Templates may contain {\i variables}. Variable names are sequences of alphanumerics, {\f1 -}, and {\f1 _}, starting with a letter. A variable name surrounded by {\f1 $} signs will be replaced by its value. For example, the string {\f1 $title$} in\par}
{\pard \ql \f0 \sa180 \li0 \fi0 \f1 <title>$title$</title>\par}
{\pard \ql \f0 \sa180 \li0 \fi0 will be replaced by the document title.\par}
{\pard \ql \f0 \sa180 \li0 \fi0 To write a literal {\f1 $} in a template, use {\f1 $$}.\par}
{\pard \ql \f0 \sa180 \li0 \fi0 Some variables are set automatically by pandoc. These vary somewhat depending on the output format, but include:\par}
{\pard \ql \f0 \sa0 \li0 \fi0 {\f1 header-includes}\par}
{\pard \ql \f0 \sa0 \li360 \fi0 contents specified by {\f1 -H/--include-in-header} (may have multiple values)\par}
{\pard \ql \f0 \sa0 \li0 \fi0 {\f1 toc}\par}
{\pard \ql \f0 \sa0 \li360 \fi0 non-null value if {\f1 --toc/--table-of-contents} was specified\par}
{\pard \ql \f0 \sa0 \li0 \fi0 {\f1 include-before}\par}
{\pard \ql \f0 \sa0 \li360 \fi0 contents specified by {\f1 -B/--include-before-body} (may have multiple values)\par}
{\pard \ql \f0 \sa0 \li0 \fi0 {\f1 include-after}\par}
{\pard \ql \f0 \sa0 \li360 \fi0 contents specified by {\f1 -A/--include-after-body} (may have multiple values)\par}
{\pard \ql \f0 \sa0 \li0 \fi0 {\f1 body}\par}
{\pard \ql \f0 \sa0 \li360 \fi0 body of document\par}
{\pard \ql \f0 \sa0 \li0 \fi0 {\f1 title}\par}
{\pard \ql \f0 \sa0 \li360 \fi0 title of document, as specified in title block\par}
{\pard \ql \f0 \sa0 \li0 \fi0 {\f1 author}\par}
{\pard \ql \f0 \sa0 \li360 \fi0 author of document, as specified in title block (may have multiple values)\par}
{\pard \ql \f0 \sa0 \li0 \fi0 {\f1 date}\par}
{\pard \ql \f0 \sa0 \li360 \fi0 date of document, as specified in title block\par}
{\pard \ql \f0 \sa0 \li0 \fi0 {\f1 lang}\par}
{\pard \ql \f0 \sa0 \li360 \fi0 language code for HTML or LaTeX documents\par}
{\pard \ql \f0 \sa0 \li0 \fi0 {\f1 slidy-url}\par}
{\pard \ql \f0 \sa0 \li360 \fi0 base URL for Slidy documents (defaults to {\f1 http://www.w3.org/Talks/Tools/Slidy2})\par}
{\pard \ql \f0 \sa0 \li0 \fi0 {\f1 slideous-url}\par}
{\pard \ql \f0 \sa0 \li360 \fi0 base URL for Slideous documents (defaults to {\f1 default})\par}
{\pard \ql \f0 \sa0 \li0 \fi0 {\f1 s5-url}\par}
{\pard \ql \f0 \sa0 \li360 \fi0 base URL for S5 documents (defaults to {\f1 ui/default})\par}
{\pard \ql \f0 \sa0 \li0 \fi0 {\f1 fontsize}\par}
{\pard \ql \f0 \sa0 \li360 \fi0 font size (10pt, 11pt, 12pt) for LaTeX documents\par}
{\pard \ql \f0 \sa0 \li0 \fi0 {\f1 documentclass}\par}
{\pard \ql \f0 \sa0 \li360 \fi0 document class for LaTeX documents\par}
{\pard \ql \f0 \sa0 \li0 \fi0 {\f1 geometry}\par}
{\pard \ql \f0 \sa0 \li360 \fi0 options for LaTeX {\f1 geometry} class, e.g. {\f1 margin=1in}; may be repeated for multiple options\par}
{\pard \ql \f0 \sa0 \li0 \fi0 {\f1 mainfont}, {\f1 sansfont}, {\f1 monofont}, {\f1 mathfont}\par}
{\pard \ql \f0 \sa0 \li360 \fi0 fonts for LaTeX documents (works only with xelatex and lualatex)\par}
{\pard \ql \f0 \sa0 \li0 \fi0 {\f1 theme}\par}
{\pard \ql \f0 \sa0 \li360 \fi0 theme for LaTeX beamer documents\par}
{\pard \ql \f0 \sa0 \li0 \fi0 {\f1 colortheme}\par}
{\pard \ql \f0 \sa0 \li360 \fi0 colortheme for LaTeX beamer documents\par}
{\pard \ql \f0 \sa0 \li0 \fi0 {\f1 linkcolor}\par}
{\pard \ql \f0 \sa0 \li360 \fi0 color for internal links in LaTeX documents ({\f1 red}, {\f1 green}, {\f1 magenta}, {\f1 cyan}, {\f1 blue}, {\f1 black})\par}
{\pard \ql \f0 \sa0 \li0 \fi0 {\f1 urlcolor}\par}
{\pard \ql \f0 \sa0 \li360 \fi0 color for external links in LaTeX documents\par}
{\pard \ql \f0 \sa0 \li0 \fi0 {\f1 links-as-notes}\par}
{\pard \ql \f0 \sa0 \li360 \fi0 causes links to be printed as footnotes in LaTeX documents\sa180\par}
{\pard \ql \f0 \sa180 \li0 \fi0 Variables may be set at the command line using the {\f1 -V/--variable} option. This allows users to include custom variables in their templates.\par}
{\pard \ql \f0 \sa180 \li0 \fi0 Templates may contain conditionals. The syntax is as follows:\par}
{\pard \ql \f0 \sa180 \li0 \fi0 \f1 $if(variable)$\line
X\line
$else$\line
Y\line
$endif$\par}
{\pard \ql \f0 \sa180 \li0 \fi0 This will include {\f1 X} in the template if {\f1 variable} has a non-null value; otherwise it will include {\f1 Y}. {\f1 X} and {\f1 Y} are placeholders for any valid template text, and may include interpolated variables or other conditionals. The {\f1 $else$} section may be omitted.\par}
{\pard \ql \f0 \sa180 \li0 \fi0 When variables can have multiple values (for example, {\f1 author} in a multi-author document), you can use the {\f1 $for$} keyword:\par}
{\pard \ql \f0 \sa180 \li0 \fi0 \f1 $for(author)$\line
<meta name="author" content="$author$" />\line
$endfor$\par}
{\pard \ql \f0 \sa180 \li0 \fi0 You can optionally specify a separator to be used between consecutive items:\par}
{\pard \ql \f0 \sa180 \li0 \fi0 \f1 $for(author)$$author$$sep$, $endfor$\par}
{\pard \ql \f0 \sa180 \li0 \fi0 If you use custom templates, you may need to revise them as pandoc changes. We recommend tracking the changes in the default templates, and modifying your custom templates accordingly. An easy way to do this is to fork the pandoc-templates repository ({\field{\*\fldinst{HYPERLINK "http://github.com/jgm/pandoc-templates"}}{\fldrslt{\ul
http://github.com/jgm/pandoc-templates
}}}
) and merge in changes after each pandoc release.\par}
{\pard \ql \f0 \sa180 \li0 \fi0 \b \fs36 Pandoc's markdown\par}
{\pard \ql \f0 \sa180 \li0 \fi0 Pandoc understands an extended and slightly revised version of John Gruber's {\field{\*\fldinst{HYPERLINK "http://daringfireball.net/projects/markdown/"}}{\fldrslt{\ul
markdown
}}}
 syntax. This document explains the syntax, noting differences from standard markdown. Except where noted, these differences can be suppressed by using the {\f1 markdown_strict} format instead of {\f1 markdown}. An extensions can be enabled by adding {\f1 +EXTENSION} to the format name and disabled by adding {\f1 -EXTENSION}. For example, {\f1 markdown_strict+footnotes} is strict markdown with footnotes enabled, while {\f1 markdown-footnotes-pipe_tables} is pandoc's markdown without footnotes or pipe tables.\par}
{\pard \ql \f0 \sa180 \li0 \fi0 \b \fs32 Philosophy\par}
{\pard \ql \f0 \sa180 \li0 \fi0 Markdown is designed to be easy to write, and, even more importantly, easy to read:\par}
{\pard \ql \f0 \sa180 \li720 \fi0 A Markdown-formatted document should be publishable as-is, as plain text, without looking like it's been marked up with tags or formatting instructions. -- {\field{\*\fldinst{HYPERLINK "http://daringfireball.net/projects/markdown/syntax#philosophy"}}{\fldrslt{\ul
John Gruber
}}}
\par}
{\pard \ql \f0 \sa180 \li0 \fi0 This principle has guided pandoc's decisions in finding syntax for tables, footnotes, and other extensions.\par}
{\pard \ql \f0 \sa180 \li0 \fi0 There is, however, one respect in which pandoc's aims are different from the original aims of markdown. Whereas markdown was originally designed with HTML generation in mind, pandoc is designed for multiple output formats. Thus, while pandoc allows the embedding of raw HTML, it discourages it, and provides other, non-HTMLish ways of representing important document elements like definition lists, tables, mathematics, and footnotes.\par}
{\pard \ql \f0 \sa180 \li0 \fi0 \b \fs32 Paragraphs\par}
{\pard \ql \f0 \sa180 \li0 \fi0 A paragraph is one or more lines of text followed by one or more blank line. Newlines are treated as spaces, so you can reflow your paragraphs as you like. If you need a hard line break, put two or more spaces at the end of a line.\par}
{\pard \ql \f0 \sa180 \li0 \fi0 {\b Extension: {\f1 escaped_line_breaks}}\par}
{\pard \ql \f0 \sa180 \li0 \fi0 A backslash followed by a newline is also a hard line break.\par}
{\pard \ql \f0 \sa180 \li0 \fi0 \b \fs32 Headers\par}
{\pard \ql \f0 \sa180 \li0 \fi0 There are two kinds of headers, Setext and atx.\par}
{\pard \ql \f0 \sa180 \li0 \fi0 \b \fs28 Setext-style headers\par}
{\pard \ql \f0 \sa180 \li0 \fi0 A setext-style header is a line of text "underlined" with a row of {\f1 =} signs (for a level one header) of {\f1 -} signs (for a level two header):\par}
{\pard \ql \f0 \sa180 \li0 \fi0 \f1 A level-one header\line
==================\line
\line
A level-two header\line
------------------\par}
{\pard \ql \f0 \sa180 \li0 \fi0 The header text can contain inline formatting, such as emphasis (see {\field{\*\fldinst{HYPERLINK "#inline-formatting"}}{\fldrslt{\ul
Inline formatting
}}}
, below).\par}
{\pard \ql \f0 \sa180 \li0 \fi0 \b \fs28 Atx-style headers\par}
{\pard \ql \f0 \sa180 \li0 \fi0 An Atx-style header consists of one to six {\f1 #} signs and a line of text, optionally followed by any number of {\f1 #} signs. The number of {\f1 #} signs at the beginning of the line is the header level:\par}
{\pard \ql \f0 \sa180 \li0 \fi0 \f1 ## A level-two header\line
\line
### A level-three header ###\par}
{\pard \ql \f0 \sa180 \li0 \fi0 As with setext-style headers, the header text can contain formatting:\par}
{\pard \ql \f0 \sa180 \li0 \fi0 \f1 # A level-one header with a [link](/url) and *emphasis*\par}
{\pard \ql \f0 \sa180 \li0 \fi0 {\b Extension: {\f1 blank_before_header}}\par}
{\pard \ql \f0 \sa180 \li0 \fi0 Standard markdown syntax does not require a blank line before a header. Pandoc does require this (except, of course, at the beginning of the document). The reason for the requirement is that it is all too easy for a {\f1 #} to end up at the beginning of a line by accident (perhaps through line wrapping). Consider, for example:\par}
{\pard \ql \f0 \sa180 \li0 \fi0 \f1 I like several of their flavors of ice cream:\line
#22, for example, and #5.\par}
{\pard \ql \f0 \sa180 \li0 \fi0 \b \fs28 Header identifiers in HTML, LaTeX, and ConTeXt\par}
{\pard \ql \f0 \sa180 \li0 \fi0 {\b Extension: {\f1 header_attributes}}\par}
{\pard \ql \f0 \sa180 \li0 \fi0 Headers can be assigned attributes using this syntax at the end of the line containing the header text:\par}
{\pard \ql \f0 \sa180 \li0 \fi0 \f1 \{#identifier .class .class key=value key=value\}\par}
{\pard \ql \f0 \sa180 \li0 \fi0 Although this syntax allows assignment of classes and key/value attributes, only identifiers currently have any affect in the writers (and only in some writers: HTML, LaTeX, ConTeXt, Textile, AsciiDoc). Thus, for example, the following headers will all be assigned the identifier {\f1 foo}:\par}
{\pard \ql \f0 \sa180 \li0 \fi0 \f1 # My header \{#foo\}\line
\line
## My header ##    \{#foo\}\line
\line
My other header   \{#foo\}\line
---------------\par}
{\pard \ql \f0 \sa180 \li0 \fi0 (This syntax is compatible with {\field{\*\fldinst{HYPERLINK "http://www.michelf.com/projects/php-markdown/extra/"}}{\fldrslt{\ul
PHP Markdown Extra
}}}
.)\par}
{\pard \ql \f0 \sa180 \li0 \fi0 Headers with the class {\f1 unnumbered} will not be numbered, even if {\f1 --number-sections} is specified. A single hyphen ({\f1 -}) in an attribute context is equivalent to {\f1 .unnumbered}, and preferable in non-English documents. So,\par}
{\pard \ql \f0 \sa180 \li0 \fi0 \f1 # My header \{-\}\par}
{\pard \ql \f0 \sa180 \li0 \fi0 is just the same as\par}
{\pard \ql \f0 \sa180 \li0 \fi0 \f1 # My header \{.unnumbered\}\par}
{\pard \ql \f0 \sa180 \li0 \fi0 {\b Extension: {\f1 auto_identifiers}}\par}
{\pard \ql \f0 \sa180 \li0 \fi0 A header without an explicitly specified identifier will be automatically assigned a unique identifier based on the header text. To derive the identifier from the header text,\par}
{\pard \ql \f0 \sa0 \li360 \fi-360 \bullet \tx360\tab Remove all formatting, links, etc.\par}
{\pard \ql \f0 \sa0 \li360 \fi-360 \bullet \tx360\tab Remove all punctuation, except underscores, hyphens, and periods.\par}
{\pard \ql \f0 \sa0 \li360 \fi-360 \bullet \tx360\tab Replace all spaces and newlines with hyphens.\par}
{\pard \ql \f0 \sa0 \li360 \fi-360 \bullet \tx360\tab Convert all alphabetic characters to lowercase.\par}
{\pard \ql \f0 \sa0 \li360 \fi-360 \bullet \tx360\tab Remove everything up to the first letter (identifiers may not begin with a number or punctuation mark).\par}
{\pard \ql \f0 \sa0 \li360 \fi-360 \bullet \tx360\tab If nothing is left after this, use the identifier {\f1 section}.\sa180\par}
{\pard \ql \f0 \sa180 \li0 \fi0 Thus, for example,\par}
{
\trowd \trgaph120
\clbrdrb\brdrs\cellx4320\clbrdrb\brdrs\cellx8640
\trkeep\intbl
{
{\intbl {\pard \ql \f0 \sa0 \li0 \fi0 Header\par}
\cell}
{\intbl {\pard \ql \f0 \sa0 \li0 \fi0 Identifier\par}
\cell}
}
\intbl\row}
{
\trowd \trgaph120
\cellx4320\cellx8640
\trkeep\intbl
{
{\intbl {\pard \ql \f0 \sa0 \li0 \fi0 Header identifiers in HTML\par}
\cell}
{\intbl {\pard \ql \f0 \sa0 \li0 \fi0 {\f1 header-identifiers-in-html}\par}
\cell}
}
\intbl\row}
{
\trowd \trgaph120
\cellx4320\cellx8640
\trkeep\intbl
{
{\intbl {\pard \ql \f0 \sa0 \li0 \fi0 {\i Dogs}?--in {\i my} house?\par}
\cell}
{\intbl {\pard \ql \f0 \sa0 \li0 \fi0 {\f1 dogs--in-my-house}\par}
\cell}
}
\intbl\row}
{
\trowd \trgaph120
\cellx4320\cellx8640
\trkeep\intbl
{
{\intbl {\pard \ql \f0 \sa0 \li0 \fi0 {\field{\*\fldinst{HYPERLINK "http://www.w3.org/TR/html40/"}}{\fldrslt{\ul
HTML
}}}
, {\field{\*\fldinst{HYPERLINK "http://meyerweb.com/eric/tools/s5/"}}{\fldrslt{\ul
S5
}}}
, or {\field{\*\fldinst{HYPERLINK "http://en.wikipedia.org/wiki/Rich_Text_Format"}}{\fldrslt{\ul
RTF
}}}
?\par}
\cell}
{\intbl {\pard \ql \f0 \sa0 \li0 \fi0 {\f1 html-s5-or-rtf}\par}
\cell}
}
\intbl\row}
{
\trowd \trgaph120
\cellx4320\cellx8640
\trkeep\intbl
{
{\intbl {\pard \ql \f0 \sa0 \li0 \fi0 3. Applications\par}
\cell}
{\intbl {\pard \ql \f0 \sa0 \li0 \fi0 {\f1 applications}\par}
\cell}
}
\intbl\row}
{
\trowd \trgaph120
\cellx4320\cellx8640
\trkeep\intbl
{
{\intbl {\pard \ql \f0 \sa0 \li0 \fi0 33\par}
\cell}
{\intbl {\pard \ql \f0 \sa0 \li0 \fi0 {\f1 section}\par}
\cell}
}
\intbl\row}
{\pard \ql \f0 \sa180 \li0 \fi0 \par}
{\pard \ql \f0 \sa180 \li0 \fi0 These rules should, in most cases, allow one to determine the identifier from the header text. The exception is when several headers have the same text; in this case, the first will get an identifier as described above; the second will get the same identifier with {\f1 -1} appended; the third with {\f1 -2}; and so on.\par}
{\pard \ql \f0 \sa180 \li0 \fi0 These identifiers are used to provide link targets in the table of contents generated by the {\f1 --toc|--table-of-contents} option. They also make it easy to provide links from one section of a document to another. A link to this section, for example, might look like this:\par}
{\pard \ql \f0 \sa180 \li0 \fi0 \f1 See the section on\line
[header identifiers](#header-identifiers-in-html-latex-and-context).\par}
{\pard \ql \f0 \sa180 \li0 \fi0 Note, however, that this method of providing links to sections works only in HTML, LaTeX, and ConTeXt formats.\par}
{\pard \ql \f0 \sa180 \li0 \fi0 If the {\f1 --section-divs} option is specified, then each section will be wrapped in a {\f1 div} (or a {\f1 section}, if {\f1 --html5} was specified), and the identifier will be attached to the enclosing {\f1 <div>} (or {\f1 <section>}) tag rather than the header itself. This allows entire sections to be manipulated using javascript or treated differently in CSS.\par}
{\pard \ql \f0 \sa180 \li0 \fi0 {\b Extension: {\f1 implicit_header_references}}\par}
{\pard \ql \f0 \sa180 \li0 \fi0 Pandoc behaves as if reference links have been defined for each header. So, instead of\par}
{\pard \ql \f0 \sa180 \li0 \fi0 \f1 [header identifiers](#header-identifiers-in-html)\par}
{\pard \ql \f0 \sa180 \li0 \fi0 you can simply write\par}
{\pard \ql \f0 \sa180 \li0 \fi0 \f1 [header identifiers]\par}
{\pard \ql \f0 \sa180 \li0 \fi0 or\par}
{\pard \ql \f0 \sa180 \li0 \fi0 \f1 [header identifiers][]\par}
{\pard \ql \f0 \sa180 \li0 \fi0 or\par}
{\pard \ql \f0 \sa180 \li0 \fi0 \f1 [the section on header identifiers][header identifiers]\par}
{\pard \ql \f0 \sa180 \li0 \fi0 If there are multiple headers with identical text, the corresponding reference will link to the first one only, and you will need to use explicit links to link to the others, as described above.\par}
{\pard \ql \f0 \sa180 \li0 \fi0 Unlike regular reference links, these references are case-sensitive.\par}
{\pard \ql \f0 \sa180 \li0 \fi0 Note: if you have defined an explicit identifier for a header, then implicit references to it will not work.\par}
{\pard \ql \f0 \sa180 \li0 \fi0 \b \fs32 Block quotations\par}
{\pard \ql \f0 \sa180 \li0 \fi0 Markdown uses email conventions for quoting blocks of text. A block quotation is one or more paragraphs or other block elements (such as lists or headers), with each line preceded by a {\f1 >} character and a space. (The {\f1 >} need not start at the left margin, but it should not be indented more than three spaces.)\par}
{\pard \ql \f0 \sa180 \li0 \fi0 \f1 > This is a block quote. This\line
> paragraph has two lines.\line
>\line
> 1. This is a list inside a block quote.\line
> 2. Second item.\par}
{\pard \ql \f0 \sa180 \li0 \fi0 A "lazy" form, which requires the {\f1 >} character only on the first line of each block, is also allowed:\par}
{\pard \ql \f0 \sa180 \li0 \fi0 \f1 > This is a block quote. This\line
paragraph has two lines.\line
\line
> 1. This is a list inside a block quote.\line
2. Second item.\par}
{\pard \ql \f0 \sa180 \li0 \fi0 Among the block elements that can be contained in a block quote are other block quotes. That is, block quotes can be nested:\par}
{\pard \ql \f0 \sa180 \li0 \fi0 \f1 > This is a block quote.\line
>\line
> > A block quote within a block quote.\par}
{\pard \ql \f0 \sa180 \li0 \fi0 {\b Extension: {\f1 blank_before_blockquote}}\par}
{\pard \ql \f0 \sa180 \li0 \fi0 Standard markdown syntax does not require a blank line before a block quote. Pandoc does require this (except, of course, at the beginning of the document). The reason for the requirement is that it is all too easy for a {\f1 >} to end up at the beginning of a line by accident (perhaps through line wrapping). So, unless the {\f1 markdown_strict} format is used, the following does not produce a nested block quote in pandoc:\par}
{\pard \ql \f0 \sa180 \li0 \fi0 \f1 > This is a block quote.\line
>> Nested.\par}
{\pard \ql \f0 \sa180 \li0 \fi0 \b \fs32 Verbatim (code) blocks\par}
{\pard \ql \f0 \sa180 \li0 \fi0 \b \fs28 Indented code blocks\par}
{\pard \ql \f0 \sa180 \li0 \fi0 A block of text indented four spaces (or one tab) is treated as verbatim text: that is, special characters do not trigger special formatting, and all spaces and line breaks are preserved. For example,\par}
{\pard \ql \f0 \sa180 \li0 \fi0 \f1     if (a > 3) \{\line
      moveShip(5 * gravity, DOWN);\line
    \}\par}
{\pard \ql \f0 \sa180 \li0 \fi0 The initial (four space or one tab) indentation is not considered part of the verbatim text, and is removed in the output.\par}
{\pard \ql \f0 \sa180 \li0 \fi0 Note: blank lines in the verbatim text need not begin with four spaces.\par}
{\pard \ql \f0 \sa180 \li0 \fi0 \b \fs28 Fenced code blocks\par}
{\pard \ql \f0 \sa180 \li0 \fi0 {\b Extension: {\f1 fenced_code_blocks}}\par}
{\pard \ql \f0 \sa180 \li0 \fi0 In addition to standard indented code blocks, Pandoc supports {\i fenced} code blocks. These begin with a row of three or more tildes ({\f1 ~}) or backticks ({\f1 `}) and end with a row of tildes or backticks that must be at least as long as the starting row. Everything between these lines is treated as code. No indentation is necessary:\par}
{\pard \ql \f0 \sa180 \li0 \fi0 \f1 ~~~~~~~\line
if (a > 3) \{\line
  moveShip(5 * gravity, DOWN);\line
\}\line
~~~~~~~\par}
{\pard \ql \f0 \sa180 \li0 \fi0 Like regular code blocks, fenced code blocks must be separated from surrounding text by blank lines.\par}
{\pard \ql \f0 \sa180 \li0 \fi0 If the code itself contains a row of tildes or backticks, just use a longer row of tildes or backticks at the start and end:\par}
{\pard \ql \f0 \sa180 \li0 \fi0 \f1 ~~~~~~~~~~~~~~~~\line
~~~~~~~~~~\line
code including tildes\line
~~~~~~~~~~\line
~~~~~~~~~~~~~~~~\par}
{\pard \ql \f0 \sa180 \li0 \fi0 Optionally, you may attach attributes to the code block using this syntax:\par}
{\pard \ql \f0 \sa180 \li0 \fi0 \f1 ~~~~ \{#mycode .haskell .numberLines startFrom="100"\}\line
qsort []     = []\line
qsort (x:xs) = qsort (filter (< x) xs) ++ [x] ++\line
               qsort (filter (>= x) xs)\line
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\par}
{\pard \ql \f0 \sa180 \li0 \fi0 Here {\f1 mycode} is an identifier, {\f1 haskell} and {\f1 numberLines} are classes, and {\f1 startFrom} is an attribute with value {\f1 100}. Some output formats can use this information to do syntax highlighting. Currently, the only output formats that uses this information are HTML and LaTeX. If highlighting is supported for your output format and language, then the code block above will appear highlighted, with numbered lines. (To see which languages are supported, do {\f1 pandoc --version}.) Otherwise, the code block above will appear as follows:\par}
{\pard \ql \f0 \sa180 \li0 \fi0 \f1 <pre id="mycode" class="haskell numberLines" startFrom="100">\line
  <code>\line
  ...\line
  </code>\line
</pre>\par}
{\pard \ql \f0 \sa180 \li0 \fi0 A shortcut form can also be used for specifying the language of the code block:\par}
{\pard \ql \f0 \sa180 \li0 \fi0 \f1 ```haskell\line
qsort [] = []\line
```\par}
{\pard \ql \f0 \sa180 \li0 \fi0 This is equivalent to:\par}
{\pard \ql \f0 \sa180 \li0 \fi0 \f1 ``` \{.haskell\}\line
qsort [] = []\line
```\par}
{\pard \ql \f0 \sa180 \li0 \fi0 To prevent all highlighting, use the {\f1 --no-highlight} flag. To set the highlighting style, use {\f1 --highlight-style}.\par}
{\pard \ql \f0 \sa180 \li0 \fi0 \b \fs32 Line blocks\par}
{\pard \ql \f0 \sa180 \li0 \fi0 {\b Extension: {\f1 line_blocks}}\par}
{\pard \ql \f0 \sa180 \li0 \fi0 A line block is a sequence of lines beginning with a vertical bar ({\f1 |}) followed by a space. The division into lines will be preserved in the output, as will any leading spaces; otherwise, the lines will be formatted as markdown. This is useful for verse and addresses:\par}
{\pard \ql \f0 \sa180 \li0 \fi0 \f1 | The limerick packs laughs anatomical\line
| In space that is quite economical.\line
|    But the good ones I've seen\line
|    So seldom are clean\line
| And the clean ones so seldom are comical\line
\line
| 200 Main St.\line
| Berkeley, CA 94718\par}
{\pard \ql \f0 \sa180 \li0 \fi0 The lines can be hard-wrapped if needed, but the continuation line must begin with a space.\par}
{\pard \ql \f0 \sa180 \li0 \fi0 \f1 | The Right Honorable Most Venerable and Righteous Samuel L.\line
  Constable, Jr.\line
| 200 Main St.\line
| Berkeley, CA 94718\par}
{\pard \ql \f0 \sa180 \li0 \fi0 This syntax is borrowed from {\field{\*\fldinst{HYPERLINK "http://docutils.sourceforge.net/docs/ref/rst/introduction.html"}}{\fldrslt{\ul
reStructuredText
}}}
.\par}
{\pard \ql \f0 \sa180 \li0 \fi0 \b \fs32 Lists\par}
{\pard \ql \f0 \sa180 \li0 \fi0 \b \fs28 Bullet lists\par}
{\pard \ql \f0 \sa180 \li0 \fi0 A bullet list is a list of bulleted list items. A bulleted list item begins with a bullet ({\f1 *}, {\f1 +}, or {\f1 -}). Here is a simple example:\par}
{\pard \ql \f0 \sa180 \li0 \fi0 \f1 * one\line
* two\line
* three\par}
{\pard \ql \f0 \sa180 \li0 \fi0 This will produce a "compact" list. If you want a "loose" list, in which each item is formatted as a paragraph, put spaces between the items:\par}
{\pard \ql \f0 \sa180 \li0 \fi0 \f1 * one\line
\line
* two\line
\line
* three\par}
{\pard \ql \f0 \sa180 \li0 \fi0 The bullets need not be flush with the left margin; they may be indented one, two, or three spaces. The bullet must be followed by whitespace.\par}
{\pard \ql \f0 \sa180 \li0 \fi0 List items look best if subsequent lines are flush with the first line (after the bullet):\par}
{\pard \ql \f0 \sa180 \li0 \fi0 \f1 * here is my first\line
  list item.\line
* and my second.\par}
{\pard \ql \f0 \sa180 \li0 \fi0 But markdown also allows a "lazy" format:\par}
{\pard \ql \f0 \sa180 \li0 \fi0 \f1 * here is my first\line
list item.\line
* and my second.\par}
{\pard \ql \f0 \sa180 \li0 \fi0 \b \fs28 The four-space rule\par}
{\pard \ql \f0 \sa180 \li0 \fi0 A list item may contain multiple paragraphs and other block-level content. However, subsequent paragraphs must be preceded by a blank line and indented four spaces or a tab. The list will look better if the first paragraph is aligned with the rest:\par}
{\pard \ql \f0 \sa180 \li0 \fi0 \f1   * First paragraph.\line
\line
    Continued.\line
\line
  * Second paragraph. With a code block, which must be indented\line
    eight spaces:\line
\line
        \{ code \}\par}
{\pard \ql \f0 \sa180 \li0 \fi0 List items may include other lists. In this case the preceding blank line is optional. The nested list must be indented four spaces or one tab:\par}
{\pard \ql \f0 \sa180 \li0 \fi0 \f1 * fruits\line
    + apples\line
        - macintosh\line
        - red delicious\line
    + pears\line
    + peaches\line
* vegetables\line
    + brocolli\line
    + chard\par}
{\pard \ql \f0 \sa180 \li0 \fi0 As noted above, markdown allows you to write list items "lazily," instead of indenting continuation lines. However, if there are multiple paragraphs or other blocks in a list item, the first line of each must be indented.\par}
{\pard \ql \f0 \sa180 \li0 \fi0 \f1 + A lazy, lazy, list\line
item.\line
\line
+ Another one; this looks\line
bad but is legal.\line
\line
    Second paragraph of second\line
list item.\par}
{\pard \ql \f0 \sa180 \li0 \fi0 {\b Note:} Although the four-space rule for continuation paragraphs comes from the official {\field{\*\fldinst{HYPERLINK "http://daringfireball.net/projects/markdown/syntax#list"}}{\fldrslt{\ul
markdown syntax guide
}}}
, the reference implementation, {\f1 Markdown.pl}, does not follow it. So pandoc will give different results than {\f1 Markdown.pl} when authors have indented continuation paragraphs fewer than four spaces.\par}
{\pard \ql \f0 \sa180 \li0 \fi0 The {\field{\*\fldinst{HYPERLINK "http://daringfireball.net/projects/markdown/syntax#list"}}{\fldrslt{\ul
markdown syntax guide
}}}
 is not explicit whether the four-space rule applies to {\i all} block-level content in a list item; it only mentions paragraphs and code blocks. But it implies that the rule applies to all block-level content (including nested lists), and pandoc interprets it that way.\par}
{\pard \ql \f0 \sa180 \li0 \fi0 \b \fs28 Ordered lists\par}
{\pard \ql \f0 \sa180 \li0 \fi0 Ordered lists work just like bulleted lists, except that the items begin with enumerators rather than bullets.\par}
{\pard \ql \f0 \sa180 \li0 \fi0 In standard markdown, enumerators are decimal numbers followed by a period and a space. The numbers themselves are ignored, so there is no difference between this list:\par}
{\pard \ql \f0 \sa180 \li0 \fi0 \f1 1.  one\line
2.  two\line
3.  three\par}
{\pard \ql \f0 \sa180 \li0 \fi0 and this one:\par}
{\pard \ql \f0 \sa180 \li0 \fi0 \f1 5.  one\line
7.  two\line
1.  three\par}
{\pard \ql \f0 \sa180 \li0 \fi0 {\b Extension: {\f1 fancy_lists}}\par}
{\pard \ql \f0 \sa180 \li0 \fi0 Unlike standard markdown, Pandoc allows ordered list items to be marked with uppercase and lowercase letters and roman numerals, in addition to arabic numerals. List markers may be enclosed in parentheses or followed by a single right-parentheses or period. They must be separated from the text that follows by at least one space, and, if the list marker is a capital letter with a period, by at least two spaces.{\super\chftn}{\*\footnote\chftn\~\plain\pard {\pard \ql \f0 \sa180 \li0 \fi0 The point of this rule is to ensure that normal paragraphs starting with people's initials, like\par}
{\pard \ql \f0 \sa180 \li0 \fi0 \f1 B. Russell was an English philosopher.\par}
{\pard \ql \f0 \sa180 \li0 \fi0 do not get treated as list items.\par}
{\pard \ql \f0 \sa180 \li0 \fi0 This rule will not prevent\par}
{\pard \ql \f0 \sa180 \li0 \fi0 \f1 (C) 2007 Joe Smith\par}
{\pard \ql \f0 \sa180 \li0 \fi0 from being interpreted as a list item. In this case, a backslash escape can be used:\par}
{\pard \ql \f0 \sa180 \li0 \fi0 \f1 (C\\) 2007 Joe Smith\par}
}\par}
{\pard \ql \f0 \sa180 \li0 \fi0 {\b Extension: {\f1 startnum}}\par}
{\pard \ql \f0 \sa180 \li0 \fi0 Pandoc also pays attention to the type of list marker used, and to the starting number, and both of these are preserved where possible in the output format. Thus, the following yields a list with numbers followed by a single parenthesis, starting with 9, and a sublist with lowercase roman numerals:\par}
{\pard \ql \f0 \sa180 \li0 \fi0 \f1  9)  Ninth\line
10)  Tenth\line
11)  Eleventh\line
       i. subone\line
      ii. subtwo\line
     iii. subthree\par}
{\pard \ql \f0 \sa180 \li0 \fi0 Pandoc will start a new list each time a different type of list marker is used. So, the following will create three lists:\par}
{\pard \ql \f0 \sa180 \li0 \fi0 \f1 (2) Two\line
(5) Three\line
1.  Four\line
*   Five\par}
{\pard \ql \f0 \sa180 \li0 \fi0 If default list markers are desired, use {\f1 #.}:\par}
{\pard \ql \f0 \sa180 \li0 \fi0 \f1 #.  one\line
#.  two\line
#.  three\par}
{\pard \ql \f0 \sa180 \li0 \fi0 \b \fs28 Definition lists\par}
{\pard \ql \f0 \sa180 \li0 \fi0 {\b Extension: {\f1 definition_lists}}\par}
{\pard \ql \f0 \sa180 \li0 \fi0 Pandoc supports definition lists, using a syntax inspired by {\field{\*\fldinst{HYPERLINK "http://www.michelf.com/projects/php-markdown/extra/"}}{\fldrslt{\ul
PHP Markdown Extra
}}}
 and {\field{\*\fldinst{HYPERLINK "http://docutils.sourceforge.net/docs/ref/rst/introduction.html"}}{\fldrslt{\ul
reStructuredText
}}}
:{\super\chftn}{\*\footnote\chftn\~\plain\pard {\pard \ql \f0 \sa180 \li0 \fi0 I have also been influenced by the suggestions of {\field{\*\fldinst{HYPERLINK "http://www.justatheory.com/computers/markup/modest-markdown-proposal.html"}}{\fldrslt{\ul
David Wheeler
}}}
.\par}
}\par}
{\pard \ql \f0 \sa180 \li0 \fi0 \f1 Term 1\line
\line
:   Definition 1\line
\line
Term 2 with *inline markup*\line
\line
:   Definition 2\line
\line
        \{ some code, part of Definition 2 \}\line
\line
    Third paragraph of definition 2.\par}
{\pard \ql \f0 \sa180 \li0 \fi0 Each term must fit on one line, which may optionally be followed by a blank line, and must be followed by one or more definitions. A definition begins with a colon or tilde, which may be indented one or two spaces. The body of the definition (including the first line, aside from the colon or tilde) should be indented four spaces. A term may have multiple definitions, and each definition may consist of one or more block elements (paragraph, code block, list, etc.), each indented four spaces or one tab stop.\par}
{\pard \ql \f0 \sa180 \li0 \fi0 If you leave space after the definition (as in the example above), the blocks of the definitions will be considered paragraphs. In some output formats, this will mean greater spacing between term/definition pairs. For a compact definition list, do not leave space between the definition and the next term:\par}
{\pard \ql \f0 \sa180 \li0 \fi0 \f1 Term 1\line
  ~ Definition 1\line
Term 2\line
  ~ Definition 2a\line
  ~ Definition 2b\par}
{\pard \ql \f0 \sa180 \li0 \fi0 \b \fs28 Numbered example lists\par}
{\pard \ql \f0 \sa180 \li0 \fi0 {\b Extension: {\f1 example_lists}}\par}
{\pard \ql \f0 \sa180 \li0 \fi0 The special list marker {\f1 @} can be used for sequentially numbered examples. The first list item with a {\f1 @} marker will be numbered '1', the next '2', and so on, throughout the document. The numbered examples need not occur in a single list; each new list using {\f1 @} will take up where the last stopped. So, for example:\par}
{\pard \ql \f0 \sa180 \li0 \fi0 \f1 (@)  My first example will be numbered (1).\line
(@)  My second example will be numbered (2).\line
\line
Explanation of examples.\line
\line
(@)  My third example will be numbered (3).\par}
{\pard \ql \f0 \sa180 \li0 \fi0 Numbered examples can be labeled and referred to elsewhere in the document:\par}
{\pard \ql \f0 \sa180 \li0 \fi0 \f1 (@good)  This is a good example.\line
\line
As (@good) illustrates, ...\par}
{\pard \ql \f0 \sa180 \li0 \fi0 The label can be any string of alphanumeric characters, underscores, or hyphens.\par}
{\pard \ql \f0 \sa180 \li0 \fi0 \b \fs28 Compact and loose lists\par}
{\pard \ql \f0 \sa180 \li0 \fi0 Pandoc behaves differently from {\f1 Markdown.pl} on some "edge cases" involving lists. Consider this source:\par}
{\pard \ql \f0 \sa180 \li0 \fi0 \f1 +   First\line
+   Second:\line
    -   Fee\line
    -   Fie\line
    -   Foe\line
\line
+   Third\par}
{\pard \ql \f0 \sa180 \li0 \fi0 Pandoc transforms this into a "compact list" (with no {\f1 <p>} tags around "First", "Second", or "Third"), while markdown puts {\f1 <p>} tags around "Second" and "Third" (but not "First"), because of the blank space around "Third". Pandoc follows a simple rule: if the text is followed by a blank line, it is treated as a paragraph. Since "Second" is followed by a list, and not a blank line, it isn't treated as a paragraph. The fact that the list is followed by a blank line is irrelevant. (Note: Pandoc works this way even when the {\f1 markdown_strict} format is specified. This behavior is consistent with the official markdown syntax description, even though it is different from that of {\f1 Markdown.pl}.)\par}
{\pard \ql \f0 \sa180 \li0 \fi0 \b \fs28 Ending a list\par}
{\pard \ql \f0 \sa180 \li0 \fi0 What if you want to put an indented code block after a list?\par}
{\pard \ql \f0 \sa180 \li0 \fi0 \f1 -   item one\line
-   item two\line
\line
    \{ my code block \}\par}
{\pard \ql \f0 \sa180 \li0 \fi0 Trouble! Here pandoc (like other markdown implementations) will treat {\f1 \{ my code block \}} as the second paragraph of item two, and not as a code block.\par}
{\pard \ql \f0 \sa180 \li0 \fi0 To "cut off" the list after item two, you can insert some non-indented content, like an HTML comment, which won't produce visible output in any format:\par}
{\pard \ql \f0 \sa180 \li0 \fi0 \f1 -   item one\line
-   item two\line
\line
<!-- end of list -->\line
\line
    \{ my code block \}\par}
{\pard \ql \f0 \sa180 \li0 \fi0 You can use the same trick if you want two consecutive lists instead of one big list:\par}
{\pard \ql \f0 \sa180 \li0 \fi0 \f1 1.  one\line
2.  two\line
3.  three\line
\line
<!-- -->\line
\line
1.  uno\line
2.  dos\line
3.  tres\par}
{\pard \ql \f0 \sa180 \li0 \fi0 \b \fs32 Horizontal rules\par}
{\pard \ql \f0 \sa180 \li0 \fi0 A line containing a row of three or more {\f1 *}, {\f1 -}, or {\f1 _} characters (optionally separated by spaces) produces a horizontal rule:\par}
{\pard \ql \f0 \sa180 \li0 \fi0 \f1 *  *  *  *\line
\line
---------------\par}
{\pard \ql \f0 \sa180 \li0 \fi0 \b \fs32 Tables\par}
{\pard \ql \f0 \sa180 \li0 \fi0 Four kinds of tables may be used. The first three kinds presuppose the use of a fixed-width font, such as Courier. The fourth kind can be used with proportionally spaced fonts, as it does not require lining up columns.\par}
{\pard \ql \f0 \sa180 \li0 \fi0 \b \fs28 Simple tables\par}
{\pard \ql \f0 \sa180 \li0 \fi0 {\b Extension: {\f1 simple_tables}, {\f1 table_captions}}\par}
{\pard \ql \f0 \sa180 \li0 \fi0 Simple tables look like this:\par}
{\pard \ql \f0 \sa180 \li0 \fi0 \f1   Right     Left     Center     Default\line
-------     ------ ----------   -------\line
     12     12        12            12\line
    123     123       123          123\line
      1     1          1             1\line
\line
Table:  Demonstration of simple table syntax.\par}
{\pard \ql \f0 \sa180 \li0 \fi0 The headers and table rows must each fit on one line. Column alignments are determined by the position of the header text relative to the dashed line below it:{\super\chftn}{\*\footnote\chftn\~\plain\pard {\pard \ql \f0 \sa180 \li0 \fi0 This scheme is due to Michel Fortin, who proposed it on the {\field{\*\fldinst{HYPERLINK "http://six.pairlist.net/pipermail/markdown-discuss/2005-March/001097.html"}}{\fldrslt{\ul
Markdown discussion list
}}}
.\par}
}\par}
{\pard \ql \f0 \sa0 \li360 \fi-360 \bullet \tx360\tab If the dashed line is flush with the header text on the right side but extends beyond it on the left, the column is right-aligned.\par}
{\pard \ql \f0 \sa0 \li360 \fi-360 \bullet \tx360\tab If the dashed line is flush with the header text on the left side but extends beyond it on the right, the column is left-aligned.\par}
{\pard \ql \f0 \sa0 \li360 \fi-360 \bullet \tx360\tab If the dashed line extends beyond the header text on both sides, the column is centered.\par}
{\pard \ql \f0 \sa0 \li360 \fi-360 \bullet \tx360\tab If the dashed line is flush with the header text on both sides, the default alignment is used (in most cases, this will be left).\sa180\par}
{\pard \ql \f0 \sa180 \li0 \fi0 The table must end with a blank line, or a line of dashes followed by a blank line. A caption may optionally be provided (as illustrated in the example above). A caption is a paragraph beginning with the string {\f1 Table:} (or just {\f1 :}), which will be stripped off. It may appear either before or after the table.\par}
{\pard \ql \f0 \sa180 \li0 \fi0 The column headers may be omitted, provided a dashed line is used to end the table. For example:\par}
{\pard \ql \f0 \sa180 \li0 \fi0 \f1 -------     ------ ----------   -------\line
     12     12        12             12\line
    123     123       123           123\line
      1     1          1              1\line
-------     ------ ----------   -------\par}
{\pard \ql \f0 \sa180 \li0 \fi0 When headers are omitted, column alignments are determined on the basis of the first line of the table body. So, in the tables above, the columns would be right, left, center, and right aligned, respectively.\par}
{\pard \ql \f0 \sa180 \li0 \fi0 \b \fs28 Multiline tables\par}
{\pard \ql \f0 \sa180 \li0 \fi0 {\b Extension: {\f1 multiline_tables}, {\f1 table_captions}}\par}
{\pard \ql \f0 \sa180 \li0 \fi0 Multiline tables allow headers and table rows to span multiple lines of text (but cells that span multiple columns or rows of the table are not supported). Here is an example:\par}
{\pard \ql \f0 \sa180 \li0 \fi0 \f1 -------------------------------------------------------------\line
 Centered   Default           Right Left\line
  Header    Aligned         Aligned Aligned\line
----------- ------- --------------- -------------------------\line
   First    row                12.0 Example of a row that\line
                                    spans multiple lines.\line
\line
  Second    row                 5.0 Here's another one. Note\line
                                    the blank line between\line
                                    rows.\line
-------------------------------------------------------------\line
\line
Table: Here's the caption. It, too, may span\line
multiple lines.\par}
{\pard \ql \f0 \sa180 \li0 \fi0 These work like simple tables, but with the following differences:\par}
{\pard \ql \f0 \sa0 \li360 \fi-360 \bullet \tx360\tab They must begin with a row of dashes, before the header text (unless the headers are omitted).\par}
{\pard \ql \f0 \sa0 \li360 \fi-360 \bullet \tx360\tab They must end with a row of dashes, then a blank line.\par}
{\pard \ql \f0 \sa0 \li360 \fi-360 \bullet \tx360\tab The rows must be separated by blank lines.\sa180\par}
{\pard \ql \f0 \sa180 \li0 \fi0 In multiline tables, the table parser pays attention to the widths of the columns, and the writers try to reproduce these relative widths in the output. So, if you find that one of the columns is too narrow in the output, try widening it in the markdown source.\par}
{\pard \ql \f0 \sa180 \li0 \fi0 Headers may be omitted in multiline tables as well as simple tables:\par}
{\pard \ql \f0 \sa180 \li0 \fi0 \f1 ----------- ------- --------------- -------------------------\line
   First    row                12.0 Example of a row that\line
                                    spans multiple lines.\line
\line
  Second    row                 5.0 Here's another one. Note\line
                                    the blank line between\line
                                    rows.\line
----------- ------- --------------- -------------------------\line
\line
: Here's a multiline table without headers.\par}
{\pard \ql \f0 \sa180 \li0 \fi0 It is possible for a multiline table to have just one row, but the row should be followed by a blank line (and then the row of dashes that ends the table), or the table may be interpreted as a simple table.\par}
{\pard \ql \f0 \sa180 \li0 \fi0 \b \fs28 Grid tables\par}
{\pard \ql \f0 \sa180 \li0 \fi0 {\b Extension: {\f1 grid_tables}, {\f1 table_captions}}\par}
{\pard \ql \f0 \sa180 \li0 \fi0 Grid tables look like this:\par}
{\pard \ql \f0 \sa180 \li0 \fi0 \f1 : Sample grid table.\line
\line
+---------------+---------------+--------------------+\line
| Fruit         | Price         | Advantages         |\line
+===============+===============+====================+\line
| Bananas       | $1.34         | - built-in wrapper |\line
|               |               | - bright color     |\line
+---------------+---------------+--------------------+\line
| Oranges       | $2.10         | - cures scurvy     |\line
|               |               | - tasty            |\line
+---------------+---------------+--------------------+\par}
{\pard \ql \f0 \sa180 \li0 \fi0 The row of {\f1 =}s separates the header from the table body, and can be omitted for a headerless table. The cells of grid tables may contain arbitrary block elements (multiple paragraphs, code blocks, lists, etc.). Alignments are not supported, nor are cells that span multiple columns or rows. Grid tables can be created easily using {\field{\*\fldinst{HYPERLINK "http://table.sourceforge.net/"}}{\fldrslt{\ul
Emacs table mode
}}}
.\par}
{\pard \ql \f0 \sa180 \li0 \fi0 \b \fs28 Pipe tables\par}
{\pard \ql \f0 \sa180 \li0 \fi0 {\b Extension: {\f1 pipe_tables}, {\f1 table_captions}}\par}
{\pard \ql \f0 \sa180 \li0 \fi0 Pipe tables look like this:\par}
{\pard \ql \f0 \sa180 \li0 \fi0 \f1 | Right | Left | Default | Center |\line
|------:|:-----|---------|:------:|\line
|   12  |  12  |    12   |    12  |\line
|  123  |  123 |   123   |   123  |\line
|    1  |    1 |     1   |     1  |\line
\line
  : Demonstration of simple table syntax.\par}
{\pard \ql \f0 \sa180 \li0 \fi0 The syntax is {\field{\*\fldinst{HYPERLINK "http://michelf.ca/projects/php-markdown/extra/#table"}}{\fldrslt{\ul
the same as in PHP markdown extra
}}}
. The beginning and ending pipe characters are optional, but pipes are required between all columns. The colons indicate column alignment as shown. The header can be omitted, but the horizontal line must still be included, as it defines column alignments.\par}
{\pard \ql \f0 \sa180 \li0 \fi0 Since the pipes indicate column boundaries, columns need not be vertically aligned, as they are in the above example. So, this is a perfectly legal (though ugly) pipe table:\par}
{\pard \ql \f0 \sa180 \li0 \fi0 \f1 fruit| price\line
-----|-----:\line
apple|2.05\line
pear|1.37\line
orange|3.09\par}
{\pard \ql \f0 \sa180 \li0 \fi0 The cells of pipe tables cannot contain block elements like paragraphs and lists, and cannot span multiple lines.\par}
{\pard \ql \f0 \sa180 \li0 \fi0 Note: Pandoc also recognizes pipe tables of the following form, as can produced by Emacs' orgtbl-mode:\par}
{\pard \ql \f0 \sa180 \li0 \fi0 \f1 | One | Two   |\line
|-----+-------|\line
| my  | table |\line
| is  | nice  |\par}
{\pard \ql \f0 \sa180 \li0 \fi0 The difference is that {\f1 +} is used instead of {\f1 |}. Other orgtbl features are not supported. In particular, to get non-default column alignment, you'll need to add colons as above.\par}
{\pard \ql \f0 \sa180 \li0 \fi0 \b \fs32 Title block\par}
{\pard \ql \f0 \sa180 \li0 \fi0 {\b Extension: {\f1 pandoc_title_block}}\par}
{\pard \ql \f0 \sa180 \li0 \fi0 If the file begins with a title block\par}
{\pard \ql \f0 \sa180 \li0 \fi0 \f1 % title\line
% author(s) (separated by semicolons)\line
% date\par}
{\pard \ql \f0 \sa180 \li0 \fi0 it will be parsed as bibliographic information, not regular text. (It will be used, for example, in the title of standalone LaTeX or HTML output.) The block may contain just a title, a title and an author, or all three elements. If you want to include an author but no title, or a title and a date but no author, you need a blank line:\par}
{\pard \ql \f0 \sa180 \li0 \fi0 \f1 %\line
% Author\line
\line
% My title\line
%\line
% June 15, 2006\par}
{\pard \ql \f0 \sa180 \li0 \fi0 The title may occupy multiple lines, but continuation lines must begin with leading space, thus:\par}
{\pard \ql \f0 \sa180 \li0 \fi0 \f1 % My title\line
  on multiple lines\par}
{\pard \ql \f0 \sa180 \li0 \fi0 If a document has multiple authors, the authors may be put on separate lines with leading space, or separated by semicolons, or both. So, all of the following are equivalent:\par}
{\pard \ql \f0 \sa180 \li0 \fi0 \f1 % Author One\line
  Author Two\line
\line
% Author One; Author Two\line
\line
% Author One;\line
  Author Two\par}
{\pard \ql \f0 \sa180 \li0 \fi0 The date must fit on one line.\par}
{\pard \ql \f0 \sa180 \li0 \fi0 All three metadata fields may contain standard inline formatting (italics, links, footnotes, etc.).\par}
{\pard \ql \f0 \sa180 \li0 \fi0 Title blocks will always be parsed, but they will affect the output only when the {\f1 --standalone} ({\f1 -s}) option is chosen. In HTML output, titles will appear twice: once in the document head -- this is the title that will appear at the top of the window in a browser -- and once at the beginning of the document body. The title in the document head can have an optional prefix attached ({\f1 --title-prefix} or {\f1 -T} option). The title in the body appears as an H1 element with class "title", so it can be suppressed or reformatted with CSS. If a title prefix is specified with {\f1 -T} and no title block appears in the document, the title prefix will be used by itself as the HTML title.\par}
{\pard \ql \f0 \sa180 \li0 \fi0 The man page writer extracts a title, man page section number, and other header and footer information from the title line. The title is assumed to be the first word on the title line, which may optionally end with a (single-digit) section number in parentheses. (There should be no space between the title and the parentheses.) Anything after this is assumed to be additional footer and header text. A single pipe character ({\f1 |}) should be used to separate the footer text from the header text. Thus,\par}
{\pard \ql \f0 \sa180 \li0 \fi0 \f1 % PANDOC(1)\par}
{\pard \ql \f0 \sa180 \li0 \fi0 will yield a man page with the title {\f1 PANDOC} and section 1.\par}
{\pard \ql \f0 \sa180 \li0 \fi0 \f1 % PANDOC(1) Pandoc User Manuals\par}
{\pard \ql \f0 \sa180 \li0 \fi0 will also have "Pandoc User Manuals" in the footer.\par}
{\pard \ql \f0 \sa180 \li0 \fi0 \f1 % PANDOC(1) Pandoc User Manuals | Version 4.0\par}
{\pard \ql \f0 \sa180 \li0 \fi0 will also have "Version 4.0" in the header.\par}
{\pard \ql \f0 \sa180 \li0 \fi0 \b \fs32 Backslash escapes\par}
{\pard \ql \f0 \sa180 \li0 \fi0 {\b Extension: {\f1 all_symbols_escapable}}\par}
{\pard \ql \f0 \sa180 \li0 \fi0 Except inside a code block or inline code, any punctuation or space character preceded by a backslash will be treated literally, even if it would normally indicate formatting. Thus, for example, if one writes\par}
{\pard \ql \f0 \sa180 \li0 \fi0 \f1 *\\*hello\\**\par}
{\pard \ql \f0 \sa180 \li0 \fi0 one will get\par}
{\pard \ql \f0 \sa180 \li0 \fi0 \f1 <em>*hello*</em>\par}
{\pard \ql \f0 \sa180 \li0 \fi0 instead of\par}
{\pard \ql \f0 \sa180 \li0 \fi0 \f1 <strong>hello</strong>\par}
{\pard \ql \f0 \sa180 \li0 \fi0 This rule is easier to remember than standard markdown's rule, which allows only the following characters to be backslash-escaped:\par}
{\pard \ql \f0 \sa180 \li0 \fi0 \f1 \\`*_\{\}[]()>#+-.!\par}
{\pard \ql \f0 \sa180 \li0 \fi0 (However, if the {\f1 markdown_strict} format is used, the standard markdown rule will be used.)\par}
{\pard \ql \f0 \sa180 \li0 \fi0 A backslash-escaped space is parsed as a nonbreaking space. It will appear in TeX output as {\f1 ~} and in HTML and XML as {\f1 \\&#160;} or {\f1 \\&nbsp;}.\par}
{\pard \ql \f0 \sa180 \li0 \fi0 A backslash-escaped newline (i.e. a backslash occurring at the end of a line) is parsed as a hard line break. It will appear in TeX output as {\f1 \\\\} and in HTML as {\f1 <br />}. This is a nice alternative to markdown's "invisible" way of indicating hard line breaks using two trailing spaces on a line.\par}
{\pard \ql \f0 \sa180 \li0 \fi0 Backslash escapes do not work in verbatim contexts.\par}
{\pard \ql \f0 \sa180 \li0 \fi0 \b \fs32 Smart punctuation\par}
{\pard \ql \f0 \sa180 \li0 \fi0 {\b Extension}\par}
{\pard \ql \f0 \sa180 \li0 \fi0 If the {\f1 --smart} option is specified, pandoc will produce typographically correct output, converting straight quotes to curly quotes, {\f1 ---} to em-dashes, {\f1 --} to en-dashes, and {\f1 ...} to ellipses. Nonbreaking spaces are inserted after certain abbreviations, such as "Mr."\par}
{\pard \ql \f0 \sa180 \li0 \fi0 Note: if your LaTeX template uses the {\f1 csquotes} package, pandoc will detect automatically this and use {\f1 \\enquote\{...\}} for quoted text.\par}
{\pard \ql \f0 \sa180 \li0 \fi0 \b \fs32 Inline formatting\par}
{\pard \ql \f0 \sa180 \li0 \fi0 \b \fs28 Emphasis\par}
{\pard \ql \f0 \sa180 \li0 \fi0 To {\i emphasize} some text, surround it with {\f1 *}s or {\f1 _}, like this:\par}
{\pard \ql \f0 \sa180 \li0 \fi0 \f1 This text is _emphasized with underscores_, and this\line
is *emphasized with asterisks*.\par}
{\pard \ql \f0 \sa180 \li0 \fi0 Double {\f1 *} or {\f1 _} produces {\b strong emphasis}:\par}
{\pard \ql \f0 \sa180 \li0 \fi0 \f1 This is **strong emphasis** and __with underscores__.\par}
{\pard \ql \f0 \sa180 \li0 \fi0 A {\f1 *} or {\f1 _} character surrounded by spaces, or backslash-escaped, will not trigger emphasis:\par}
{\pard \ql \f0 \sa180 \li0 \fi0 \f1 This is * not emphasized *, and \\*neither is this\\*.\par}
{\pard \ql \f0 \sa180 \li0 \fi0 {\b Extension: {\f1 intraword_underscores}}\par}
{\pard \ql \f0 \sa180 \li0 \fi0 Because {\f1 _} is sometimes used inside words and identifiers, pandoc does not interpret a {\f1 _} surrounded by alphanumeric characters as an emphasis marker. If you want to emphasize just part of a word, use {\f1 *}:\par}
{\pard \ql \f0 \sa180 \li0 \fi0 \f1 feas*ible*, not feas*able*.\par}
{\pard \ql \f0 \sa180 \li0 \fi0 \b \fs28 Strikeout\par}
{\pard \ql \f0 \sa180 \li0 \fi0 {\b Extension: {\f1 strikeout}}\par}
{\pard \ql \f0 \sa180 \li0 \fi0 To strikeout a section of text with a horizontal line, begin and end it with {\f1 ~~}. Thus, for example,\par}
{\pard \ql \f0 \sa180 \li0 \fi0 \f1 This ~~is deleted text.~~\par}
{\pard \ql \f0 \sa180 \li0 \fi0 \b \fs28 Superscripts and subscripts\par}
{\pard \ql \f0 \sa180 \li0 \fi0 {\b Extension: {\f1 superscript}, {\f1 subscript}}\par}
{\pard \ql \f0 \sa180 \li0 \fi0 Superscripts may be written by surrounding the superscripted text by {\f1 ^} characters; subscripts may be written by surrounding the subscripted text by {\f1 ~} characters. Thus, for example,\par}
{\pard \ql \f0 \sa180 \li0 \fi0 \f1 H~2~O is a liquid.  2^10^ is 1024.\par}
{\pard \ql \f0 \sa180 \li0 \fi0 If the superscripted or subscripted text contains spaces, these spaces must be escaped with backslashes. (This is to prevent accidental superscripting and subscripting through the ordinary use of {\f1 ~} and {\f1 ^}.) Thus, if you want the letter P with 'a cat' in subscripts, use {\f1 P~a\\ cat~}, not {\f1 P~a cat~}.\par}
{\pard \ql \f0 \sa180 \li0 \fi0 \b \fs28 Verbatim\par}
{\pard \ql \f0 \sa180 \li0 \fi0 To make a short span of text verbatim, put it inside backticks:\par}
{\pard \ql \f0 \sa180 \li0 \fi0 \f1 What is the difference between `>>=` and `>>`?\par}
{\pard \ql \f0 \sa180 \li0 \fi0 If the verbatim text includes a backtick, use double backticks:\par}
{\pard \ql \f0 \sa180 \li0 \fi0 \f1 Here is a literal backtick `` ` ``.\par}
{\pard \ql \f0 \sa180 \li0 \fi0 (The spaces after the opening backticks and before the closing backticks will be ignored.)\par}
{\pard \ql \f0 \sa180 \li0 \fi0 The general rule is that a verbatim span starts with a string of consecutive backticks (optionally followed by a space) and ends with a string of the same number of backticks (optionally preceded by a space).\par}
{\pard \ql \f0 \sa180 \li0 \fi0 Note that backslash-escapes (and other markdown constructs) do not work in verbatim contexts:\par}
{\pard \ql \f0 \sa180 \li0 \fi0 \f1 This is a backslash followed by an asterisk: `\\*`.\par}
{\pard \ql \f0 \sa180 \li0 \fi0 {\b Extension: {\f1 inline_code_attributes}}\par}
{\pard \ql \f0 \sa180 \li0 \fi0 Attributes can be attached to verbatim text, just as with {\field{\*\fldinst{HYPERLINK "#fenced-code-blocks"}}{\fldrslt{\ul
fenced code blocks
}}}
:\par}
{\pard \ql \f0 \sa180 \li0 \fi0 \f1 `<$>`\{.haskell\}\par}
{\pard \ql \f0 \sa180 \li0 \fi0 \b \fs32 Math\par}
{\pard \ql \f0 \sa180 \li0 \fi0 {\b Extension: {\f1 tex_math_dollars}}\par}
{\pard \ql \f0 \sa180 \li0 \fi0 Anything between two {\f1 $} characters will be treated as TeX math. The opening {\f1 $} must have a character immediately to its right, while the closing {\f1 $} must have a character immediately to its left. Thus, {\f1 $20,000 and $30,000} won't parse as math. If for some reason you need to enclose text in literal {\f1 $} characters, backslash-escape them and they won't be treated as math delimiters.\par}
{\pard \ql \f0 \sa180 \li0 \fi0 TeX math will be printed in all output formats. How it is rendered depends on the output format:\par}
{\pard \ql \f0 \sa0 \li0 \fi0 Markdown, LaTeX, Org-Mode, ConTeXt\par}
{\pard \ql \f0 \sa180 \li360 \fi0 It will appear verbatim between {\f1 $} characters.\par}
{\pard \ql \f0 \sa0 \li0 \fi0 reStructuredText\par}
{\pard \ql \f0 \sa180 \li360 \fi0 It will be rendered using an interpreted text role {\f1 :math:}, as described {\field{\*\fldinst{HYPERLINK "http://www.american.edu/econ/itex2mml/mathhack.rst"}}{\fldrslt{\ul
here
}}}
.\par}
{\pard \ql \f0 \sa0 \li0 \fi0 AsciiDoc\par}
{\pard \ql \f0 \sa180 \li360 \fi0 It will be rendered as {\f1 latexmath:[...]}.\par}
{\pard \ql \f0 \sa0 \li0 \fi0 Texinfo\par}
{\pard \ql \f0 \sa180 \li360 \fi0 It will be rendered inside a {\f1 @math} command.\par}
{\pard \ql \f0 \sa0 \li0 \fi0 groff man\par}
{\pard \ql \f0 \sa180 \li360 \fi0 It will be rendered verbatim without {\f1 $}'s.\par}
{\pard \ql \f0 \sa0 \li0 \fi0 MediaWiki\par}
{\pard \ql \f0 \sa180 \li360 \fi0 It will be rendered inside {\f1 <math>} tags.\par}
{\pard \ql \f0 \sa0 \li0 \fi0 Textile\par}
{\pard \ql \f0 \sa180 \li360 \fi0 It will be rendered inside {\f1 <span class="math">} tags.\par}
{\pard \ql \f0 \sa0 \li0 \fi0 RTF, OpenDocument, ODT\par}
{\pard \ql \f0 \sa180 \li360 \fi0 It will be rendered, if possible, using unicode characters, and will otherwise appear verbatim.\par}
{\pard \ql \f0 \sa0 \li0 \fi0 Docbook\par}
{\pard \ql \f0 \sa180 \li360 \fi0 If the {\f1 --mathml} flag is used, it will be rendered using mathml in an {\f1 inlineequation} or {\f1 informalequation} tag. Otherwise it will be rendered, if possible, using unicode characters.\par}
{\pard \ql \f0 \sa0 \li0 \fi0 Docx\par}
{\pard \ql \f0 \sa180 \li360 \fi0 It will be rendered using OMML math markup.\par}
{\pard \ql \f0 \sa0 \li0 \fi0 FictionBook2\par}
{\pard \ql \f0 \sa180 \li360 \fi0 If the {\f1 --webtex} option is used, formulas are rendered as images using Google Charts or other compatible web service, downloaded and embedded in the e-book. Otherwise, they will appear verbatim.\par}
{\pard \ql \f0 \sa0 \li0 \fi0 HTML, Slidy, DZSlides, S5, EPUB\par}
{\pard \ql \f0 \sa180 \li360 \fi0 The way math is rendered in HTML will depend on the command-line options selected:\par}
{\pard \ql \f0 \sa180 \li720 \fi-360 1.\tx360\tab The default is to render TeX math as far as possible using unicode characters, as with RTF, DocBook, and OpenDocument output. Formulas are put inside a {\f1 span} with {\f1 class="math"}, so that they may be styled differently from the surrounding text if needed.\par}
{\pard \ql \f0 \sa180 \li720 \fi-360 2.\tx360\tab If the {\f1 --latexmathml} option is used, TeX math will be displayed between {\f1 $} or {\f1 $$} characters and put in {\f1 <span>} tags with class {\f1 LaTeX}. The {\field{\*\fldinst{HYPERLINK "http://math.etsu.edu/LaTeXMathML/"}}{\fldrslt{\ul
LaTeXMathML
}}}
 script will be used to render it as formulas. (This trick does not work in all browsers, but it works in Firefox. In browsers that do not support LaTeXMathML, TeX math will appear verbatim between {\f1 $} characters.)\par}
{\pard \ql \f0 \sa180 \li720 \fi-360 3.\tx360\tab If the {\f1 --jsmath} option is used, TeX math will be put inside {\f1 <span>} tags (for inline math) or {\f1 <div>} tags (for display math) with class {\f1 math}. The {\field{\*\fldinst{HYPERLINK "http://www.math.union.edu/~dpvc/jsmath/"}}{\fldrslt{\ul
jsMath
}}}
 script will be used to render it.\par}
{\pard \ql \f0 \sa180 \li720 \fi-360 4.\tx360\tab If the {\f1 --mimetex} option is used, the {\field{\*\fldinst{HYPERLINK "http://www.forkosh.com/mimetex.html"}}{\fldrslt{\ul
mimeTeX
}}}
 CGI script will be called to generate images for each TeX formula. This should work in all browsers. The {\f1 --mimetex} option takes an optional URL as argument. If no URL is specified, it will be assumed that the mimeTeX CGI script is at {\f1 /cgi-bin/mimetex.cgi}.\par}
{\pard \ql \f0 \sa180 \li720 \fi-360 5.\tx360\tab If the {\f1 --gladtex} option is used, TeX formulas will be enclosed in {\f1 <eq>} tags in the HTML output. The resulting {\f1 htex} file may then be processed by {\field{\*\fldinst{HYPERLINK "http://ans.hsh.no/home/mgg/gladtex/"}}{\fldrslt{\ul
gladTeX
}}}
, which will produce image files for each formula and an {\f1 html} file with links to these images. So, the procedure is:\par}
{\pard \ql \f0 \sa180 \li720 \fi0 \f1 pandoc -s --gladtex myfile.txt -o myfile.htex\line
gladtex -d myfile-images myfile.htex\line
# produces myfile.html and images in myfile-images\par}
{\pard \ql \f0 \sa180 \li720 \fi-360 6.\tx360\tab If the {\f1 --webtex} option is used, TeX formulas will be converted to {\f1 <img>} tags that link to an external script that converts formulas to images. The formula will be URL-encoded and concatenated with the URL provided. If no URL is specified, the Google Chart API will be used ({\f1 http://chart.apis.google.com/chart?cht=tx&chl=}).\par}
{\pard \ql \f0 \sa180 \li720 \fi-360 7.\tx360\tab If the {\f1 --mathjax} option is used, TeX math will be displayed between {\f1 \\(...\\)} (for inline math) or {\f1 \\[...\\]} (for display math) and put in {\f1 <span>} tags with class {\f1 math}. The {\field{\*\fldinst{HYPERLINK "http://www.mathjax.org/"}}{\fldrslt{\ul
MathJax
}}}
 script will be used to render it as formulas.\sa180\sa180\par}
{\pard \ql \f0 \sa180 \li0 \fi0 \b \fs32 Raw HTML\par}
{\pard \ql \f0 \sa180 \li0 \fi0 {\b Extension: {\f1 raw_html}}\par}
{\pard \ql \f0 \sa180 \li0 \fi0 Markdown allows you to insert raw HTML (or DocBook) anywhere in a document (except verbatim contexts, where {\f1 <}, {\f1 >}, and {\f1 &} are interpreted literally). (Techncially this is not an extension, since standard markdown allows it, but it has been made an extension so that it can be disabled if desired.)\par}
{\pard \ql \f0 \sa180 \li0 \fi0 The raw HTML is passed through unchanged in HTML, S5, Slidy, Slideous, DZSlides, EPUB, Markdown, and Textile output, and suppressed in other formats.\par}
{\pard \ql \f0 \sa180 \li0 \fi0 {\b Extension: {\f1 markdown_in_html_blocks}}\par}
{\pard \ql \f0 \sa180 \li0 \fi0 Standard markdown allows you to include HTML "blocks": blocks of HTML between balanced tags that are separated from the surrounding text with blank lines, and start and end at the left margin. Within these blocks, everything is interpreted as HTML, not markdown; so (for example), {\f1 *} does not signify emphasis.\par}
{\pard \ql \f0 \sa180 \li0 \fi0 Pandoc behaves this way when the {\f1 markdown_strict} format is used; but by default, pandoc interprets material between HTML block tags as markdown. Thus, for example, Pandoc will turn\par}
{\pard \ql \f0 \sa180 \li0 \fi0 \f1 <table>\line
    <tr>\line
        <td>*one*</td>\line
        <td>[a link](http://google.com)</td>\line
    </tr>\line
</table>\par}
{\pard \ql \f0 \sa180 \li0 \fi0 into\par}
{\pard \ql \f0 \sa180 \li0 \fi0 \f1 <table>\line
    <tr>\line
        <td><em>one</em></td>\line
        <td><a href="http://google.com">a link</a></td>\line
    </tr>\line
</table>\par}
{\pard \ql \f0 \sa180 \li0 \fi0 whereas {\f1 Markdown.pl} will preserve it as is.\par}
{\pard \ql \f0 \sa180 \li0 \fi0 There is one exception to this rule: text between {\f1 <script>} and {\f1 <style>} tags is not interpreted as markdown.\par}
{\pard \ql \f0 \sa180 \li0 \fi0 This departure from standard markdown should make it easier to mix markdown with HTML block elements. For example, one can surround a block of markdown text with {\f1 <div>} tags without preventing it from being interpreted as markdown.\par}
{\pard \ql \f0 \sa180 \li0 \fi0 \b \fs32 Raw TeX\par}
{\pard \ql \f0 \sa180 \li0 \fi0 {\b Extension: {\f1 raw_tex}}\par}
{\pard \ql \f0 \sa180 \li0 \fi0 In addition to raw HTML, pandoc allows raw LaTeX, TeX, and ConTeXt to be included in a document. Inline TeX commands will be preserved and passed unchanged to the LaTeX and ConTeXt writers. Thus, for example, you can use LaTeX to include BibTeX citations:\par}
{\pard \ql \f0 \sa180 \li0 \fi0 \f1 This result was proved in \\cite\{jones.1967\}.\par}
{\pard \ql \f0 \sa180 \li0 \fi0 Note that in LaTeX environments, like\par}
{\pard \ql \f0 \sa180 \li0 \fi0 \f1 \\begin\{tabular\}\{|l|l|\}\\hline\line
Age & Frequency \\\\ \\hline\line
18--25  & 15 \\\\\line
26--35  & 33 \\\\\line
36--45  & 22 \\\\ \\hline\line
\\end\{tabular\}\par}
{\pard \ql \f0 \sa180 \li0 \fi0 the material between the begin and end tags will be interpreted as raw LaTeX, not as markdown.\par}
{\pard \ql \f0 \sa180 \li0 \fi0 Inline LaTeX is ignored in output formats other than Markdown, LaTeX, and ConTeXt.\par}
{\pard \ql \f0 \sa180 \li0 \fi0 \b \fs32 LaTeX macros\par}
{\pard \ql \f0 \sa180 \li0 \fi0 {\b Extension: {\f1 latex_macros}}\par}
{\pard \ql \f0 \sa180 \li0 \fi0 For output formats other than LaTeX, pandoc will parse LaTeX {\f1 \\newcommand} and {\f1 \\renewcommand} definitions and apply the resulting macros to all LaTeX math. So, for example, the following will work in all output formats, not just LaTeX:\par}
{\pard \ql \f0 \sa180 \li0 \fi0 \f1 \\newcommand\{\\tuple\}[1]\{\\langle #1 \\rangle\}\line
\line
$\\tuple\{a, b, c\}$\par}
{\pard \ql \f0 \sa180 \li0 \fi0 In LaTeX output, the {\f1 \\newcommand} definition will simply be passed unchanged to the output.\par}
{\pard \ql \f0 \sa180 \li0 \fi0 \b \fs32 Links\par}
{\pard \ql \f0 \sa180 \li0 \fi0 Markdown allows links to be specified in several ways.\par}
{\pard \ql \f0 \sa180 \li0 \fi0 \b \fs28 Automatic links\par}
{\pard \ql \f0 \sa180 \li0 \fi0 If you enclose a URL or email address in pointy brackets, it will become a link:\par}
{\pard \ql \f0 \sa180 \li0 \fi0 \f1 <http://google.com>\line
<sam@green.eggs.ham>\par}
{\pard \ql \f0 \sa180 \li0 \fi0 \b \fs28 Inline links\par}
{\pard \ql \f0 \sa180 \li0 \fi0 An inline link consists of the link text in square brackets, followed by the URL in parentheses. (Optionally, the URL can be followed by a link title, in quotes.)\par}
{\pard \ql \f0 \sa180 \li0 \fi0 \f1 This is an [inline link](/url), and here's [one with\line
a title](http://fsf.org "click here for a good time!").\par}
{\pard \ql \f0 \sa180 \li0 \fi0 There can be no space between the bracketed part and the parenthesized part. The link text can contain formatting (such as emphasis), but the title cannot.\par}
{\pard \ql \f0 \sa180 \li0 \fi0 \b \fs28 Reference links\par}
{\pard \ql \f0 \sa180 \li0 \fi0 An {\i explicit} reference link has two parts, the link itself and the link definition, which may occur elsewhere in the document (either before or after the link).\par}
{\pard \ql \f0 \sa180 \li0 \fi0 The link consists of link text in square brackets, followed by a label in square brackets. (There can be space between the two.) The link definition consists of the bracketed label, followed by a colon and a space, followed by the URL, and optionally (after a space) a link title either in quotes or in parentheses.\par}
{\pard \ql \f0 \sa180 \li0 \fi0 Here are some examples:\par}
{\pard \ql \f0 \sa180 \li0 \fi0 \f1 [my label 1]: /foo/bar.html  "My title, optional"\line
[my label 2]: /foo\line
[my label 3]: http://fsf.org (The free software foundation)\line
[my label 4]: /bar#special  'A title in single quotes'\par}
{\pard \ql \f0 \sa180 \li0 \fi0 The URL may optionally be surrounded by angle brackets:\par}
{\pard \ql \f0 \sa180 \li0 \fi0 \f1 [my label 5]: <http://foo.bar.baz>\par}
{\pard \ql \f0 \sa180 \li0 \fi0 The title may go on the next line:\par}
{\pard \ql \f0 \sa180 \li0 \fi0 \f1 [my label 3]: http://fsf.org\line
  "The free software foundation"\par}
{\pard \ql \f0 \sa180 \li0 \fi0 Note that link labels are not case sensitive. So, this will work:\par}
{\pard \ql \f0 \sa180 \li0 \fi0 \f1 Here is [my link][FOO]\line
\line
[Foo]: /bar/baz\par}
{\pard \ql \f0 \sa180 \li0 \fi0 In an {\i implicit} reference link, the second pair of brackets is empty, or omitted entirely:\par}
{\pard \ql \f0 \sa180 \li0 \fi0 \f1 See [my website][], or [my website].\line
\line
[my website]: http://foo.bar.baz\par}
{\pard \ql \f0 \sa180 \li0 \fi0 Note: In {\f1 Markdown.pl} and most other markdown implementations, reference link definitions cannot occur in nested constructions such as list items or block quotes. Pandoc lifts this arbitrary seeming restriction. So the following is fine in pandoc, though not in most other implementations:\par}
{\pard \ql \f0 \sa180 \li0 \fi0 \f1 > My block [quote].\line
>\line
> [quote]: /foo\par}
{\pard \ql \f0 \sa180 \li0 \fi0 \b \fs28 Internal links\par}
{\pard \ql \f0 \sa180 \li0 \fi0 To link to another section of the same document, use the automatically generated identifier (see {\field{\*\fldinst{HYPERLINK "#header-identifiers-in-html-latex-and-context"}}{\fldrslt{\ul
Header identifiers in HTML, LaTeX, and ConTeXt
}}}
, below). For example:\par}
{\pard \ql \f0 \sa180 \li0 \fi0 \f1 See the [Introduction](#introduction).\par}
{\pard \ql \f0 \sa180 \li0 \fi0 or\par}
{\pard \ql \f0 \sa180 \li0 \fi0 \f1 See the [Introduction].\line
\line
[Introduction]: #introduction\par}
{\pard \ql \f0 \sa180 \li0 \fi0 Internal links are currently supported for HTML formats (including HTML slide shows and EPUB), LaTeX, and ConTeXt.\par}
{\pard \ql \f0 \sa180 \li0 \fi0 \b \fs32 Images\par}
{\pard \ql \f0 \sa180 \li0 \fi0 A link immediately preceded by a {\f1 !} will be treated as an image. The link text will be used as the image's alt text:\par}
{\pard \ql \f0 \sa180 \li0 \fi0 \f1 ![la lune](lalune.jpg "Voyage to the moon")\line
\line
![movie reel]\line
\line
[movie reel]: movie.gif\par}
{\pard \ql \f0 \sa180 \li0 \fi0 \b \fs28 Pictures with captions\par}
{\pard \ql \f0 \sa180 \li0 \fi0 {\b Extension: {\f1 implicit_figures}}\par}
{\pard \ql \f0 \sa180 \li0 \fi0 An image occurring by itself in a paragraph will be rendered as a figure with a caption.{\super\chftn}{\*\footnote\chftn\~\plain\pard {\pard \ql \f0 \sa180 \li0 \fi0 This feature is not yet implemented for RTF, OpenDocument, or ODT. In those formats, you'll just get an image in a paragraph by itself, with no caption.\par}
} (In LaTeX, a figure environment will be used; in HTML, the image will be placed in a {\f1 div} with class {\f1 figure}, together with a caption in a {\f1 p} with class {\f1 caption}.) The image's alt text will be used as the caption.\par}
{\pard \ql \f0 \sa180 \li0 \fi0 \f1 ![This is the caption](/url/of/image.png)\par}
{\pard \ql \f0 \sa180 \li0 \fi0 If you just want a regular inline image, just make sure it is not the only thing in the paragraph. One way to do this is to insert a nonbreaking space after the image:\par}
{\pard \ql \f0 \sa180 \li0 \fi0 \f1 ![This image won't be a figure](/url/of/image.png)\\\par}
{\pard \ql \f0 \sa180 \li0 \fi0 \b \fs32 Footnotes\par}
{\pard \ql \f0 \sa180 \li0 \fi0 {\b Extension: {\f1 footnotes}}\par}
{\pard \ql \f0 \sa180 \li0 \fi0 Pandoc's markdown allows footnotes, using the following syntax:\par}
{\pard \ql \f0 \sa180 \li0 \fi0 \f1 Here is a footnote reference,[^1] and another.[^longnote]\line
\line
[^1]: Here is the footnote.\line
\line
[^longnote]: Here's one with multiple blocks.\line
\line
    Subsequent paragraphs are indented to show that they\line
belong to the previous footnote.\line
\line
        \{ some.code \}\line
\line
    The whole paragraph can be indented, or just the first\line
    line.  In this way, multi-paragraph footnotes work like\line
    multi-paragraph list items.\line
\line
This paragraph won't be part of the note, because it\line
isn't indented.\par}
{\pard \ql \f0 \sa180 \li0 \fi0 The identifiers in footnote references may not contain spaces, tabs, or newlines. These identifiers are used only to correlate the footnote reference with the note itself; in the output, footnotes will be numbered sequentially.\par}
{\pard \ql \f0 \sa180 \li0 \fi0 The footnotes themselves need not be placed at the end of the document. They may appear anywhere except inside other block elements (lists, block quotes, tables, etc.).\par}
{\pard \ql \f0 \sa180 \li0 \fi0 {\b Extension: {\f1 inline_notes}}\par}
{\pard \ql \f0 \sa180 \li0 \fi0 Inline footnotes are also allowed (though, unlike regular notes, they cannot contain multiple paragraphs). The syntax is as follows:\par}
{\pard \ql \f0 \sa180 \li0 \fi0 \f1 Here is an inline note.^[Inlines notes are easier to write, since\line
you don't have to pick an identifier and move down to type the\line
note.]\par}
{\pard \ql \f0 \sa180 \li0 \fi0 Inline and regular footnotes may be mixed freely.\par}
{\pard \ql \f0 \sa180 \li0 \fi0 \b \fs32 Citations\par}
{\pard \ql \f0 \sa180 \li0 \fi0 {\b Extension: {\f1 citations}}\par}
{\pard \ql \f0 \sa180 \li0 \fi0 Pandoc can automatically generate citations and a bibliography in a number of styles (using Andrea Rossato's {\f1 hs-citeproc}). In order to use this feature, you will need a bibliographic database in one of the following formats:\par}
{
\trowd \trgaph120
\clbrdrb\brdrs\cellx4320\clbrdrb\brdrs\cellx8640
\trkeep\intbl
{
{\intbl {\pard \ql \f0 \sa0 \li0 \fi0 Format\par}
\cell}
{\intbl {\pard \ql \f0 \sa0 \li0 \fi0 File extension\par}
\cell}
}
\intbl\row}
{
\trowd \trgaph120
\cellx4320\cellx8640
\trkeep\intbl
{
{\intbl {\pard \ql \f0 \sa0 \li0 \fi0 MODS\par}
\cell}
{\intbl {\pard \ql \f0 \sa0 \li0 \fi0 .mods\par}
\cell}
}
\intbl\row}
{
\trowd \trgaph120
\cellx4320\cellx8640
\trkeep\intbl
{
{\intbl {\pard \ql \f0 \sa0 \li0 \fi0 BibLaTeX\par}
\cell}
{\intbl {\pard \ql \f0 \sa0 \li0 \fi0 .bib\par}
\cell}
}
\intbl\row}
{
\trowd \trgaph120
\cellx4320\cellx8640
\trkeep\intbl
{
{\intbl {\pard \ql \f0 \sa0 \li0 \fi0 BibTeX\par}
\cell}
{\intbl {\pard \ql \f0 \sa0 \li0 \fi0 .bibtex\par}
\cell}
}
\intbl\row}
{
\trowd \trgaph120
\cellx4320\cellx8640
\trkeep\intbl
{
{\intbl {\pard \ql \f0 \sa0 \li0 \fi0 RIS\par}
\cell}
{\intbl {\pard \ql \f0 \sa0 \li0 \fi0 .ris\par}
\cell}
}
\intbl\row}
{
\trowd \trgaph120
\cellx4320\cellx8640
\trkeep\intbl
{
{\intbl {\pard \ql \f0 \sa0 \li0 \fi0 EndNote\par}
\cell}
{\intbl {\pard \ql \f0 \sa0 \li0 \fi0 .enl\par}
\cell}
}
\intbl\row}
{
\trowd \trgaph120
\cellx4320\cellx8640
\trkeep\intbl
{
{\intbl {\pard \ql \f0 \sa0 \li0 \fi0 EndNote XML\par}
\cell}
{\intbl {\pard \ql \f0 \sa0 \li0 \fi0 .xml\par}
\cell}
}
\intbl\row}
{
\trowd \trgaph120
\cellx4320\cellx8640
\trkeep\intbl
{
{\intbl {\pard \ql \f0 \sa0 \li0 \fi0 ISI\par}
\cell}
{\intbl {\pard \ql \f0 \sa0 \li0 \fi0 .wos\par}
\cell}
}
\intbl\row}
{
\trowd \trgaph120
\cellx4320\cellx8640
\trkeep\intbl
{
{\intbl {\pard \ql \f0 \sa0 \li0 \fi0 MEDLINE\par}
\cell}
{\intbl {\pard \ql \f0 \sa0 \li0 \fi0 .medline\par}
\cell}
}
\intbl\row}
{
\trowd \trgaph120
\cellx4320\cellx8640
\trkeep\intbl
{
{\intbl {\pard \ql \f0 \sa0 \li0 \fi0 Copac\par}
\cell}
{\intbl {\pard \ql \f0 \sa0 \li0 \fi0 .copac\par}
\cell}
}
\intbl\row}
{
\trowd \trgaph120
\cellx4320\cellx8640
\trkeep\intbl
{
{\intbl {\pard \ql \f0 \sa0 \li0 \fi0 JSON citeproc\par}
\cell}
{\intbl {\pard \ql \f0 \sa0 \li0 \fi0 .json\par}
\cell}
}
\intbl\row}
{\pard \ql \f0 \sa180 \li0 \fi0 \par}
{\pard \ql \f0 \sa180 \li0 \fi0 Note that {\f1 .bib} can generally be used with both BibTeX and BibLaTeX files, but you can use {\f1 .bibtex} to force BibTeX.\par}
{\pard \ql \f0 \sa180 \li0 \fi0 You will need to specify the bibliography file using the {\f1 --bibliography} command-line option (which may be repeated if you have several bibliographies).\par}
{\pard \ql \f0 \sa180 \li0 \fi0 By default, pandoc will use a Chicago author-date format for citations and references. To use another style, you will need to use the {\f1 --csl} option to specify a {\field{\*\fldinst{HYPERLINK "http://CitationStyles.org"}}{\fldrslt{\ul
CSL
}}}
 1.0 style file. A primer on creating and modifying CSL styles can be found at {\field{\*\fldinst{HYPERLINK "http://citationstyles.org/downloads/primer.html"}}{\fldrslt{\ul
http://citationstyles.org/downloads/primer.html
}}}
. A repository of CSL styles can be found at {\field{\*\fldinst{HYPERLINK "https://github.com/citation-style-language/styles"}}{\fldrslt{\ul
https://github.com/citation-style-language/styles
}}}
. See also {\field{\*\fldinst{HYPERLINK "http://zotero.org/styles"}}{\fldrslt{\ul
http://zotero.org/styles
}}}
 for easy browsing.\par}
{\pard \ql \f0 \sa180 \li0 \fi0 Citations go inside square brackets and are separated by semicolons. Each citation must have a key, composed of '@' + the citation identifier from the database, and may optionally have a prefix, a locator, and a suffix. Here are some examples:\par}
{\pard \ql \f0 \sa180 \li0 \fi0 \f1 Blah blah [see @doe99, pp. 33-35; also @smith04, ch. 1].\line
\line
Blah blah [@doe99, pp. 33-35, 38-39 and *passim*].\line
\line
Blah blah [@smith04; @doe99].\par}
{\pard \ql \f0 \sa180 \li0 \fi0 A minus sign ({\f1 -}) before the {\f1 @} will suppress mention of the author in the citation. This can be useful when the author is already mentioned in the text:\par}
{\pard \ql \f0 \sa180 \li0 \fi0 \f1 Smith says blah [-@smith04].\par}
{\pard \ql \f0 \sa180 \li0 \fi0 You can also write an in-text citation, as follows:\par}
{\pard \ql \f0 \sa180 \li0 \fi0 \f1 @smith04 says blah.\line
\line
@smith04 [p. 33] says blah.\par}
{\pard \ql \f0 \sa180 \li0 \fi0 If the style calls for a list of works cited, it will be placed at the end of the document. Normally, you will want to end your document with an appropriate header:\par}
{\pard \ql \f0 \sa180 \li0 \fi0 \f1 last paragraph...\line
\line
# References\par}
{\pard \ql \f0 \sa180 \li0 \fi0 The bibliography will be inserted after this header.\par}
{\pard \ql \f0 \sa180 \li0 \fi0 \b \fs36 Non-pandoc extensions\par}
{\pard \ql \f0 \sa180 \li0 \fi0 The following markdown syntax extensions are not enabled by default in pandoc, but may be enabled by adding {\f1 +EXTENSION} to the format name, where {\f1 EXTENSION} is the name of the extension. Thus, for example, {\f1 markdown+hard_line_breaks} is markdown with hard line breaks.\par}
{\pard \ql \f0 \sa180 \li0 \fi0 {\b Extension: {\f1 hard_line_breaks}}\line Causes all newlines within a paragraph to be interpreted as hard line breaks instead of spaces.\par}
{\pard \ql \f0 \sa180 \li0 \fi0 {\b Extension: {\f1 tex_math_single_backslash}}\line Causes anything between {\f1 \\(} and {\f1 \\)} to be interpreted as inline TeX math, and anything between {\f1 \\[} and {\f1 \\]} to be interpreted as display TeX math. Note: a drawback of this extension is that it precludes escaping {\f1 (} and {\f1 [}.\par}
{\pard \ql \f0 \sa180 \li0 \fi0 {\b Extension: {\f1 tex_math_double_backslash}}\line Causes anything between {\f1 \\\\(} and {\f1 \\\\)} to be interpreted as inline TeX math, and anything between {\f1 \\\\[} and {\f1 \\\\]} to be interpreted as display TeX math.\par}
{\pard \ql \f0 \sa180 \li0 \fi0 {\b Extension: {\f1 markdown_attribute}}\line By default, pandoc interprets material inside block-level tags as markdown. This extension changes the behavior so that markdown is only parsed inside block-level tags if the tags have the attribute {\f1 markdown=1}.\par}
{\pard \ql \f0 \sa180 \li0 \fi0 {\b Extension: {\f1 mmd_title_block}}\line Enables a {\field{\*\fldinst{HYPERLINK "http://fletcherpenney.net/multimarkdown/"}}{\fldrslt{\ul
MultiMarkdown
}}}
 style title block at the top of the document, for example:\par}
{\pard \ql \f0 \sa180 \li0 \fi0 \f1 Title:   My title\line
Author:  John Doe\line
Date:    September 1, 2008\line
Comment: This is a sample mmd title block, with\line
         a field spanning multiple lines.\par}
{\pard \ql \f0 \sa180 \li0 \fi0 See the MultiMarkdown documentation for details. Note that only title, author, and date are recognized; other fields are simply ignored by pandoc. If {\f1 pandoc_title_block} is enabled, it will take precedence over {\f1 mmd_title_block}.\par}
{\pard \ql \f0 \sa180 \li0 \fi0 {\b Extension: {\f1 abbrevations}}\line Parses PHP Markdown Extra abbreviation keys, like\par}
{\pard \ql \f0 \sa180 \li0 \fi0 \f1 *[HTML]: Hyper Text Markup Language\par}
{\pard \ql \f0 \sa180 \li0 \fi0 Note that the pandoc document model does not support abbreviations, so if this extension is enabled, abbreviation keys are simply skipped (as opposed to being parsed as paragraphs).\par}
{\pard \ql \f0 \sa180 \li0 \fi0 {\b Extension: {\f1 autolink_bare_uris}}\line Makes all absolute URIs into links, even when not surrounded by pointy braces {\f1 <...>}.\par}
{\pard \ql \f0 \sa180 \li0 \fi0 {\b Extension: {\f1 link_attributes}}\line Parses multimarkdown style key-value attributes on link and image references. Note that pandoc's internal document model provides nowhere to put these, so they are presently just ignored.\par}
{\pard \ql \f0 \sa180 \li0 \fi0 {\b Extension: {\f1 mmd_header_identifiers}}\line Parses multimarkdown style header identifiers (in square brackets, after the header but before any trailing {\f1 #}s in an ATX header).\par}
{\pard \ql \f0 \sa180 \li0 \fi0 \b \fs36 Producing slide shows with Pandoc\par}
{\pard \ql \f0 \sa180 \li0 \fi0 You can use Pandoc to produce an HTML + javascript slide presentation that can be viewed via a web browser. There are four ways to do this, using {\field{\*\fldinst{HYPERLINK "http://meyerweb.com/eric/tools/s5/"}}{\fldrslt{\ul
S5
}}}
, {\field{\*\fldinst{HYPERLINK "http://paulrouget.com/dzslides/"}}{\fldrslt{\ul
DZSlides
}}}
, {\field{\*\fldinst{HYPERLINK "http://www.w3.org/Talks/Tools/Slidy/"}}{\fldrslt{\ul
Slidy
}}}
, or {\field{\*\fldinst{HYPERLINK "http://goessner.net/articles/slideous/"}}{\fldrslt{\ul
Slideous
}}}
. You can also produce a PDF slide show using LaTeX {\field{\*\fldinst{HYPERLINK "http://www.tex.ac.uk/CTAN/macros/latex/contrib/beamer"}}{\fldrslt{\ul
beamer
}}}
.\par}
{\pard \ql \f0 \sa180 \li0 \fi0 Here's the markdown source for a simple slide show, {\f1 habits.txt}:\par}
{\pard \ql \f0 \sa180 \li0 \fi0 \f1 % Habits\line
% John Doe\line
% March 22, 2005\line
\line
# In the morning\line
\line
## Getting up\line
\line
- Turn off alarm\line
- Get out of bed\line
\line
## Breakfast\line
\line
- Eat eggs\line
- Drink coffee\line
\line
# In the evening\line
\line
## Dinner\line
\line
- Eat spaghetti\line
- Drink wine\line
\line
------------------\line
\line
![picture of spaghetti](images/spaghetti.jpg)\line
\line
## Going to sleep\line
\line
- Get in bed\line
- Count sheep\par}
{\pard \ql \f0 \sa180 \li0 \fi0 To produce the slide show, simply type\par}
{\pard \ql \f0 \sa180 \li0 \fi0 \f1 pandoc -t s5 -s habits.txt -o habits.html\par}
{\pard \ql \f0 \sa180 \li0 \fi0 for S5,\par}
{\pard \ql \f0 \sa180 \li0 \fi0 \f1 pandoc -t slidy -s habits.txt -o habits.html\par}
{\pard \ql \f0 \sa180 \li0 \fi0 for Slidy,\par}
{\pard \ql \f0 \sa180 \li0 \fi0 \f1 pandoc -t slideous -s habits.txt -o habits.html\par}
{\pard \ql \f0 \sa180 \li0 \fi0 for Slideous,\par}
{\pard \ql \f0 \sa180 \li0 \fi0 \f1 pandoc -t dzslides -s habits.txt -o habits.html\par}
{\pard \ql \f0 \sa180 \li0 \fi0 for DZSlides, or\par}
{\pard \ql \f0 \sa180 \li0 \fi0 \f1 pandoc -t beamer habits.txt -o habits.pdf\par}
{\pard \ql \f0 \sa180 \li0 \fi0 for beamer.\par}
{\pard \ql \f0 \sa180 \li0 \fi0 With all HTML slide formats, the {\f1 --self-contained} option can be used to produce a single file that contains all of the data necessary to display the slide show, including linked scripts, stylesheets, images, and videos.\par}
{\pard \ql \f0 \sa180 \li0 \fi0 \b \fs32 Structuring the slide show\par}
{\pard \ql \f0 \sa180 \li0 \fi0 By default, the {\i slide level} is the highest header level in the hierarchy that is followed immediately by content, and not another header, somewhere in the document. In the example above, level 1 headers are always followed by level 2 headers, which are followed by content, so 2 is the slide level. This default can be overridden using the {\f1 --slide-level} option.\par}
{\pard \ql \f0 \sa180 \li0 \fi0 The document is carved up into slides according to the following rules:\par}
{\pard \ql \f0 \sa180 \li360 \fi-360 \bullet \tx360\tab A horizontal rule always starts a new slide.\par}
{\pard \ql \f0 \sa180 \li360 \fi-360 \bullet \tx360\tab A header at the slide level always starts a new slide.\par}
{\pard \ql \f0 \sa180 \li360 \fi-360 \bullet \tx360\tab Headers {\i below} the slide level in the hierarchy create headers {\i within} a slide.\par}
{\pard \ql \f0 \sa180 \li360 \fi-360 \bullet \tx360\tab Headers {\i above} the slide level in the hierarchy create "title slides," which just contain the section title and help to break the slide show into sections.\par}
{\pard \ql \f0 \sa180 \li360 \fi-360 \bullet \tx360\tab A title page is constructed automatically from the document's title block, if present. (In the case of beamer, this can be disabled by commenting out some lines in the default template.)\sa180\par}
{\pard \ql \f0 \sa180 \li0 \fi0 These rules are designed to support many different styles of slide show. If you don't care about structuring your slides into sections and subsections, you can just use level 1 headers for all each slide. (In that case, level 1 will be the slide level.) But you can also structure the slide show into sections, as in the example above.\par}
{\pard \ql \f0 \sa180 \li0 \fi0 For Slidy, Slideous and S5, the file produced by pandoc with the {\f1 -s/--standalone} option embeds a link to javascripts and CSS files, which are assumed to be available at the relative path {\f1 s5/default} (for S5) or {\f1 slideous} (for Slideous), or at the Slidy website at {\f1 w3.org} (for Slidy). (These paths can be changed by setting the {\f1 slidy-url}, {\f1 slideous-url} or {\f1 s5-url} variables; see {\f1 --variable}, above.) For DZSlides, the (relatively short) javascript and css are included in the file by default.\par}
{\pard \ql \f0 \sa180 \li0 \fi0 \b \fs32 Incremental lists\par}
{\pard \ql \f0 \sa180 \li0 \fi0 By default, these writers produces lists that display "all at once." If you want your lists to display incrementally (one item at a time), use the {\f1 -i} option. If you want a particular list to depart from the default (that is, to display incrementally without the {\f1 -i} option and all at once with the {\f1 -i} option), put it in a block quote:\par}
{\pard \ql \f0 \sa180 \li0 \fi0 \f1 > - Eat spaghetti\line
> - Drink wine\par}
{\pard \ql \f0 \sa180 \li0 \fi0 In this way incremental and nonincremental lists can be mixed in a single document.\par}
{\pard \ql \f0 \sa180 \li0 \fi0 \b \fs32 Styling the slides\par}
{\pard \ql \f0 \sa180 \li0 \fi0 You can change the style of HTML slides by putting customized CSS files in {\f1 $DATADIR/s5/default} (for S5), {\f1 $DATADIR/slidy} (for Slidy), or {\f1 $DATADIR/slideous} (for Slideous), where {\f1 $DATADIR} is the user data directory (see {\f1 --data-dir}, above). The originals may be found in pandoc's system data directory (generally {\f1 $CABALDIR/pandoc-VERSION/s5/default}). Pandoc will look there for any files it does not find in the user data directory.\par}
{\pard \ql \f0 \sa180 \li0 \fi0 For dzslides, the CSS is included in the HTML file itself, and may be modified there.\par}
{\pard \ql \f0 \sa180 \li0 \fi0 To style beamer slides, you can specify a beamer "theme" or "colortheme" using the {\f1 -V} option:\par}
{\pard \ql \f0 \sa180 \li0 \fi0 \f1 pandoc -t beamer habits.txt -V theme:Warsaw -o habits.pdf\par}
{\pard \ql \f0 \sa180 \li0 \fi0 \b \fs36 Literate Haskell support\par}
{\pard \ql \f0 \sa180 \li0 \fi0 If you append {\f1 +lhs} (or {\f1 +literate_haskell}) to an appropriate input or output format ({\f1 markdown}, {\f1 mardkown_strict}, {\f1 rst}, or {\f1 latex} for input or output; {\f1 beamer}, {\f1 html} or {\f1 html5} for output only), pandoc will treat the document as literate Haskell source. This means that\par}
{\pard \ql \f0 \sa180 \li360 \fi-360 \bullet \tx360\tab In markdown input, "bird track" sections will be parsed as Haskell code rather than block quotations. Text between {\f1 \\begin\{code\}} and {\f1 \\end\{code\}} will also be treated as Haskell code.\par}
{\pard \ql \f0 \sa180 \li360 \fi-360 \bullet \tx360\tab In markdown output, code blocks with classes {\f1 haskell} and {\f1 literate} will be rendered using bird tracks, and block quotations will be indented one space, so they will not be treated as Haskell code. In addition, headers will be rendered setext-style (with underlines) rather than atx-style (with '#' characters). (This is because ghc treats '#' characters in column 1 as introducing line numbers.)\par}
{\pard \ql \f0 \sa180 \li360 \fi-360 \bullet \tx360\tab In restructured text input, "bird track" sections will be parsed as Haskell code.\par}
{\pard \ql \f0 \sa180 \li360 \fi-360 \bullet \tx360\tab In restructured text output, code blocks with class {\f1 haskell} will be rendered using bird tracks.\par}
{\pard \ql \f0 \sa180 \li360 \fi-360 \bullet \tx360\tab In LaTeX input, text in {\f1 code} environments will be parsed as Haskell code.\par}
{\pard \ql \f0 \sa180 \li360 \fi-360 \bullet \tx360\tab In LaTeX output, code blocks with class {\f1 haskell} will be rendered inside {\f1 code} environments.\par}
{\pard \ql \f0 \sa180 \li360 \fi-360 \bullet \tx360\tab In HTML output, code blocks with class {\f1 haskell} will be rendered with class {\f1 literatehaskell} and bird tracks.\sa180\par}
{\pard \ql \f0 \sa180 \li0 \fi0 Examples:\par}
{\pard \ql \f0 \sa180 \li0 \fi0 \f1 pandoc -f markdown+lhs -t html\par}
{\pard \ql \f0 \sa180 \li0 \fi0 reads literate Haskell source formatted with markdown conventions and writes ordinary HTML (without bird tracks).\par}
{\pard \ql \f0 \sa180 \li0 \fi0 \f1 pandoc -f markdown+lhs -t html+lhs\par}
{\pard \ql \f0 \sa180 \li0 \fi0 writes HTML with the Haskell code in bird tracks, so it can be copied and pasted as literate Haskell source.\par}
{\pard \ql \f0 \sa180 \li0 \fi0 \b \fs36 Authors\par}
{\pard \ql \f0 \sa180 \li0 \fi0 \u169? 2006-2013 John MacFarlane (jgm at berkeley dot edu). Released under the {\field{\*\fldinst{HYPERLINK "http://www.gnu.org/copyleft/gpl.html"}}{\fldrslt{\ul
GPL
}}}
, version 2 or greater. This software carries no warranty of any kind. (See COPYRIGHT for full copyright and warranty notices.) Other contributors include Recai Okta\u351?, Paulo Tanimoto, Peter Wang, Andrea Rossato, Eric Kow, infinity0x, Luke Plant, shreevatsa.public, Puneeth Chaganti, Paul Rivier, rodja.trappe, Bradley Kuhn, thsutton, Nathan Gass, Jonathan Daugherty, J\u233?r\u233?my Bobbio, Justin Bogner, qerub, Christopher Sawicki, Kelsey Hightower, Masayoshi Takahashi, Antoine Latter, Ralf Stephan, Eric Seidel, B. Scott Michel, Gavin Beatty, Sergey Astanin, Arlo O'Keeffe, Denis Laxalde, Brent Yorgey.\par}
}
